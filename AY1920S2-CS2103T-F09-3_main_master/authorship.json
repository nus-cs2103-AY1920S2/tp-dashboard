[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "mainClassName \u003d \u0027igrad.Main\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jdk8\u0027, version: \u00272.8.8\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    archiveName \u003d \u0027igrad.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        \u0027site-name\u0027: \u0027iGrad\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F09-3/main\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 10,
      "yjskrs": 3,
      "-": 150,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 8,
      "yjskrs": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/java/igrad/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.CourseBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonCourseBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing iGrad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ReadOnlyUserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CourseBookStorage courseBookStorage \u003d new JsonCourseBookStorage(userPrefs.getCourseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s course book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The data from the sample course book will be used instead if {@code storage}\u0027s course book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * or an empty course book will be used instead if errors occur when reading {@code storage}\u0027s course book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cReadOnlyCourseBook\u003e courseBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cReadOnlyUserPrefs\u003e userPrefsOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBookOptional \u003d storage.readCourseBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (courseBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                logger.info(\"CourseBook Data file not found. Will be starting with an empty CourseBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initialData \u003d courseBookOptional.orElseGet(SampleDataUtil::getSampleCourseBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CourseBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            initialData \u003d new CourseBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CourseBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            initialData \u003d new CourseBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    protected ReadOnlyUserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Optional\u003cUserPrefs\u003e userPrefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (!userPrefsOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                logger.info(\"UserPrefs Data file not found. Will be starting with a sample UserPrefs\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d userPrefsOptional.orElseGet(SampleDataUtil::getSampleUserPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty UserPrefs\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"Starting iGrad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping iGrad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 39,
      "-": 107,
      "nathanaelseen": 44
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Config values used by the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 61,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 650;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String LOG_FILE \u003d \"coursebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 2,
      "-": 109
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Container for generic and global user visible messages."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"I don\u0027t know this command, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"you may key in `help` to get a list of commands!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COURSE_COMMAND \u003d \"Here\u0027s a list of course commands \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"you might want to try:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"course set | course edit | course achieve | course delete\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_REQUIREMENT_COMMAND \u003d \"Here\u0027s a list of requirement commands \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"you might want to try:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"requirement add | requirement edit | requirement delete | requirement assign | requirement unassign\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_MODULE_COMMAND \u003d \"Here\u0027s a list of module commands \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"you might want to try:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"module add | module edit | module done | module delete\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_NOT_SET \u003d \"Oh no, you don\u0027t have a course set yet! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"Set it using this command:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"course set n/COURSE_NAME s/TOTAL_SEMESTERS\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_ALREADY_SET \u003d \"Sorry, you have already set a course. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"Use this command instead:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"course edit [n/COURSE_NAME] [s/TOTAL_SEMESTERS]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_SPECIFIER_NOT_SPECIFIED \u003d \"Please provide a non-empty specifier.\\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_SPECIFIER_INVALID \u003d \"Please enter a valid specifier.\\n%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_REQUEST_FAILED \u003d \"ERROR: Request failed for %s\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_ADD_COURSE \u003d \"You don\u0027t have a course yet! Enter your course in the format:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            + CourseAddCommand.MESSAGE_COURSE_ADD_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_WELCOME_BACK \u003d \"Welcome back! Hope your studies are going well!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 37,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a version with major, minor and patch number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 18,
      "yjskrs": 1,
      "-": 94,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 9,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A container for App specific utility functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 36,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .registerModule(new Jdk8Module())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 3,
      "-": 139,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/igrad/csvwriter/CsvWriter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.csvwriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Writes the data stored as a human-readable CSV file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class CsvWriter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final String fileName \u003d \"study_plan.csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private FileWriter csvWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private List\u003cModule\u003e sortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CsvWriter(List\u003cModule\u003e sortedList) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.sortedList \u003d sortedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Writes to CSV"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void write() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        writeHeaders();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        writeBody();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        closeWriter();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private void closeWriter() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void appendNewLine() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void append(String text) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter.append(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        csvWriter.append(\",\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Writes each module as a line. Separates modules taken in different semesters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * by a new line."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void writeBody() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Module module \u003d sortedList.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (module.getSemester().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                append(module.getSemester().get().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            append(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            append(module.getTitle().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            append(module.getCredits().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            appendNewLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (i \u003c sortedList.size() - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                Module nextModule \u003d sortedList.get(i + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (!nextModule.getSemester().equals(module.getSemester())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    appendNewLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Writes the headers of the CSV file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void writeHeaders() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] headers \u003d {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \"Semester\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \"Module Code\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \"Module Title\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \"Module Credits\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String header : headers) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            append(header);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        appendNewLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 78,
      "yjskrs": 1,
      "nathanaelseen": 15
    }
  },
  {
    "path": "src/main/java/igrad/csvwriter/exceptions/InvalidDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.csvwriter.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Signals that one or more of the required fields are not available"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class InvalidDataException extends IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public InvalidDataException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 13,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Execute an \u0027Avatar\u0027 command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If error occurs during parsing avatar name (i.e, it is not valid)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    CommandResult executeAvatar(String commandText) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException, ServiceException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the CourseBook."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see Model#getCourseBook()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ReadOnlyCourseBook getCourseBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 18,
      "-": 33,
      "nathanaelseen": 11
    }
  },
  {
    "path": "src/main/java/igrad/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_COURSE_NOT_SET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.CourseBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBookParser courseBookParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBookParser \u003d new CourseBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult executeAvatar(String avatarName) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommand selectAvatarCommand \u003d courseBookParser.parseAvatarName(avatarName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        commandResult \u003d selectAvatarCommand.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Saves to UserPref data file to save new Avatar, after successful Avatar command execution"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            command \u003d courseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (!model.isCourseNameSet()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    \u0026\u0026 !(pe.getMessage().equals(MESSAGE_UNKNOWN_COMMAND))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * If the command is not properly formmated, and it\u0027s a command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * which the system partially recognises, but the course (name) is not set,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * show the course not set error."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                throw new CommandException(MESSAGE_COURSE_NOT_SET);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                /* There are 2 cases here:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * 1) If the command is not properly formmated, and it\u0027s a command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * which the system entirely does not recognises, and the course (name) is not set,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * show the help message (by propagating this exception)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * 2) If the command is not properly formatted, and its a command which the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * system partially recognises/entirely does not recognise, then just"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 * propagate this exception too (as exactly thrown)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                throw pe;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If the command is a properly formatted command, but the command is not and undo,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * help, or course add command, and where the course (name) is not set, then we have"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to prevent its execution here. If on the contrary, the course were not set,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * but the command is properly formatted as undo, help or course add, then we still"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * allow it to execute."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!model.isCourseNameSet()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 !(command instanceof CourseAddCommand || command instanceof UndoCommand"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || command instanceof HelpCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(MESSAGE_COURSE_NOT_SET);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        //@@author waynewee"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!(command instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                // First, load current state into backup"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                Path backupCourseBookFilePath \u003d model.getBackupCourseBookFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                storage.saveCourseBook(model.getCourseBook(), backupCourseBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Saves to data file after every command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            storage.saveCourseBook(model.getCourseBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return model.getCourseBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return model.getRequirementList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return model.getCourseBookFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 12,
      "teriaiw": 1,
      "yjskrs": 16,
      "-": 21,
      "nathanaelseen": 117
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 17,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Course information (name) updated on the UI panel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final boolean courseEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean courseEdit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.courseEdit \u003d courseEdit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean isCourseEdit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return courseEdit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "teriaiw": 5,
      "yjskrs": 1,
      "-": 66,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CommandUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Contains general purpose utility methods used by some of the commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CommandUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code CourseInfo} (with the details of {@code courseInfoToEdit},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and also based on the most updated information in {@code model}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static CourseInfo createEditedCourseInfo(CourseInfo courseInfoToEdit, Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Copy over all the old values of course"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e currentName \u003d courseInfoToEdit.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now we actually go to our model and recompute cap based on updated module list in model (coursebook)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e updatedCap \u003d CourseInfo.computeCap(model.getFilteredModuleList(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            model.getRequirementList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve updated a new module to requirement (as done), we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled and creditsRequired"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cigrad.model.course.Credits\u003e updatedCredits \u003d CourseInfo.computeCredits("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            model.getRequirementList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Recompute semesters (total and updated)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e updatedSemesters \u003d CourseInfo.computeSemesters("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            courseInfoToEdit.getSemesters(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(currentName, updatedCap, updatedCredits, updatedSemesters);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 1,
      "nathanaelseen": 43
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting iGrad as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 15,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports data to a CSV file.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String SHOWING_EXPORT_MESSAGE \u003d \"I\u0027ve exported your data to a CSV file.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" You can find it in the same folder as this app\u0027s executable!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String EXPORT_ERROR_MESSAGE \u003d \"Sorry, I was unable to export data to CSV file.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" Please ensure that you do not have the file \u0027study_plan.csv\u0027 open\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NO_MODULE_WITH_SEMESTERS_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Sorry, I couldn\u0027t find any modules that are tagged to a semester!\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" I can only export modules that are tagged with a semester.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            List\u003cModule\u003e moduleList \u003d model.exportModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (moduleList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                throw new CommandException(NO_MODULE_WITH_SEMESTERS_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (IOException | NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(EXPORT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new CommandResult(SHOWING_EXPORT_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 45,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 18,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/SelectAvatarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class SelectAvatarCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You\u0027ve chosen a guide!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Avatar toAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an SelectAvatarCommand for Avatar selection"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public SelectAvatarCommand(Avatar avatar) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        toAdd \u003d avatar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Generates the actual success message for the command replacing the placeholders in MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * with the actual Avatar name. (This method also capitalises the first letter of the Avatar name)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return String the (command) success message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String avatarName \u003d toAdd.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String capitaliseAvatarName \u003d avatarName.substring(0, 1).toUpperCase() + avatarName.substring(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return String.format(MESSAGE_SUCCESS + \" \" + Messages.MESSAGE_ADD_COURSE, capitaliseAvatarName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.setAvatar(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(generateSuccessMessage(), toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof SelectAvatarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 toAdd.equals(((SelectAvatarCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 37,
      "yjskrs": 1,
      "nathanaelseen": 15
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Undoes the previous action taken."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undoes latest action.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undid last command.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Unable to undo the last comamand.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_NO_ACTION \u003d \"Nothing to undo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            boolean hasChanged \u003d model.undoCourseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!hasChanged) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                throw new CommandException(MESSAGE_NO_ACTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 35,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/course/CourseAchieveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.model.course.Cap.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.exceptions.CapOverflowException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Adds a course to the application (there can only be one such course)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseAchieveCommand extends CourseCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String COURSE_ACHIEVE_COMMAND_WORD \u003d COURSE_COMMAND_WORD + SPACE + \"achieve\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_ACHIEVE_SUCCESS \u003d \"Maintain an average C.A.P. (per sem) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"of: %1$s to get there! You can do it!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_ACHIEVED_CAP_NOT_CALCULATED \u003d \"Please enter desired C.A.P.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_ACHIEVE_DETAILS \u003d COURSE_ACHIEVE_COMMAND_WORD + \": Calculates average \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"C.A.P. needed per sem to achieve desired C.A.P.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_ACHIEVE_USAGE \u003d \"Parameter(s): \" + PREFIX_CAP + \"DESIRED_CAP\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            + \"e.g. \" + COURSE_ACHIEVE_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            + PREFIX_CAP + \"5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_ACHIEVE_HELP \u003d MESSAGE_COURSE_ACHIEVE_DETAILS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + MESSAGE_COURSE_ACHIEVE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final Optional\u003cCap\u003e capToAchieve;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CourseAchieveCommand(Optional\u003cCap\u003e capToAchieve) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(capToAchieve);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.capToAchieve \u003d capToAchieve;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (capToAchieve.toString().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    MESSAGE_ACHIEVED_CAP_NOT_CALCULATED));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            Optional\u003cCap\u003e estimatedCap \u003d CourseInfo.computeEstimatedCap(model.getCourseInfo(), capToAchieve.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COURSE_ACHIEVE_SUCCESS, estimatedCap.get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        } catch (CapOverflowException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (other instanceof CourseAchieveCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 (capToAchieve.equals(((CourseAchieveCommand) other).capToAchieve));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 66,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/course/CourseAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_COURSE_ALREADY_SET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Adds a course to the application (there can only be one such course)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommand extends CourseCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_ADD_COMMAND_WORD \u003d COURSE_COMMAND_WORD + SPACE + \"set\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_ADD_DETAILS \u003d COURSE_ADD_COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \": Adds a course with relevant details specified.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_ADD_USAGE \u003d \"Parameter(s): \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_NAME + \"COURSE_NAME \" + PREFIX_SEMESTER + \"TOTAL_SEMESTERS\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"e.g. \" + COURSE_ADD_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_NAME + \"Computer Science \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_SEMESTER + \"8\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_ADD_HELP \u003d MESSAGE_COURSE_ADD_DETAILS + MESSAGE_COURSE_ADD_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_ADD_SUCCESS \u003d \"New course: %1$s has been set successfully!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_NOT_ADDED \u003d \"All fields to be filled, course set n/COURSE_NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"s/SEMESTERS\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final CourseInfo toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an CourseInfo to add the Course Book"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseAddCommand(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(courseInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        toAdd \u003d courseInfo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (model.isCourseNameSet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(MESSAGE_COURSE_ALREADY_SET);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addCourseInfo(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COURSE_ADD_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            false, false, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof CourseAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 toAdd.equals(((CourseAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 1,
      "nathanaelseen": 68
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/course/CourseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic course command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public abstract class CourseCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_COMMAND_WORD \u003d \"course\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_COURSE_NON_EXISTENT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"Course does not exist. Please enter an existing course.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 4,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/course/CourseDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Deletes the existing {@code Course} (and all data within it, e.g, {@code Module}, {@code Requirement})."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseDeleteCommand extends CourseCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String COURSE_DELETE_COMMAND_WORD \u003d COURSE_COMMAND_WORD + SPACE + \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_DELETE_SUCCESS \u003d \"Course: %1$s has been deleted successfully!\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            + \"All data cleared! If you made a mistake, use: undo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ReadOnlyCourseBook courseBookToDelete \u003d model.getCourseBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // We have to make a copy of the previous course info as they would be deleted by garbage collector"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo oldCourseInfo \u003d new CourseInfo(model.getCourseInfo());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        model.resetCourseBook(courseBookToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COURSE_DELETE_SUCCESS, oldCourseInfo));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (other instanceof CourseDeleteCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 40,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/course/CourseEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Edits the details of an existing module in the course book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseEditCommand extends CourseCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String COURSE_EDIT_COMMAND_WORD \u003d COURSE_COMMAND_WORD + SPACE + \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_EDIT_DETAILS \u003d COURSE_EDIT_COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \": Edits the name of the course.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_EDIT_USAGE \u003d \"Parameter(s): \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"COURSE_NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"TOTAL_SEMESTERS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"e.g. \" + COURSE_EDIT_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + PREFIX_NAME + \"Information Systems \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + PREFIX_SEMESTER + \"7\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_EDIT_HELP \u003d MESSAGE_COURSE_EDIT_DETAILS + MESSAGE_COURSE_EDIT_USAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_EDIT_SUCCESS \u003d \"Course: %1$s edited successfully!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_COURSE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"COURSE_NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"TOTAL_SEMESTERS]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private EditCourseDescriptor editCourseDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @param editCourseDescriptor details (course name) to edit the course with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *                             (Note: course is special unlike module and requirement as there is only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *                             one course in the course book, hence we don\u0027t need a \u0027Name\u0027/\u0027ModuleCode\u0027, or any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *                             kind of identifier to identify the course we want to edit)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CourseEditCommand(EditCourseDescriptor editCourseDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(editCourseDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.editCourseDescriptor \u003d new EditCourseDescriptor(editCourseDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Creates and returns a {@code CourseInfo} with the details of {@code courseInfoToEdit}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * edited with {@code editCourseDescriptor}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private static CourseInfo createEditedCourseInfo(CourseInfo courseInfoToEdit,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                                                     CourseEditCommand.EditCourseDescriptor editCourseDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * Just copy everything from the original {@code courseInfoToEdit} to our new {@code CourseInfo}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * But for course name and semesters, we retrieve the updated value from the editCourseDescriptor here."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d courseInfoToEdit.getCap();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d courseInfoToEdit.getCredits();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cName\u003e updatedName \u003d editCourseDescriptor.getName().orElse(courseInfoToEdit.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cSemesters\u003e updatedSemesters \u003d editCourseDescriptor.getSemesters()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .orElse(courseInfoToEdit.getSemesters());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CourseInfo(updatedName, cap, credits, updatedSemesters);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // The course name has to first be set, else we can\u0027t proceed to even edit it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        courseInfoToEdit.getName().orElseThrow(() -\u003e new CommandException(MESSAGE_COURSE_NON_EXISTENT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo editedCourseInfo \u003d createEditedCourseInfo(courseInfoToEdit, editCourseDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // If none of the parameters have been modified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (editedCourseInfo.equals(courseInfoToEdit)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new CommandException(MESSAGE_COURSE_NOT_EDITED);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo finalEditedCourseInfo \u003d CommandUtil.createEditedCourseInfo(editedCourseInfo, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        model.setCourseInfo(finalEditedCourseInfo);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COURSE_EDIT_SUCCESS, finalEditedCourseInfo));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!(other instanceof CourseEditCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseEditCommand e \u003d (CourseEditCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return editCourseDescriptor.equals(e.editCourseDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static class EditCourseDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        private Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        private Optional\u003cSemesters\u003e semesters;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public EditCourseDescriptor() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public EditCourseDescriptor(EditCourseDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            setSemesters(toCopy.semesters);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public Optional\u003cOptional\u003cName\u003e\u003e getName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public void setName(Optional\u003cName\u003e name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public Optional\u003cOptional\u003cSemesters\u003e\u003e getSemesters() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return Optional.ofNullable(semesters);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public void setSemesters(Optional\u003cSemesters\u003e semesters) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            this.semesters \u003d semesters;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            if (!(other instanceof EditCourseDescriptor)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            EditCourseDescriptor e \u003d (EditCourseDescriptor) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                \u0026\u0026 getSemesters().equals(e.getSemesters());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 180
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleAddAutoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.module.ModuleStringParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePreclusions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePrerequisites;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.services.JsonParsedModule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.services.NusModsRequester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddAutoCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"add\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Parameter(s): \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_TITLE + \"MODULE_TITLE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"CREDITS \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"Software Engineering \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_SEMESTER + \"Y2S2 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final int MAX_SIZE \u003d 10;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_OVERLOAD \u003d \"Please do not attempt to \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"add more than %d modules.\\nYou attempted to add %d modules.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_COMPLETE \u003d \"%d module(s) added through NUSMods API.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it! I have added the following module(s) for you:\\n%s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, this module already exists in the course book: %s\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Sorry, I was unable to find this module: %s\\nIs your internet down?\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String MESSAGE_PREREQUISITE_NOT_PRESENT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"WARNING: Prerequisite not found!\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String MESSAGE_PRECLUSION_PRESENT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"WARNING: Preclusion found!\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final List\u003cString\u003e toAddList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an ModuleAddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleAddAutoCommand(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        toAddList \u003d moduleCodes;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (toAddList.size() \u003e MAX_SIZE) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_OVERLOAD, MAX_SIZE, toAddList.size()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder messageAdditional \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String moduleCodeStr : toAddList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            JsonParsedModule jsonParsedModule;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                jsonParsedModule \u003d NusModsRequester.getModule(moduleCodeStr);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                messageAdditional.append(String.format(MESSAGE_MODULE_NOT_FOUND, moduleCodeStr));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Title title \u003d new Title(jsonParsedModule.getTitle());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Credits credits \u003d new Credits(jsonParsedModule.getCredits());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleCode moduleCode \u003d new ModuleCode(jsonParsedModule.getModuleCode());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String prerequisiteModulesString \u003d jsonParsedModule.getPrerequisite();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String preclusionModulesString \u003d jsonParsedModule.getPreclusion();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleStringParser prerequisiteParser \u003d new ModuleStringParser(prerequisiteModulesString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModulePrerequisites prerequisites \u003d new ModulePrerequisites(prerequisiteParser.getModuleCodes());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleStringParser preclusionParser \u003d new ModuleStringParser(preclusionModulesString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModulePreclusions preclusions \u003d new ModulePreclusions(preclusionParser.getModuleCodes());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Module module \u003d new Module("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                title,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                moduleCode,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                credits,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                preclusions,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                prerequisites"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            modules.add(module);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArrayList\u003cModule\u003e modulesToAdd \u003d modules"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .filter(m -\u003e !model.hasModule(m))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder message \u003d getMessage(modules, model, modulesToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (Module module : modulesToAdd) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            model.addModule(module);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        message.append(messageAdditional);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new CommandResult(message.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleAddAutoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 toAddList.equals(((ModuleAddAutoCommand) other).toAddList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StringBuilder getMessage(List\u003cModule\u003e modules, Model model, List\u003cModule\u003e modulesToAdd) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (model.hasModule(module)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                message.append(String.format(MESSAGE_DUPLICATE_MODULE, module.getModuleCode().value));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                message.append(String.format(MESSAGE_SUCCESS, module.toString()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (!model.hasModulePrerequisites(module)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    message.append(MESSAGE_PREREQUISITE_NOT_PRESENT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (model.hasModulePreclusions(module)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    message.append(MESSAGE_PRECLUSION_PRESENT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        message.append(String.format(MESSAGE_COMPLETE, modulesToAdd.size()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Formats the exception message for when a preclusion module is present in the model."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String formatPreclusionExceptionMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String moduleCodeString \u003d \"(\" + moduleCode.toString() + \")\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return String.format(MESSAGE_PRECLUSION_PRESENT, moduleCodeString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Formats the exception message for when a prerequisite module is not present in the model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String formatPrerequisiteExceptionMessage(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String moduleCodeString \u003d \"(\" + moduleCode.toString() + \")\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return String.format(MESSAGE_PREREQUISITE_NOT_PRESENT, moduleCodeString);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 140,
      "dargohzy": 28,
      "teriaiw": 1,
      "yjskrs": 2,
      "nathanaelseen": 15
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MODULE_ADD_COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_ADD_DETAILS \u003d MODULE_ADD_COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \": Adds a module with relevant details specified.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_ADD_USAGE \u003d \"Parameter(s): \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"MODULE_TITLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"CREDITS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"e.g. \" + MODULE_ADD_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"Software Engineering \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_SEMESTER + \"Y2S2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_ADD_HELP \u003d MESSAGE_MODULE_ADD_DETAILS + MESSAGE_MODULE_ADD_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_ADD_SUCCESS \u003d \"Got it! I have added this module for you:\\n%1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, this module already exists in the course book.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_ADDED \u003d \"Added module must be provided with at least these \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"argument(s) \" + PREFIX_MODULE_CODE + \"MODULE_CODE \" + PREFIX_TITLE + \"TITLE \" + PREFIX_CREDITS + \"CREDITS \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Creates an ModuleAddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleAddCommand(Module module) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULE_ADD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof ModuleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 toAdd.equals(((ModuleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 70,
      "-": 1,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic module command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_COMMAND_WORD \u003d \"module\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_NON_EXISTENT \u003d \"Sorry, I was unable to find this module: %s\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 14
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Deletes a {@code Module} identified using it\u0027s displayed index from the course book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleDeleteCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MODULE_DELETE_COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_DELETE_DETAILS \u003d MODULE_DELETE_COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \": Deletes module from list\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_DELETE_USAGE \u003d \"Parameter(s): MODULE_CODE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"e.g. \" + MODULE_DELETE_COMMAND_WORD + \" CS2030\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_DELETE_HELP \u003d MESSAGE_MODULE_DELETE_DETAILS + MESSAGE_MODULE_DELETE_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_DELETE_SUCCESS \u003d \"Got it! I have deleted this module for you:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleDeleteCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cModule\u003e moduleToDeleteOpt \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (Module module : lastShownList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                moduleToDeleteOpt \u003d Optional.of(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleToDeleteOpt.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_NON_EXISTENT, moduleCode));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleToDelete \u003d moduleToDeleteOpt.get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementsToUpdate \u003d model.getRequirementsWithModule(moduleToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Given that this module has been deleted in the modules list, there are two things we need"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to do, first is to delete the copies of this modules existing in the modules list of all"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * requirements containing that module. And the second is that we need to update the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled of all requirements (which consists of that module)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * The code below does both of these, for each related Requirement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementsToUpdate.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .forEach(requirementToEdit -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, moduleToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Update the current Requirement in the model (coursebook) with this latest version."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve deleted a module in the system, we need to update CourseInfo, specifically its cap,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * and the Credits (creditsFulfilled) property."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULE_DELETE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code Requirement}, deleting a module; {@code moduleToDelete} (which is under that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * the original requirement; {@code requirementToEdit})"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit, Module moduleToDelete) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Copy over all the old values of requirementToEdit"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Title title \u003d requirementToEdit.getTitle();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve deleted a module from a requirement, we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled in the relevant Requirements, but since Requirement constructor already does"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * it for us, based on the module list passed in, we don\u0027t have to do anything here, just"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * propagate the old credits value."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Credits credits \u003d requirementToEdit.getCredits();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Deletes from the existing requirement; requirementToEdit, the moduleToDelete"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementToEdit.removeModule(moduleToDelete);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Get the most update module list (now with the new module replaced)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modules \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Requirement(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    //@@author waynewee"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof ModuleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 moduleCode.equals(((ModuleDeleteCommand) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 57,
      "yjskrs": 3,
      "-": 4,
      "nathanaelseen": 75
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Marks the module as done, with a specified grade."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDoneCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_DONE_COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"done\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_DONE_DETAILS \u003d MODULE_DONE_COMMAND_WORD + \": Marks a module as done \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"(with a grade) of the module identified by its module code. Existing module (grade) will be overwritten \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"by the input values.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_DONE_USAGE \u003d \"Parameter(s): MODULE_CODE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_GRADE + \"GRADE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"e.g. \" + MODULE_DONE_COMMAND_WORD + \" CS2103T \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_GRADE + \"A+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_DONE_HELP \u003d MESSAGE_MODULE_DONE_DETAILS + MESSAGE_MODULE_DONE_USAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EDITED \u003d \"Grade must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULE_DONE_SUCCESS \u003d \"Yay! I have marked this module as done:\\n%1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private EditModuleDescriptor editModuleGradeDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param moduleCode                of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param editModuleGradeDescriptor details (grade) to edit the module with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleDoneCommand(ModuleCode moduleCode, EditModuleDescriptor editModuleGradeDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(moduleCode, editModuleGradeDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.editModuleGradeDescriptor \u003d new EditModuleDescriptor(editModuleGradeDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Retrieve the module we want to mark a grade done with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToEdit \u003d model.getModule(moduleCode)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .orElseThrow(() -\u003e new CommandException(String.format(MESSAGE_MODULE_NON_EXISTENT, moduleCode)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a new module based on the edited grade."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleGradeDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Update the module in our model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementsToUpdate \u003d model.getRequirementsWithModule(editedModule);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Given that this module has been updated in the modules list, there are two things we need"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to do, first is to update the copies of this  modules existing in the modules list of all"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * requirements containing that module. And the second is that we need to update the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled of all requirements (which consists of that module)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * The code below does both of these, for each related Requirement."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementsToUpdate.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .forEach(requirementToEdit -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Update the current Requirement in the model (coursebook) with this latest version."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve deleted a module in the system, we need to update CourseInfo, specifically its cap,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * and the Credits (creditsFulfilled) property."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULE_DONE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code Requirement}, replacing a module; {@code moduleToEdit} (which is under that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * the original requirement; {@code requirementToEdit}), by the module; {@code editedModule})"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Module moduleToEdit, Module editedModule) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Copy over all the old values of requirementToEdit"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Title title \u003d requirementToEdit.getTitle();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve marked a module in a requirement as done, we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled in the relevant Requirements, but since Requirement constructor already does"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * it for us, based on the module list passed in, we don\u0027t have to do anything here, just"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * propagate the old credits value."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Credits credits \u003d requirementToEdit.getCredits();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updates the existing requirement; requirementToEdit with the editedModule"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementToEdit.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Get the most update module list (now with the new module replaced)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modules \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Requirement(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * edited with {@code editModuleGradeDescriptor}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Just copy everything from the original {@code moduleToEdit} to our new {@code Module}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d moduleToEdit.getModuleCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title title \u003d moduleToEdit.getTitle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits credits \u003d moduleToEdit.getCredits();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * But for Semester, since it is an optional field, we copy its value over from the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * EditModuleDescriptor if any"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemester\u003e updatedSemester \u003d editModuleDescriptor.getSemester().orElse(moduleToEdit.getSemester());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * But for Grade, It\u0027s compulsory for Grade to be optionally edited/updated. This should have already been"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * guaranteed through the validations in the ModuleDoneCommandParser"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cGrade\u003e updatedGrade \u003d editModuleDescriptor.getGrade();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(title, moduleCode, credits, updatedSemester, updatedGrade);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleDoneCommand"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((ModuleDoneCommand) other).editModuleGradeDescriptor.equals(editModuleGradeDescriptor)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((ModuleDoneCommand) other).moduleCode.equals(moduleCode));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Stores the grade to edit the module with, and its used in the module done command to mark (edit)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * a module with a grade, and semester. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        private Optional\u003cSemester\u003e semester;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public EditModuleDescriptor() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return grade;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setGrade(Optional\u003cGrade\u003e grade) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public Optional\u003cOptional\u003cSemester\u003e\u003e getSemester() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setSemester(Optional\u003cSemester\u003e semester) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                \u0026\u0026 getSemester().equals(e.getSemester());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 233
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Edits the details (course name) of the existing module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleEditCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MODULE_EDIT_COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_EDIT_DETAILS \u003d MODULE_EDIT_COMMAND_WORD + \": Edits the details of the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"module identified by its module code. Existing module will be overwritten by the input values.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_EDIT_USAGE \u003d \"Parameter(s): MODULE_CODE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"MODULE_TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"e.g. \" + MODULE_EDIT_COMMAND_WORD + \" CS2040 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2040S \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_EDIT_HELP \u003d MESSAGE_MODULE_EDIT_DETAILS + MESSAGE_MODULE_EDIT_USAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_EDIT_SUCCESS \u003d \"This module has been edited successfully:\\n%1$s \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"MODULE_TITLE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the course book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode           of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleEditCommand(ModuleCode moduleCode, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireAllNonNull(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode \u003d moduleToEdit.getModuleCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // All fields can be optionally updated"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Title updatedTitle \u003d editModuleDescriptor.getTitle().orElse(moduleToEdit.getTitle());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Credits updatedCredits \u003d editModuleDescriptor.getCredits().orElse(moduleToEdit.getCredits());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemester\u003e updatedSemester \u003d editModuleDescriptor.getSemester().orElse(moduleToEdit.getSemester());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * (Note): Grade cannot be edited here (using the edit command), have to do so using the module done"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * command instead. Hence, we\u0027re just setting it to whatever value it originally was in the Model classes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cGrade\u003e updatedGrade \u003d moduleToEdit.getGrade();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Module(updatedTitle, updatedModuleCode, updatedCredits, updatedSemester, updatedGrade);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cModule\u003e moduleToEditOpt \u003d model.getModule(moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleToEditOpt.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_NON_EXISTENT, moduleCode));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleToEdit \u003d moduleToEditOpt.get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!moduleToEdit.isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementsToUpdate \u003d model.getRequirementsWithModule(editedModule);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Given that this module has been updated in the modules list, there are two things we need"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to do, first is to delete the copies of this modules existing in the modules list of all"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * requirements containing that module. And the second is that we need to update the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled of all requirements (which consists of that module)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * The code below does both of these, for each related Requirement."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementsToUpdate.stream()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .forEach(requirementToEdit -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Update the current Requirement in the model (coursebook) with this latest version."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Also, due to the module being edited, we need to update CourseInfo, specifically its creditsFulfilled"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * and cap property."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULE_EDIT_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code Requirement}, replacing a module; {@code moduleToEdit} (which is under that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * the original requirement; {@code requirementToEdit}), by the module; {@code editedModule})"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Module moduleToEdit, Module editedModule) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Copy over all the old values of requirementToEdit"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Title title \u003d requirementToEdit.getTitle();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve marked a module in a requirement as done, we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled in the relevant Requirements, but since Requirement constructor already does"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * it for us, based on the module list passed in, we don\u0027t have to do anything here, just"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * propagate the old credits value."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Credits credits \u003d requirementToEdit.getCredits();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updates the existing requirement; requirementToEdit with the editedModule"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementToEdit.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Get the most update module list (now with the new module replaced)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modules \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Requirement(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    //@@author waynewee"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!(other instanceof ModuleEditCommand)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand e \u003d (ModuleEditCommand) other;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCode.equals(e.moduleCode)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Credits credits;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Optional\u003cSemester\u003e semester;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public EditModuleDescriptor() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setCredits(toCopy.credits);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, moduleCode, credits, semester);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cCredits\u003e getCredits() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCredits(Credits credits) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cOptional\u003cSemester\u003e\u003e getSemester() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setSemester(Optional\u003cSemester\u003e semester) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getCredits().equals(e.getCredits())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getSemester().equals(e.getSemester());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 195,
      "yjskrs": 4,
      "-": 7,
      "nathanaelseen": 83
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/module/ModuleFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Filters the module list based on the following parameters:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * {@code semester, credits, grade}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Allows two logical operators: AND \u0026 OR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleFilterCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MODULE_FILTER_COMMAND_WORD \u003d MODULE_COMMAND_WORD + SPACE + \"filter\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_FILTER_USAGE \u003d \"Parameter(s): \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_GRADE + \"GRADE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[-o]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Example: \" + MODULE_FILTER_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_SEMESTER + \"Y1S1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_DISPLAYING_ALL \u003d \"No parameters detected. Displaying all modules.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + MESSAGE_MODULE_FILTER_USAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_MODULE_FILTER_SUCCESS \u003d \"Filtered modules based on the following: %s\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_NOTHING_FOUND \u003d \"No modules found!\\n\" + MESSAGE_MODULE_FILTER_USAGE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String AND \u003d \"AND\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String OR \u003d \"OR\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Optional\u003cSemester\u003e semester;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Optional\u003cCredits\u003e credits;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    //default operator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String operator \u003d AND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private boolean isRefresh \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Creates an ModuleAddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleFilterCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemester\u003e semester,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cCredits\u003e credits,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cGrade\u003e grade,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String operator"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * If isRefresh is true, module list will show all modules"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleFilterCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.isRefresh \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (isRefresh) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            model.updateFilteredModuleList(m -\u003e true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new CommandResult(MESSAGE_DISPLAYING_ALL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            model.updateFilteredModuleList(m -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                //must match all parameters"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (operator.equals(AND)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    return checkCreditsMatch(m)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u0026\u0026 checkGradesMatch(m)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u0026\u0026 checkSemesterMatch(m);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    return checkCreditsMatch(m)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        || checkGradesMatch(m)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        || checkSemesterMatch(m);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        //if nothing found"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (model.getFilteredModuleList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new CommandResult(MESSAGE_NOTHING_FOUND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String successMessage \u003d getSuccessMessage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MODULE_FILTER_SUCCESS, successMessage));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Creates the success string displaying parameters given"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String getSuccessMessage() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArrayList\u003cString\u003e filters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        semester.ifPresent(s -\u003e filters.add(s.value));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        credits.ifPresent(c -\u003e filters.add(c.value));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        grade.ifPresent(g -\u003e filters.add(g.value));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String filter : filters) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            successMessage.append(filter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            int index \u003d filters.indexOf(filter);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (index \u003c filters.size() - 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                successMessage.append(\" \").append(operator).append(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return successMessage.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Checks if semester parameter matches semester in module"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * If parameter does not exist,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns true if operator \u003d\u003d AND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns false otherwise"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private boolean checkSemesterMatch(Module m) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (semester.isPresent()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            //if both are present, then we can do the comparison"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (m.getSemester().isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return semester.get().equals(m.getSemester().get());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return operator.equals(AND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Checks if credits parameter matches credits in module"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * If parameter does not exist,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns true if operator \u003d\u003d AND,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns false otherwise"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private boolean checkCreditsMatch(Module m) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return credits.map(value -\u003e value.equals(m.getCredits())).orElse(operator.equals(AND));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Checks if grades parameter matches grades in module"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * If parameter does not exist,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns true if operator \u003d\u003d AND,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * returns false otherwise"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private boolean checkGradesMatch(Module m) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (grade.isPresent()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            //if both are present, then we can do the comparison"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (m.getGrade().isPresent()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return grade.get().equals(m.getGrade().get());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return operator.equals(AND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 194,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Adds a requirement to the course."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementAddCommand extends RequirementCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQUIREMENT_ADD_COMMAND_WORD \u003d REQUIREMENT_COMMAND_WORD + SPACE + \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DETAILS \u003d REQUIREMENT_ADD_COMMAND_WORD + \": Adds a requirement.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameter(s): \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_TITLE + \"REQUIREMENT_TITLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_CREDITS + \"CREDITS_TO_FULFIL\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"e.g. \" + REQUIREMENT_ADD_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_TITLE + \"Unrestricted Electives \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_CREDITS + \"24\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ADD_HELP \u003d MESSAGE_DETAILS + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ADD_SUCCESS \u003d \"Got it! I have added this requirement for you:\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_NOT_ADDED \u003d \"Added requirement must be provided with arguments \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_TITLE + \"TITLE \" + PREFIX_CREDITS + \"CREDITS \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_DUPLICATE \u003d \"This requirement already exists in the course book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Requirement requirementToAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementAddCommand(Requirement requirementToAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirementToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementToAdd \u003d requirementToAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // if the code of the requirement has already been used"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (model.hasRequirement(requirementToAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(MESSAGE_REQUIREMENT_DUPLICATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode codeWithoutNumber \u003d requirementToAdd.getRequirementCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode codeWithNumber \u003d new RequirementCode(generateRequirementCode(model, codeWithoutNumber));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new Requirement(codeWithNumber,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requirementToAdd.getTitle(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requirementToAdd.getCredits());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.addRequirement(requirement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve added a new Requirement to the system, we need to update CourseInfo, specifically its"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsRequired property."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseToEdit, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REQUIREMENT_ADD_SUCCESS, requirement));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Generates the requirement code based on the number of previous requirements that hold the same"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * alphabetical part of the code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private String generateRequirementCode(Model model, RequirementCode codeWithoutNumber) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d model.getRequirementList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int lastUsedNumber \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Requirement requirement : requirementList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            RequirementCode requirementCode \u003d requirement.getRequirementCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (requirementCode.hasSameAlphabets(codeWithoutNumber)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                int requirementNumber \u003d requirementCode.getNumber();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                if (lastUsedNumber \u003c\u003d requirementNumber) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                    lastUsedNumber \u003d requirementNumber + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return codeWithoutNumber.getAlphabets() + lastUsedNumber;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof RequirementAddCommand"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 ((RequirementAddCommand) other).requirementToAdd.equals(requirementToAdd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 91,
      "nathanaelseen": 27
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementAssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Assigns modules under a particular requirement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementAssignCommand extends RequirementCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String REQUIREMENT_ASSIGN_COMMAND_WORD \u003d REQUIREMENT_COMMAND_WORD + SPACE + \"assign\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ASSIGN_DETAILS \u003d REQUIREMENT_ASSIGN_COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \": Assigns the requirement identified with modules \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"by its requirement code. Existing requirement will be overwritten by the input values\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ASSIGN_USAGE \u003d \"Parameter(s): REQUIREMENT_CODE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE ...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"e.g. \" + REQUIREMENT_ASSIGN_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"UE1 \" + PREFIX_NAME + \"CS2030\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ASSIGN_HELP \u003d MESSAGE_REQUIREMENT_ASSIGN_DETAILS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + MESSAGE_REQUIREMENT_ASSIGN_USAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_NO_MODULES \u003d \"There must be at least one modules assigned.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULES_NON_EXISTENT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"Some modules do not exist in the system:\\n%1$s\\nPlease try other modules instead.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_ASSIGN_SUCCESS \u003d \"Nice! I have successfully assigned the following \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"module(s) under requirement (%1$s):\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"%2$s\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Some modules have already been assigned under this requirement (%1$s):\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"%3$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String MODULE_CODE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private RequirementCode requirementCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private List\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementAssignCommand(RequirementCode requirementCode, List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.moduleCodes \u003d moduleCodes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Retrieve the requirement in question that we want to assign modules under.."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First check if the requirement exists in the course book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementToEdit \u003d model.getRequirement(requirementCode)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .orElseThrow(() -\u003e new CommandException(MESSAGE_REQUIREMENT_NON_EXISTENT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final List\u003cModule\u003e modulesToAssign \u003d model.getModules(moduleCodes);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First check, if all modules (codes) are existent modules in the course book (they should all be)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (modulesToAssign.size() \u003c moduleCodes.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            List\u003cModuleCode\u003e moduleCodesToAssign \u003d modulesToAssign.stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .map(module -\u003e module.getModuleCode())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            moduleCodes.removeIf(moduleCode -\u003e moduleCodesToAssign.contains(moduleCode));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String formattedModuleCodes \u003d getFormattedModuleCodesStr(moduleCodes, MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULES_NON_EXISTENT, formattedModuleCodes));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now filter out, modules which are already in the requirement, they should not be re-added again"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modulesAlreadyAssigned \u003d new ArrayList\u003cModule\u003e(modulesToAssign);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // remove modules that are already assigned, to get modules to newly assign"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modulesToAssign.removeIf(module -\u003e requirementToEdit.hasModule(module));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // remove modules that are newly assigned, to get modules already assigned"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modulesAlreadyAssigned.removeIf(module -\u003e modulesToAssign.contains(module));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally if everything alright, we can actually then assign/add the specified modules under this requirement"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, modulesToAssign);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve assigned some modules under a particular Requirement to the system, we need to update"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * CourseInfo, specifically its creditsFulfilled property."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesToAssign \u003d getFormattedModulesStr(modulesToAssign, MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesAlreadyAssigned \u003d getFormattedModulesStr(modulesAlreadyAssigned, MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String.format(MESSAGE_REQUIREMENT_ASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                editedRequirement.getRequirementCode(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesToAssign,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesAlreadyAssigned));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code Requirement} with modules assigned (specified by;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code modulesToAssign}) to the original requirement; {@code requirementToEdit}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit, List\u003cModule\u003e modulesToAssign) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally if everything alright, we can actually then assign/add the specified modules under this requirement"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementToEdit.addModules(modulesToAssign);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First, we copy over all the old values of requirementToEdit"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title title \u003d requirementToEdit.getTitle();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve added this list of new modules to requirement, we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled, but since Requirement constructor already does it for us, based"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * on the module list passed in, we don\u0027t have to do anything here, just propage"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the old credits value."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Credits credits \u003d requirementToEdit.getCredits();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Get the most update module list (now with the new modules assigned/added)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modules \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Requirement(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof RequirementAssignCommand"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((RequirementAssignCommand) other).requirementCode.equals(requirementCode)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((RequirementAssignCommand) other).moduleCodes.equals(moduleCodes));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "teriaiw": 2,
      "nathanaelseen": 164
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A generic Requirement command class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public abstract class RequirementCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQUIREMENT_COMMAND_WORD \u003d \"requirement\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_NON_EXISTENT \u003d \"The requirement code provided is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a formatted string of module codes from a given list of module codes; {@code moduleCodes},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * delimited by {@code delimiter}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static String getFormattedModuleCodesStr(List\u003cModuleCode\u003e moduleCodes, String delimiter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCodes.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .forEach(moduleCode -\u003e result.append(moduleCode.toString() + delimiter));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a formatted string of module codes from a given list of modules; {@code modules},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * delimited by {@code delimiter}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static String getFormattedModulesStr(List\u003cModule\u003e modules, String delimiter) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modules.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .forEach(module -\u003e result.append(module.getModuleCode().toString() + delimiter));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 10,
      "nathanaelseen": 34
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Deletes an existing requirement from the course book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementDeleteCommand extends RequirementCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQUIREMENT_DELETE_COMMAND_WORD \u003d REQUIREMENT_COMMAND_WORD + SPACE + \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DETAILS \u003d REQUIREMENT_DELETE_COMMAND_WORD + \": Deletes the requirement \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"identified by its requirement code.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameter(s): REQUIREMENT_CODE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"e.g. \" + REQUIREMENT_DELETE_COMMAND_WORD + \" UE0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_DELETE_HELP \u003d MESSAGE_DETAILS + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_DELETE_SUCCESS \u003d \"Got it! This requirement has been \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            + \"deleted successfully:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final RequirementCode requirementCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementDeleteCommand(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirementCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cRequirement\u003e requirements \u003d model.getRequirementList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check if requirement exists in course book"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cRequirement\u003e requirementToDelete \u003d requirements.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .filter(requirement -\u003e requirement.getRequirementCode().equals(requirementCode)).findFirst();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (requirementToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement toDelete \u003d requirementToDelete.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.deleteRequirement(toDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve deleted a new Requirement in the system, we need to update CourseInfo, specifically its"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsRequired and creditsFulfilled property."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String.format(MESSAGE_REQUIREMENT_DELETE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof RequirementDeleteCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 ((RequirementDeleteCommand) other).requirementCode.equals(requirementCode));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 66,
      "nathanaelseen": 26
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Modifies an existing requirement in the course book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementEditCommand extends RequirementCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQUIREMENT_EDIT_COMMAND_WORD \u003d REQUIREMENT_COMMAND_WORD + SPACE + \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DETAILS \u003d REQUIREMENT_EDIT_COMMAND_WORD + \": Edits the requirement identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"by its requirement code. Existing requirement will be overwritten by the input values.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Parameter(s): REQUIREMENT_CODE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"REQUIREMENT_TITLE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"e.g. \" + REQUIREMENT_EDIT_COMMAND_WORD + \" UE0 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + PREFIX_TITLE + \"Unrestricted Electives\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_EDIT_HELP \u003d MESSAGE_DETAILS + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_EDIT_SUCCESS \u003d \"Got it! This requirement has been \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"edited successfully:\\n%1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"REQUIREMENT_TITLE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final RequirementCode requirementCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final EditRequirementDescriptor requirementDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementEditCommand(RequirementCode requirementCode,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                  EditRequirementDescriptor requirementDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(requirementCode, requirementDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementDescriptor \u003d new EditRequirementDescriptor(requirementDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Creates and returns a {@code Requirement} with the details of {@code requirementToEdit}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * edited with {@code editRequirementDescriptor}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                       EditRequirementDescriptor editRequirementDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assert requirementToEdit !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assert editRequirementDescriptor !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title updatedTitle \u003d editRequirementDescriptor.getTitle().orElse(requirementToEdit.getTitle());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits updatedCredits \u003d editRequirementDescriptor.getCredits().orElse(requirementToEdit.getCredits());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Requirement(requirementCode, updatedTitle, updatedCredits, moduleList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirementToEdit \u003d model.getRequirement(requirementCode)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .orElseThrow(() -\u003e new CommandException(MESSAGE_REQUIREMENT_NON_EXISTENT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, requirementDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // If none of the parameters have been modified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (editedRequirement.equals(requirementToEdit)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(MESSAGE_REQUIREMENT_NOT_EDITED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        //model.updateRequirementList(Model.PREDICATE_SHOW_ALL_REQUIREMENTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //@@author nathanaelseen"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve edited a new Requirement in the system, we need to update CourseInfo, specifically its"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsRequired property."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, editedRequirement));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof RequirementEditCommand"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 ((RequirementEditCommand) other).requirementDescriptor.equals(requirementDescriptor)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 ((RequirementEditCommand) other).requirementCode.equals(requirementCode));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Stores the details to edit the requirement with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * corresponding field value of the requirement."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static class EditRequirementDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private Credits credits;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public EditRequirementDescriptor() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * Makes a copy of a EditRequirementDescriptor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public EditRequirementDescriptor(EditRequirementDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(toCopy);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            setCredits(toCopy.credits);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, credits);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Optional\u003cCredits\u003e getCredits() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setCredits(Credits credits) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (!(other instanceof EditRequirementDescriptor)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            EditRequirementDescriptor e \u003d (EditRequirementDescriptor) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                || (getCredits().equals(e.getCredits())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                \u0026\u0026 getTitle().equals(e.getTitle()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 156,
      "nathanaelseen": 27
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/requirement/RequirementUnassignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Unassigns modules under a particular requirement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementUnassignCommand extends RequirementCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String REQUIREMENT_UNASSIGN_COMMAND_WORD \u003d REQUIREMENT_COMMAND_WORD + SPACE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"unassign\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_UNASSIGN_DETAILS \u003d REQUIREMENT_UNASSIGN_COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \": Unassigns the requirement identified with modules \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"by its requirement code. Existing requirement will be overwritten by the input values\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_UNASSIGN_USAGE \u003d \"Parameter(s): REQUIREMENT_CODE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE_CODE...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"e.g. \" + REQUIREMENT_UNASSIGN_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"UE1 \" + PREFIX_NAME + \"CS2030\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_UNASSIGN_HELP \u003d MESSAGE_REQUIREMENT_UNASSIGN_DETAILS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + MESSAGE_REQUIREMENT_UNASSIGN_USAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_NO_MODULES \u003d \"There must be at least one modules unassigned.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULES_NON_EXISTENT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"Some modules do not exist in the system:\\n%1$s\\nPlease try other modules instead.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_MODULES_NON_EXISTENT_IN_REQUIREMENT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"Some modules do not exist in the requirement (%1$s):\\n%2$s\\nPlease try other modules.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_UNASSIGN_SUCCESS \u003d \"I have successfully unassigned the following \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"module(s) under requirement (%1$s):\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"%2$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String MODULE_CODE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private RequirementCode requirementCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private List\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementUnassignCommand(RequirementCode requirementCode, List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.moduleCodes \u003d moduleCodes;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Retrieve the requirement in question that we want to unassign modules under.."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First check if the requirement exists in the course book"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementToEdit \u003d model.getRequirement(requirementCode)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .orElseThrow(() -\u003e new CommandException(MESSAGE_REQUIREMENT_NON_EXISTENT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final List\u003cModule\u003e modulesToUnassign \u003d model.getModules(moduleCodes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First check, if all modules (codes) are existent modules in the course book (they should all be)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (modulesToUnassign.size() \u003c moduleCodes.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            List\u003cModuleCode\u003e moduleCodesToUnassign \u003d modulesToUnassign.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .map(module -\u003e module.getModuleCode())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            moduleCodes.removeIf(moduleCode -\u003e moduleCodesToUnassign.contains(moduleCode));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String formattedModuleCodes \u003d getFormattedModuleCodesStr(moduleCodes, MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULES_NON_EXISTENT, formattedModuleCodes));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now check, if all modules specified are existent in the requirement (they should be)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!requirementToEdit.hasModules(modulesToUnassign)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            modulesToUnassign.removeIf(module -\u003e requirementToEdit.hasModule(module));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String formattedNonExistentModulesInReq \u003d getFormattedModulesStr(modulesToUnassign,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULES_NON_EXISTENT_IN_REQUIREMENT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                        requirementToEdit.getRequirementCode(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                        formattedNonExistentModulesInReq));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Finally if everything alright, we can actually then unassign/\u0027delete\u0027 the specified modules under"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * this requirement"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirement \u003d createEditedRequirement(requirementToEdit, modulesToUnassign);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setRequirement(requirementToEdit, editedRequirement);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now that we\u0027ve assigned some modules under a particular Requirement to the system, we need to update"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * CourseInfo, specifically its creditsFulfilled property."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, in the method below, we just recompute everything (field in course info)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A call to the retrieveLatestCourseInfo(..) helps to recompute latest course info,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on information provided through Model (coursebook)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseInfoToEdit, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Updating the model with the latest course info"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesToUnassign \u003d getFormattedModulesStr(modulesToUnassign, MODULE_CODE_DELIMITER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String.format(MESSAGE_REQUIREMENT_UNASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                editedRequirement.getRequirementCode(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesToUnassign));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a new {@code Requirement} with modules unassigned (specified by;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code modulesToUnassign}) to the original requirement; {@code requirementToEdit}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Requirement createEditedRequirement(Requirement requirementToEdit, List\u003cModule\u003e modulesToUnassign) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Finally if everything alright, we can actually then unassign/\u0027delete\u0027 the specified modules under"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * this requirement"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementToEdit.removeModules(modulesToUnassign);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // First, we copy over all the old values of requirementToEdit"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d requirementToEdit.getRequirementCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title title \u003d requirementToEdit.getTitle();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now given that we\u0027ve added this list of new modules to requirement, we\u0027ve to update (recompute)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * creditsFulfilled, but since Requirement constructor already does it for us, based"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * on the module list passed in, we don\u0027t have to do anything here, just propage"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the old credits value."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        igrad.model.requirement.Credits credits \u003d requirementToEdit.getCredits();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Get the most update module list (now with the new modules unassigned/\u0027deleted\u0027)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e modules \u003d requirementToEdit.getModuleList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create a new Requirement with all the updated information (details)."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Requirement(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof RequirementUnassignCommand"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((RequirementUnassignCommand) other).requirementCode.equals(requirementCode)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 ((RequirementUnassignCommand) other).moduleCodes.equals(moduleCodes));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 173
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a multimap for storing prefixes mapped with their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Each key may be associated with multiple argument values. Values for a given key are stored in a list,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * where the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate arguments values, i.e. the same"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Prefix PREFIX_PREAMBLE \u003d new Prefix(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Prefixes mapped to their respective arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Puts the prefix-argument key-value pair into the map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * If the map already contains a mapping for the prefix, the new argument is appended to the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * of existing ones."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefix   Prefix key."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argValue Argument value associated with the prefix."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the last instance of {@code prefix} key, if any. Else returns an {@code Optional.empty()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefix Prefix key."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return Argument value associated with the prefix, if any."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns all instances of {@code prefix} key."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Modifying the returned list will not affect the storage of the key-value pairs in the map."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefix Prefix key."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return List of argument values associated with the prefix."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the preamble (text before the first valid prefix)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Leading or trailing whitespaces are trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if values of all key-value pairs in the {@code argMultimap} field (of this class),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * is empty. Also, if {@code checkPreamble} parameter is true, this method checks if the preambles"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * are empty, else any preamble is ignored."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isEmpty(boolean checkPreamble) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (checkPreamble) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * For this case, where we don\u0027t ignore preambles:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * If our hash-map has less than or equals to 1 key, that key (if any)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * is definitely a preamble (not a tag). Now, we check that preamble and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * if that preamble happens to be the empty string (\"\"), then we know that there"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * is indeed no \u0027preamble\u0027, and hence return true."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return argMultimap.size() \u003c\u003d 1 \u0026\u0026 getPreamble().isEmpty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * For this case, where we ignore preambles:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * If our hash-map has less than or equals to 1 key, that key (if any)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * is definitely a preamble (not a tag). But since we\u0027re ignoring preambles"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * we return true when the size \u003c\u003d 1."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return argMultimap.size() \u003c\u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 25,
      "-": 44,
      "nathanaelseen": 30
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Utility class for tokenizing arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * e.g. {@code preamble text n/CS1010 t/Programming Methodology u/4 s/} where prefixs are {@code n/ t/ u/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * 1. An argument\u0027s value can be an empty string in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated, e.g. {@code n/CS1010 n/CS1231 n/CS3244}.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * to their respective argument values. Only the given prefixes will be recognized in the arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString Arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString Arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Finds all positions of a single prefix in the given arguments string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString Arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefix     Prefix to find."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * from {@code index}. An occurrence is valid if there is a whitespace before {@code prefix}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * E.g. if {@code argString} \u003d \"n/AB1234s/Y1S2\", {@code prefix} \u003d \"s/\" and {@code index} \u003d 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"s/\" with whitespace before it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * However, if {@code argsString} \u003d \"n/AB1234 s/Y1S2\", {@code prefix} \u003d \"s/\" and {@code index} \u003d 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * this method returns 9."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Fails silently when provided with an invalid {@code index} (i.e. index less than 0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * or more than the size of {@code argsString}) by returning -1."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString Arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefix     Prefix to find."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param startIndex Starting index to find {@code prefix} from."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return Zero-based prefix position."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int startIndex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (startIndex \u003d\u003d -1 || startIndex \u003e\u003d argsString.length()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, startIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a boolean variable specifying if the specified flag is present."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param argsString e.g. \"add n/CS2103T -a\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param flag       the substring \"-a\" in the argsString."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return True if the flag is present, false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isFlagPresent(String argsString, String flag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(flag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(argsString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Strips all flags from the argument string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Flags should only be specified at the end of {@code argString}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param argsString e.g. \"module add n/CS2103T -a\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return {@code argsString} with flags stripped."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static String removeFlags(String argsString) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int firstFlagIndex \u003d startIndexOfPattern(\"-[a-z]+\", argsString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (firstFlagIndex \u003c 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return argsString;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return argsString.substring(0, firstFlagIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the start index of a given pattern; {@code regex} found in the string; {@code text}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns -1 if the pattern is not found in the string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static int startIndexOfPattern(String regex, String text) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(text);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return matcher.start();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Extracts prefixes and their respective argument values and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * object that maps the extracted prefixes to their arguments. Prefixes are extracted based on"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString      Arguments string in the format: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes present in {@code argsString}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Sort by start position in ascending order"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        prefixPositions.sort(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the trimmed value of the argument in {@code argsString} specified by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code currentPrefixPosition}. The end position for the value is determined"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param argsString            Arguments string."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param currentPrefixPosition Prefix position for the current argument."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param nextPrefixPosition    Prefix position for the next argument."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @return Trimmed argument value."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Get prefix length by calling getPrefix on PrefixPosition and getPrefix on Prefix"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int prefixLength \u003d currentPrefixPosition.getPrefix().getPrefix().length();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int prefixStartPosition \u003d currentPrefixPosition.getStartPosition();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Calculate starting position of the value of the argument"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int valuePosition \u003d prefixStartPosition + prefixLength;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Extract the value of the argument from argString"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String value \u003d argsString.substring(valuePosition, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Represents a prefix\u0027s position (or otherwise known as index) in an arguments string."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private final int startPosition;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 25,
      "yjskrs": 78,
      "-": 106,
      "nathanaelseen": 18
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Prefix PREFIX_CAP \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Flag FLAG_AUTO \u003d new Flag(\"-a\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final Flag FLAG_OPERATOR_OR \u003d new Flag(\"-o\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 19,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/CourseBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COURSE_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_MODULE_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_REQUIREMENT_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.FLAG_AUTO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAchieveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleFilterCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAssignCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementDeleteCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementEditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementUnassignCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.course.CourseAchieveCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.course.CourseAddCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.course.CourseEditCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.module.ModuleAddAutoCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.module.ModuleAddCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.module.ModuleDeleteCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.module.ModuleDoneCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.module.ModuleEditCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.module.ModuleFilterCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.requirement.RequirementAddCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.requirement.RequirementAssignCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.requirement.RequirementDeleteCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.requirement.RequirementEditCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.requirement.RequirementUnassignCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookParser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Used for initial separation of command words and args."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"(?\u003ccommandWord\u003e[a-z]+(\\\\s[a-z]{3,})?)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses avatar name entered by user into {@code SelectAvatarCommand} for execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param avatarName full user input string (consisting the avatarName)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public SelectAvatarCommand parseAvatarName(String avatarName) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommandParser selectAvatarCommandParser \u003d new SelectAvatarCommandParser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommand selectAvatarCommand \u003d selectAvatarCommandParser.parse(avatarName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return selectAvatarCommand;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final String argumentsWithFlags \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final String arguments \u003d ArgumentTokenizer.removeFlags(argumentsWithFlags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * If there is only one command word provided instead of the supposed two-word commands, flag an error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * to feedback to the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case CourseCommand.COURSE_COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COURSE_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case RequirementCommand.REQUIREMENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_REQUIREMENT_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case ModuleCommand.MODULE_COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_MODULE_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * Process the command if it matches its command word."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseAddCommand.COURSE_ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new CourseAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseEditCommand.COURSE_EDIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new CourseEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseDeleteCommand.COURSE_DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new CourseDeleteCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseAchieveCommand.COURSE_ACHIEVE_COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new CourseAchieveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case RequirementAddCommand.REQUIREMENT_ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new RequirementAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case RequirementEditCommand.REQUIREMENT_EDIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new RequirementEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        case RequirementDeleteCommand.REQUIREMENT_DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new RequirementDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case RequirementAssignCommand.REQUIREMENT_ASSIGN_COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new RequirementAssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case RequirementUnassignCommand.REQUIREMENT_UNASSIGN_COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new RequirementUnassignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleAddCommand.MODULE_ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (ArgumentTokenizer.isFlagPresent(argumentsWithFlags, FLAG_AUTO.getFlag())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return new ModuleAddAutoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleEditCommand.MODULE_EDIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleDeleteCommand.MODULE_DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleDoneCommand.MODULE_DONE_COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleDoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        case ModuleFilterCommand.MODULE_FILTER_COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new ModuleFilterCommandParser().parse(argumentsWithFlags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 22,
      "teriaiw": 7,
      "yjskrs": 41,
      "-": 37,
      "nathanaelseen": 73
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Flag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A flag that, if present, specifies the system to include the option."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * E.g. \u0027-a\u0027 in \u0027module add n/CS2103T -a\u0027."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return otherFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "teriaiw": 39,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    T parse(String userInput) throws ParseException, IOException, ServiceException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 3,
      "-": 12,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_NOT_SPECIFIED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.module.ModuleCommandParser.parseModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Function\u003cString, Boolean\u003e REQUIREMENT_CODE_SPECIFIER_RULE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode::isValidRequirementCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Function\u003cString, Boolean\u003e MODULE_MODULE_CODE_SPECIFIER_RULE \u003d ModuleCode::isValidModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a generic {@code String specifier} into a {@code Specifier}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * The functional inteface {@code rule} should return true if valid and false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Also, {@code messageError} is the error message to show when a {@code ParserException} is thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code specifier} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Specifier parseSpecifier(String specifier, Function\u003cString, Boolean\u003e rule, String messageError)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(specifier);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedSpecifier \u003d specifier.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // We know that in any case, a specifier can never be empty (empty string \"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (trimmedSpecifier.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_SPECIFIER_NOT_SPECIFIED, messageError));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Now apply other specifier specific semantic rule as according to {@code rule} parameter, and see if"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * there is any other violation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!rule.apply(trimmedSpecifier)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_SPECIFIER_INVALID, messageError));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Specifier(trimmedSpecifier);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String name} into an {@code Avatar}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code avatarName} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Avatar parseAvatarName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Avatar.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Avatar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Avatar(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code List\u003cModuleCode\u003e}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static List\u003cModuleCode\u003e parseModuleCodes(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final List\u003cModuleCode\u003e moduleCodesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (String moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            moduleCodesList.add(parseModuleCode(moduleCode));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return moduleCodesList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Optional\u003cString\u003e value \u003d argumentMultimap.getValue(prefix);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return value.isPresent() \u0026\u0026 !value.get().isEmpty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 15,
      "-": 9,
      "nathanaelseen": 81
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * E.g. \u0027n/\u0027 in \u0027module add n/CS1101S t/Programming Methodology I u/4\u0027."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 39,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/SelectAvatarCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new SelectAvatarCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class SelectAvatarCommandParser implements Parser\u003cSelectAvatarCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} representing the Avatar name in the context of the SelectAvatarCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an SelectAvatarCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public SelectAvatarCommand parse(String name) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Avatar avatar \u003d ParserUtil.parseAvatarName(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new SelectAvatarCommand(avatar);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "nathanaelseen": 19
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Specifier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Represents a command specifier."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A command specifier is the preamble string that occurs before any prefix tokens"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * and occurs after the command word(s)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A specifier is only used for {@code edit} commands and {@code delete} commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class Specifier {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final String specifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Specifier(String specifier) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(specifier);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.specifier \u003d specifier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return specifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return getValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return specifier.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return obj \u003d\u003d this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (obj instanceof Specifier"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 specifier.equals(((Specifier) obj).specifier));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 41,
      "yjskrs": 2
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/course/CourseAchieveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseAchieveCommand.MESSAGE_COURSE_ACHIEVE_HELP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.course.CourseCommandParser.parseCap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAchieveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Parses input arguments and creates a new ModuleDeleteCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseAchieveCommandParser implements Parser\u003cCourseAchieveCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleDeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * and returns a ModuleDeleteCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CourseAchieveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CAP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                MESSAGE_COURSE_ACHIEVE_HELP));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAP).isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    MESSAGE_COURSE_ACHIEVE_HELP));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d parseCap(argMultimap.getValue(PREFIX_CAP).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CourseAchieveCommand(cap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 50,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/course/CourseAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseAddCommand.MESSAGE_COURSE_ADD_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseAddCommand.MESSAGE_COURSE_NOT_ADDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new CourseAddCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommandParser extends CourseCommandParser implements Parser\u003cCourseAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CourseAddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an CourseAddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027course add\u0027, and nothing else (except preambles), show"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(false)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_COURSE_ADD_HELP));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SEMESTER)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_COURSE_NOT_ADDED));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Parsing and setting the name of our new course"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e name \u003d parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A newly created course has no (graded) modules added to it yet, thus, it does not make sense to set any"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * cap, even 0, so we\u0027re setting it to optional here."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Similarly,a newly created course has no requirements tagged to it and hence it does not make sense to talk"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * about credits (required or fulfilled), hence we set it to Optional here"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A newly created course has no semesters added to it yet as different students have different length of study."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Hence, it does not make sense to set any semester, so it is set to Optional."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Optional\u003cSemesters\u003e semesters \u003d Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d parseSemesters(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseAddCommand(courseInfo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 12,
      "nathanaelseen": 69
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/course/CourseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic course command parser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cName\u003e parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Name(trimmedName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a (@code String semesters} into a (@code Semesters)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code semesters} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cSemesters\u003e parseSemesters(String semesters) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(semesters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedSemesters \u003d semesters.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Semesters.isValidSemesters(trimmedSemesters)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Semesters.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Semesters(trimmedSemesters));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a (@code String cap} into a (@code Cap)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code cap} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cCap\u003e parseCap(String cap) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(cap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedCap \u003d cap.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Cap.isValidCap(trimmedCap)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Cap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Cap(trimmedCap));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 3,
      "nathanaelseen": 59
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/course/CourseEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseEditCommand.MESSAGE_COURSE_EDIT_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand.EditCourseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Parses input arguments and creates a new CourseEditCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseEditCommandParser extends CourseCommandParser implements Parser\u003cCourseEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Parses the given string of arguments {@code args} in the context of the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * CourseEditCommand and returns a CourseEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CourseEditCommand parse(String args) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * Course is special, unlike Module and Requirement, it does not need a specifier, because there"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * is only one course in the system. Hence the command syntax for course edit, goes like this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * course edit n/NEW_COURSE_NAME."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         * Hence we don\u0027t have to parse for a specifier as there\u0027s none."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_EDIT_HELP));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        EditCourseDescriptor editCourseDescriptor \u003d parseEditedCourse(argMultimap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CourseEditCommand(editCourseDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Parses grade and/or semesters from {@code argMultimap} into {@code EditCourseDescriptor}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private EditCourseDescriptor parseEditedCourse(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        EditCourseDescriptor editCourseDescriptor \u003d new EditCourseDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cString\u003e nameString \u003d argMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cString\u003e semestersString \u003d argMultimap.getValue(PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // If neither name nor semesters is specified, we flag an error to the user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if ((nameString.isEmpty() || nameString.get().isEmpty())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 (semestersString.isEmpty() || semestersString.get().isEmpty())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_EDIT_HELP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // If name is specified, add it into our editCourseDescriptor"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (nameString.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            Optional\u003cName\u003e name \u003d parseName(nameString.get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            editCourseDescriptor.setName(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // If semesters is specified, add it into our editCourseDescriptor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (semestersString.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            Optional\u003cSemesters\u003e semesters \u003d parseSemesters(semestersString.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            editCourseDescriptor.setSemesters(semesters);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return editCourseDescriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 77,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleAddAutoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleAddAutoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleAddAutoCommandParser extends ModuleCommandParser implements Parser\u003cModuleAddAutoCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddAutoCommand parse(String args) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddAutoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e moduleCodes \u003d argMultimap.getAllValues((PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleAddAutoCommand(moduleCodes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 35,
      "nathanaelseen": 19
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleAddCommand.MESSAGE_MODULE_ADD_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleAddCommand.MESSAGE_MODULE_NOT_ADDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddCommandParser extends ModuleCommandParser implements Parser\u003cModuleAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MODULE_CODE, PREFIX_CREDITS, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027module add\u0027, and nothing else (except preambles), show"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(false)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_MODULE_ADD_HELP));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * module add n/MODULE_CODE t/TITLE u/MCs [m/MEMO_NOTES] [s/SEMESTER] [x/TAGS]..."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * We have that; MODULE_CODE, TITLE, MCs, are the compulsory fields, so we\u0027re just validating for its"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * presence in the below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_TITLE, PREFIX_CREDITS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_MODULE_NOT_ADDED));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title title \u003d parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits credits \u003d parseCredits(argMultimap.getValue(PREFIX_CREDITS).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemester\u003e semester \u003d argMultimap.getValue(PREFIX_SEMESTER).isPresent()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Grade is not allowed to be here, as we have the module done command for that, hence"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * we\u0027re initialising it to Optional.empty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cGrade\u003e grade \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Module module \u003d new Module(title, moduleCode, credits, semester, grade);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleAddCommand(module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "teriaiw": 1,
      "yjskrs": 3,
      "-": 19,
      "nathanaelseen": 53
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic module command parser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String upperCaseModuleCode \u003d trimmedModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleCode(upperCaseModuleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String credits} into an {@code Credits}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Credits parseCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Credits.isValidCredits(trimmedCredits)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Credits(trimmedCredits);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String semester} into an {@code Semester}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cSemester\u003e parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Semester.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Semester(trimmedSemester));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cGrade\u003e parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Grade(trimmedGrade));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "nathanaelseen": 91
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.module.ModuleDeleteCommand.MESSAGE_MODULE_DELETE_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleDeleteCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDeleteCommandParser implements Parser\u003cModuleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleDeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns a ModuleDeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    MESSAGE_MODULE_DELETE_HELP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(args,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.MODULE_MODULE_CODE_SPECIFIER_RULE, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(specifier.getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleDeleteCommand(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 5,
      "teriaiw": 13,
      "yjskrs": 1,
      "-": 11,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleDoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.MESSAGE_MODULE_DONE_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.MESSAGE_MODULE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleDoneCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDoneCommandParser extends ModuleCommandParser implements Parser\u003cModuleDoneCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleDoneCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleDoneCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleDoneCommand parse(String args) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRADE, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027module done\u0027, and nothing else, show"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_MODULE_DONE_HELP));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d parseModuleCodeSpecifier(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d parseEditedModule(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleDoneCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses specifier from {@code argMultimap} into {@code ModuleCode}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleCode parseModuleCodeSpecifier(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.MODULE_MODULE_CODE_SPECIFIER_RULE, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleCode(specifier.getValue());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses grade and/or semesters from {@code argMultimap} into {@code EditRequirementDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private EditModuleDescriptor parseEditedModule(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cString\u003e gradeString \u003d argMultimap.getValue(PREFIX_GRADE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cString\u003e semesterString \u003d argMultimap.getValue(PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Grade is mandatory for marking a module as done"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (gradeString.isEmpty() || gradeString.get().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_NOT_EDITED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cGrade\u003e grade \u003d parseGrade(gradeString.get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editModuleDescriptor.setGrade(grade);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // If semester is specified, add it into our editModuleDescriptor"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (semesterString.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Optional\u003cSemester\u003e semester \u003d parseSemester(semesterString.get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setSemester(semester);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return editModuleDescriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 99
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.MESSAGE_MODULE_EDIT_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.MESSAGE_MODULE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleEditCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleEditCommandParser extends ModuleCommandParser implements Parser\u003cModuleEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleEditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleEditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MODULE_CODE, PREFIX_CREDITS, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027module edit\u0027, and nothing else, show"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_MODULE_EDIT_HELP));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new ModuleEditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.MODULE_MODULE_CODE_SPECIFIER_RULE, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(specifier.getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setModuleCode(parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setTitle(parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setCredits(parseCredits(argMultimap.getValue(PREFIX_CREDITS).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setSemester(parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleEditCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 2,
      "-": 23,
      "nathanaelseen": 48
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleFilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.module.ModuleFilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Parses input arguments and creates a new ModuleFilterCommandParser object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleFilterCommandParser extends ModuleCommandParser implements Parser\u003cModuleFilterCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * and returns an ModuleCommandParser object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleFilterCommand parse(String argumentsWithFlags) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String operator \u003d ArgumentTokenizer.isFlagPresent(argumentsWithFlags, CliSyntax.FLAG_OPERATOR_OR.getFlag())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? ModuleFilterCommand.OR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : ModuleFilterCommand.AND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String args \u003d ArgumentTokenizer.removeFlags(argumentsWithFlags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_SEMESTER, PREFIX_CREDITS, PREFIX_GRADE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027module filter\u0027, and nothing else (except preambles),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * refresh the list (show full module list)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (argMultimap.isEmpty(false)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new ModuleFilterCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d argMultimap.getValue(PREFIX_CREDITS).isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? Optional.of(parseCredits(argMultimap.getValue(PREFIX_CREDITS).get()))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cGrade\u003e grade \u003d argMultimap.getValue(PREFIX_GRADE).isPresent()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? parseGrade(argMultimap.getValue(PREFIX_GRADE).get())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemester\u003e semester \u003d argMultimap.getValue(PREFIX_SEMESTER).isPresent()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleFilterCommand(semester, credits, grade, operator);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 62,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/module/ModuleStringParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Parses a string containing moduleCodes and returns"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * a list of moduleCodes. Strings can be in any format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleStringParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String stringOfModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private ArrayList\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleStringParser(String stringOfModules) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.stringOfModules \u003d stringOfModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCodes \u003d getModulesFromString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns a String array of preclusion module codes in String form from data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ArrayList\u003cModuleCode\u003e getModulesFromString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // stringOfModules can be in multiple forms."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] strings \u003d stringOfModules.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        //remove any non ASCII characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        //remove whitespace"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        //validate with validation regex"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e stringsArray \u003d Stream.of(strings)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .map(s -\u003e s.replaceAll(\"[^a-zA-Z0-9\\\\s]\", \"\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .map(String::trim)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .filter(s -\u003e s.matches(ModuleCode.VALIDATION_REGEX))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArrayList\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String string : stringsArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            moduleCodes.add(new ModuleCode(string));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ArrayList\u003cModuleCode\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 56
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_ADD_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_NOT_ADDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Parses requirement input arguments and returns a new RequirementAddCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementAddCommandParser extends RequirementCommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses the given string of arguments {@code args} in the context of the RequirementAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * and returns a RequirementAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CREDITS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Show help message if prefixes are not entered"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (argMultimap.isEmpty(false)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_ADD_HELP));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Check if title and MCs are provided by user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CREDITS)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_NOT_ADDED));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Use the title to parse into a requirement code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d parseRequirementCode(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title title \u003d parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credits \u003d parseCredits(argMultimap.getValue(PREFIX_CREDITS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new Requirement(requirementCode, title, credits);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 53,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementAssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAssignCommand.MESSAGE_REQUIREMENT_ASSIGN_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAssignCommand.MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.ParserUtil.parseModuleCodes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses {@code Module}s to assign (to {@code Requirement}) input argument and creates a new"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * {@code RequirementAssignCommand} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementAssignCommandParser implements Parser\u003cRequirementAssignCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementAssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027requirement assign\u0027, and nothing else, show"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_REQUIREMENT_ASSIGN_HELP));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d parseRequirementCodeSpecifier(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d parseModulesToAssign(argMultimap.getAllValues(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new RequirementAssignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses specifier from {@code argMultimap} into {@code RequirementCode}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementCode parseRequirementCodeSpecifier(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.REQUIREMENT_CODE_SPECIFIER_RULE, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new RequirementCode(specifier.getValue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code List\u003cModuleCode\u003e} if {@code moduleCodes} is"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * If {@code moduleCodes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code List\u003cModuleCode\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private List\u003cModuleCode\u003e parseModulesToAssign(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assert moduleCodes !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // If no module codes are specified, throw exception"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (moduleCodes.isEmpty() || (moduleCodes.size() \u003d\u003d 1 \u0026\u0026 moduleCodes.contains(\"\"))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_REQUIREMENT_NO_MODULES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Collection\u003cString\u003e moduleCodesList \u003d moduleCodes;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return parseModuleCodes(moduleCodesList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "nathanaelseen": 79
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.model.requirement.RequirementCode.STRIP_DIGITS_REGEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a generic requirement command parser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public abstract class RequirementCommandParser implements Parser\u003cRequirementCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    //@@author waynewee"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses a {@code String title} into a {@code RequirementCode} (without the identifying number)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException If the given {@code title} is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static RequirementCode parseRequirementCode(String title) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String trimmedTitle \u003d stripDigits(title).trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // parses the title into a requirement code, but without the identifying number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final String and \u003d \"and\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final String or \u003d \"or\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArrayList\u003cString\u003e conjunctives \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        conjunctives.add(and);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        conjunctives.add(or);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder code \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] words \u003d trimmedTitle.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!conjunctives.contains(word)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                code.append(word.split(\"\")[0].toUpperCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new RequirementCode(code.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If the given {@code title} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses a {@code String credits} into a {@code Credits}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static Credits parseCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!Credits.isValidCredits(trimmedCredits)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Credits(trimmedCredits);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes all digits from the string {@code str}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static String stripDigits(String str) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return str.replaceAll(STRIP_DIGITS_REGEX, \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 37,
      "yjskrs": 52,
      "nathanaelseen": 9
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementDeleteCommand.MESSAGE_REQUIREMENT_DELETE_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.ParserUtil.REQUIREMENT_CODE_SPECIFIER_RULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Parses requirement input argument and creates a new RequirementDeleteCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementDeleteCommandParser extends RequirementCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses the given string {@code args} in the context of the RequirementDeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * and returns a RequirementDeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_DELETE_HELP));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Throw parse exception if specifier is an empty string or is not a valid specifier."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(args,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQUIREMENT_CODE_SPECIFIER_RULE, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(specifier.getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new RequirementDeleteCommand(requirementCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "teriaiw": 4,
      "yjskrs": 40
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_EDIT_HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementEditCommand.EditRequirementDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Parses requirement edit command input arguments and creates a new RequirementEditCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementEditCommandParser extends RequirementCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses the given string of arguments {@code args} in the context of the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * RequirementEditCommand and returns a RequirementEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CREDITS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Show help message for the command if no arguments are provided, i.e. \u0027requirement edit\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                MESSAGE_REQUIREMENT_EDIT_HELP));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d parseRequirementCodeSpecifier(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor editRequirementDescriptor \u003d parseEditedRequirement(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new RequirementEditCommand(requirementCode, editRequirementDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses specifier from {@code argMultimap} into {@code RequirementCode}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementCode parseRequirementCodeSpecifier(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            ParserUtil.REQUIREMENT_CODE_SPECIFIER_RULE, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new RequirementCode(specifier.getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses title and/or credits from {@code argMultimap} into {@code EditRequirementDescriptor}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptor parseEditedRequirement(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor editRequirementDescriptor \u003d new EditRequirementDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cString\u003e titleString \u003d argMultimap.getValue(PREFIX_TITLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cString\u003e creditsString \u003d argMultimap.getValue(PREFIX_CREDITS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // If neither the requirement title nor credits are specified, throw exception"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if ((titleString.isEmpty() || titleString.get().isEmpty())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 (creditsString.isEmpty() || creditsString.get().isEmpty())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ParseException(MESSAGE_REQUIREMENT_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Check if the title is a valid title, if any"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (titleString.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Title title \u003d parseTitle(titleString.get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            editRequirementDescriptor.setTitle(title);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Check if the credits is a valid credits, if any"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (creditsString.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Credits credits \u003d parseCredits(creditsString.get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            editRequirementDescriptor.setCredits(credits);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return editRequirementDescriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 91,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/requirement/RequirementUnassignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementUnassignCommand.MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementUnassignCommand.MESSAGE_REQUIREMENT_UNASSIGN_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.ParserUtil.parseModuleCodes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementUnassignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.Specifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses {@code Module}s to unassign (from {@code Requirement}) input argument and creates a new"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * {@code RequirementUnassignCommand} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementUnassignCommandParser implements Parser\u003cRequirementUnassignCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementUnassignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If all arguments in the command are empty; i.e, \u0027requirement unassign\u0027, and nothing else, show"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * the help message for this command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.isEmpty(true)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                MESSAGE_REQUIREMENT_UNASSIGN_HELP));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.REQUIREMENT_CODE_SPECIFIER_RULE, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d parseRequirementCodeSpecifier(argMultimap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d parseModulesToUnassign(argMultimap.getAllValues(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new RequirementUnassignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses specifier from {@code argMultimap} into {@code RequirementCode}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If user input does not conform to the expected format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementCode parseRequirementCodeSpecifier(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Specifier specifier \u003d ParserUtil.parseSpecifier(argMultimap.getPreamble(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ParserUtil.REQUIREMENT_CODE_SPECIFIER_RULE, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new RequirementCode(specifier.getValue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code List\u003cModuleCode\u003e} if {@code moduleCodes} is"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * If {@code moduleCodes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code List\u003cModuleCode\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private List\u003cModuleCode\u003e parseModulesToUnassign(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assert moduleCodes !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (moduleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_REQUIREMENT_NO_MODULES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } else if (moduleCodes.size() \u003d\u003d 1 \u0026\u0026 moduleCodes.contains(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_REQUIREMENT_NO_MODULES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Collection\u003cString\u003e moduleCodesList \u003d moduleCodes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return parseModuleCodes(moduleCodesList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 84
    }
  },
  {
    "path": "src/main/java/igrad/model/CourseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.UniqueRequirementList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Wraps all data at the course book level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBook implements ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueRequirementList requirements \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private CourseInfo courseInfo \u003d new CourseInfo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseBook() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an CourseBook using the Modules in the {@code toBeCopied}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBook(ReadOnlyCourseBook toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces the contents of the requirement list (which consists a list of modules) with {@code requirements}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code requirements} must not contain duplicate modules."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(List\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements.setRequirements(requirements);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Resets the existing data of this {@code CourseBook} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData(ReadOnlyCourseBook newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setRequirements(newData.getRequirementList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        setCourseInfo(newData.getCourseInfo());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Course (info)-level operations"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given courseInfo (only one courseInfo can exist/ever be created in the system)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void addCourseInfo(CourseInfo c) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseInfo \u003d c;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Retrieves the current course info, in the course book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseInfo;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces the courseInfo with {@code editedCourseInfo}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setCourseInfo(CourseInfo c) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseInfo \u003d c;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Module-level operations"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the course book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a module which has module code; {@code moduleCode}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Optional.empty} otherwise."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cModule\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return modules.getByModuleCode(moduleCode);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns all modules which has module code; {@code moduleCode}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Optional.empty} otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns all modules (in a module list), whose module code matches the module codes"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * in; {@code moduleCodes}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return modules.getByModuleCodes(moduleCodes);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a module to the course book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must not already exist in the course book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the course book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code key} from this {@code CourseBook}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code key} must exist in the course book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Requirement-level operations"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a requirement with the same identity as {@code requirement} exists in the course book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.contains(requirement);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a requirement which has requirement code; {@code requirementCode}, and"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Optional.empty} otherwise."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(requirementCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return requirements.getByRequirementCode(requirementCode);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns all requirements (in a requirement list), which has the module; {@code module}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public List\u003cRequirement\u003e getRequirementsWithModule(Module module) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return requirements.getByModule(module);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a requirement to the course book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must not already exist in the course book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.add(requirement);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given requirement {@code target} in the list with {@code editedRequirement}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedRequirement} must not be the same as another existing requirement"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the course book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editedRequirement);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.setRequirement(target, editedRequirement);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code requirement} from this {@code CourseBook}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code requirement} must exist in the course book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.remove(requirement);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String requirementsFulfilled() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.countFulfilled();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if the course is complete. A course is complete when all its requirements are fulfilled."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.areAllFulfilled();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof CourseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 modules.equals(((CourseBook) other).modules)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 requirements.equals(((CourseBook) other).requirements)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 courseInfo.equals(((CourseBook) other).courseInfo));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 2,
      "yjskrs": 115,
      "-": 59,
      "nathanaelseen": 78
    }
  },
  {
    "path": "src/main/java/igrad/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Predicate\u003cRequirement\u003e PREDICATE_SHOW_ALL_REQUIREMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setCourseBookFilePath(Path courseBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the user prefs\u0027 backup course book file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    Path getBackupCourseBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Resets {@code courseBook} data to a blank state with no data (e.g, modules, requirements, etc)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void resetCourseBook(ReadOnlyCourseBook courseBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Undoes the course book to the previous state."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if change was detected"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    boolean undoCourseBook() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Exports the course book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns a list of exported modules"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    List\u003cModule\u003e exportModuleList() throws IOException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns the Avatar"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    Avatar getAvatar();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Sets the Avatar"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void setAvatar(Avatar avatar);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Checks whether the Avatar is a sample Avatar (i.e, Avatar not set yet)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    boolean isSampleAvatar();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the CourseBook"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ReadOnlyCourseBook getCourseBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces course book data with the data in {@code courseBook}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setCourseBook(ReadOnlyCourseBook courseBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the course book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Checks if the prerequisites for a module exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * and is done in the filteredModuleList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * As long as one prerequisite is not fulfilled or not included,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * this will return false."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    boolean hasModulePrerequisites(Module module);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Checks if the preclusions for a module exists in the filteredModuleList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * As long as one preclusion is included, this will return true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    boolean hasModulePreclusions(Module module);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must exist in the course book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given {@code courseInfo} to the course book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void addCourseInfo(CourseInfo courseInfo);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the courseInfo."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    CourseInfo getCourseInfo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the course book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setCourseInfo(CourseInfo editedCourseInfo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Checks if the course name has been set."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    boolean isCourseNameSet();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    String getRandomQuoteString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code module} must not already exist in the course book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the course book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if the {@code requirement} exists in the course book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if it exists and false otherwise."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean hasRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Retrieves the {@code Requirement} exists in the course book, by checking only its given"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code RequirementCode}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the @{code Requirement} if it exists else {@code Optional.empty} otherwise."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Retrieves the {@code Requirement} whose {@code Module} list has the specified module"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code module}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    List\u003cRequirement\u003e getRequirementsWithModule(Module module);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Retrieves the {@code Module} exists in the course book, by checking only its given {@code ModuleCode}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the @{code Module} if it exists else {@code Optional.empty} otherwise."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    Optional\u003cModule\u003e getModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Retrieves a list of {@code Module} which exists in the course book, by checking only its {@code ModuleCode}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given requirement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code requirement} must not already exist in the course book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void addRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given requirement {@code target} with {@code editedRequirement}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book and {@code editedRequirement} must not"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * have the same title as another requirement in the course book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void setRequirement(Requirement target, Requirement editedRequirement);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Deletes the given {@code requirement}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void deleteRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an sorted {@code List} sorted according to {@code Comparator\u003cModule\u003e}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    List\u003cModule\u003e getSortedModuleList(Comparator\u003cModule\u003e comparator);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the requirements list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Updates the filter of the filtered requirement list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void updateRequirementList(Predicate\u003cRequirement\u003e predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 45,
      "teriaiw": 3,
      "yjskrs": 66,
      "-": 51,
      "nathanaelseen": 86
    }
  },
  {
    "path": "src/main/java/igrad/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.csvwriter.CsvWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePreclusions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePrerequisites;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.sorters.SortBySemester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.quotes.QuoteGenerator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.storage.CourseBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.storage.JsonCourseBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents the in-memory model of the course book data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBook courseBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final FilteredList\u003cRequirement\u003e requirements;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final QuoteGenerator quoteGenerator \u003d new QuoteGenerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes a ModelManager with the given courseBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModelManager(ReadOnlyCourseBook courseBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(courseBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Initializing with course book: \" + courseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Retrieving all course book data (modules, course info, requirements, from storage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBook \u003d new CourseBook(courseBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements \u003d new FilteredList\u003c\u003e(this.courseBook.getRequirementList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.filteredModules \u003d new FilteredList\u003c\u003e(this.courseBook.getModuleList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //this.courseInfo \u003d this.courseBook.getCourseInfo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this(new CourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getRandomQuoteString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return quoteGenerator.getRandomQuote();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefs.getCourseBookFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(courseBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Path getBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return userPrefs.getBackupCourseBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar getAvatar() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return userPrefs.getAvatar();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        userPrefs.setAvatar(avatar);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this.getUserPrefs().getAvatar().equals(Avatar.getSampleAvatar());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CourseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.setCourseBook(new CourseBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseBook.resetData(courseBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean undoCourseBook() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        boolean hasChanged \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CourseBookStorage courseBookStorage \u003d new JsonCourseBookStorage("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            getBackupCourseBookFilePath()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cReadOnlyCourseBook\u003e backupCourseBookOpt \u003d courseBookStorage.readCourseBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (backupCourseBookOpt.isPresent()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ReadOnlyCourseBook backupCourseBook \u003d backupCourseBookOpt.get();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!courseBook.equals(backupCourseBook)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                hasChanged \u003d true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                setCourseBook(backupCourseBook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return hasChanged;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public List\u003cModule\u003e exportModuleList() throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d getFilteredModuleList()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .filter(m -\u003e m.getSemester().isPresent())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .sorted(new SortBySemester())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleList.size() \u003e 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            CsvWriter csvWriter \u003d new CsvWriter(moduleList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            csvWriter.write();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseBook.hasModule(module);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean hasModulePreclusions(Module module) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        boolean hasModulePreclusions \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModulePreclusions preclusions \u003d module.getPreclusions();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!preclusions.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            List\u003cModuleCode\u003e moduleCodes \u003d preclusions.getModuleCodes();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            for (ModuleCode preclusion : moduleCodes) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                Optional\u003cModule\u003e mOpt \u003d getModule(preclusion);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (mOpt.isPresent()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    hasModulePreclusions \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return hasModulePreclusions;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean hasModulePrerequisites(Module module) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        boolean hasModulePrerequisites \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModulePrerequisites prerequisites \u003d module.getPrequisites();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!prerequisites.isEmpty()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            List\u003cModuleCode\u003e moduleCodes \u003d prerequisites.getModuleCodes();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            for (ModuleCode moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                Optional\u003cModule\u003e mOpt \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (mOpt.isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    hasModulePrerequisites \u003d false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    Module m \u003d mOpt.get();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    if (!m.isDone()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        hasModulePrerequisites \u003d false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return hasModulePrerequisites;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.removeModule(target);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseBook.getCourseInfo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setCourseInfo(CourseInfo editedCourseInfo) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseBook.getCourseInfo().getName().isPresent();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.addCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addModule(module);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cModule\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.getModule(moduleCode);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.getModules(moduleCodes);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.hasRequirement(requirement);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(requirementCode);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseBook.getRequirement(requirementCode);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public List\u003cRequirement\u003e getRequirementsWithModule(Module module) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.getRequirementsWithModule(module);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        updateRequirementList(PREDICATE_SHOW_ALL_REQUIREMENTS);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedRequirement);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.setRequirement(target, editedRequirement);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.removeRequirement(requirement);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code versionedCourseBook}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public List\u003cModule\u003e getSortedModuleList(Comparator\u003cModule\u003e comparator) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ObservableList\u003cModule\u003e tempList \u003d getFilteredModuleList();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e sortedList \u003d new ArrayList\u003c\u003e(tempList);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sortedList.sort(comparator);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Requirement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.setPredicate(predicate);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // util"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@author teriaiw"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.equals(other.courseBook)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 requirements.equals(other.requirements);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 124,
      "teriaiw": 4,
      "yjskrs": 102,
      "-": 92,
      "nathanaelseen": 84
    }
  },
  {
    "path": "src/main/java/igrad/model/ReadOnlyCourseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Unmodifiable view of a course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the requirements in the course book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the course info."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    CourseInfo getCourseInfo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the number of requirements fulfilled. A fulfilled requirement is reflected by the condition"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code Requirement#isFulfilled()}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see Requirement#isFulfilled()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    String requirementsFulfilled();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if the course is complete. A course is complete when all its requirements are fulfilled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean isComplete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 26,
      "-": 8,
      "nathanaelseen": 6
    }
  },
  {
    "path": "src/main/java/igrad/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    Path getBackupCourseBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    Avatar getAvatar();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 3,
      "-": 12,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path courseBookFilePath \u003d Paths.get(\"data\", \"coursebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Path backupCourseBookFilePath \u003d Paths.get(\"data\", \"backup_coursebook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Avatar avatar \u003d Avatar.getSampleAvatar();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setCourseBookFilePath(newUserPrefs.getCourseBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        setBackupCourseBookFilePath(newUserPrefs.getBackupCourseBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        setAvatar(newUserPrefs.getAvatar());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBookFilePath \u003d courseBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Path getBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return backupCourseBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setBackupCourseBookFilePath(Path backupCourseBookFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(backupCourseBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.backupCourseBookFilePath \u003d backupCourseBookFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar getAvatar() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.avatar \u003d avatar;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 avatar.equals(o.avatar);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Objects.hash(guiSettings, courseBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + courseBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(\"\\nBackup Local data file location : \" + backupCourseBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(\"\\nAvatar : \" + avatar);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 7,
      "yjskrs": 12,
      "-": 71,
      "nathanaelseen": 24
    }
  },
  {
    "path": "src/main/java/igrad/model/avatar/Avatar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents an Avatar (the user selects to represent him/herself) in the course book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Avatar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The avatar chosen should be in the list of avatars!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String[] AVATAR_NAMES \u003d new String[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"po\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"shibu\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"chikin\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"grizzly\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"koala\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"frogger\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"sample\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // This empty constructor is only required and used for Json serialising during user prefs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Avatar() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a valid avatar name as per the names in AVATAR_NAMES."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (String avatarName : AVATAR_NAMES) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (name.equals(avatarName) || name.equals(avatarName + \"-sad\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*public static Avatar getAvatar() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return AvatarStorage.readAvatar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return getSampleAvatar();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Avatar getSampleAvatar() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Avatar sampleAvatar \u003d new Avatar(\"sample\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return sampleAvatar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static List\u003cAvatar\u003e getAvatarList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cAvatar\u003e avatarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (String name : AVATAR_NAMES) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            avatarList.add(new Avatar(name));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return avatarList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if both avatars have the same name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!(other instanceof Avatar)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Avatar otherAvatar \u003d (Avatar) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return otherAvatar.getName().equals(getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(\"Name : \" + name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 61,
      "nathanaelseen": 44
    }
  },
  {
    "path": "src/main/java/igrad/model/course/Cap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Course Info\u0027s cap in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCap(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class Cap {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The C.A.P. provided for the course is invalid!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"It should not start with a space or slash and should not \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"be blank.\\nIt should be a non-negative number and should be within value of 5.0.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-5](\\\\.[0-9]+){0,1}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // set max cap limit to 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final double MAX_CAP_LIMIT \u003d 5.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Cap MAX_CAP \u003d new Cap(MAX_CAP_LIMIT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // set min cap limit to 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final double MIN_CAP_LIMIT \u003d 0.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Cap CAP_ZERO \u003d new Cap(MIN_CAP_LIMIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Cap MIN_CAP \u003d new Cap(MIN_CAP_LIMIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code Cap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param cap A valid cap (double)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Cap(String cap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(cap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidCap(cap), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d Double.parseDouble(cap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code Cap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param cap A valid cap (double)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Cap(double cap) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidCap(cap), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d cap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given double is a valid cap."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidCap(double test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return (test \u003e\u003d MIN_CAP_LIMIT) \u0026\u0026 (test \u003c\u003d MAX_CAP_LIMIT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given String is a valid cap."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidCap(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 (Double.parseDouble(test) \u003e\u003d MIN_CAP_LIMIT \u0026\u0026 Double.parseDouble(test) \u003c\u003d MAX_CAP_LIMIT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String twoDpTrunc \u003d String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return twoDpTrunc;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof Cap // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 value \u003d\u003d (((Cap) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return ((Double) value).hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 3,
      "nathanaelseen": 82
    }
  },
  {
    "path": "src/main/java/igrad/model/course/CourseInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.model.course.Cap.CAP_ZERO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.exceptions.CapOverflowException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents all the (additional) details a Course (there\u0027s only one of which), might have e.g, course name, cap, etc"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfo {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * All fields in the course info object can be optional, this is the case when the user hasn\u0027t done course add"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * command, hence they can be Optional.empty(). Conversely, once the course add command has been"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * successful, all fields would NOT be Optional.empty()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Optional\u003cCap\u003e cap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Optional\u003cCredits\u003e credits;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Optional\u003cSemesters\u003e semesters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Usually, Model entity classes such as model.Module.java, do not have empty no-arg constructor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * like this. However, since this class is instantiated in ModelMananger.java, using the usual"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * 4-arg cosntructor would seem messy."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesters \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo(Optional\u003cName\u003e name, Optional\u003cCap\u003e cap, Optional\u003cCredits\u003e credits,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                      Optional\u003cSemesters\u003e semesters) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d semesters;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates a course info by making a copy from an existing course info {@code toBeCopied}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param toBeCopied Requirement to copy from."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo(CourseInfo toBeCopied) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d toBeCopied.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.cap \u003d toBeCopied.getCap();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d toBeCopied.getCredits();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d toBeCopied.getSemesters();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Computes and returns a {@code Credits} object which has {@code creditsFulfilled} and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code creditsRequired}, based  on a list of {@code Requirement}s;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code requirementList} passed in."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cCredits\u003e computeCredits(List\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(requirementList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // If the requirementList is empty, there\u0027s no talk about this, Credits would be Optional.empty"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (requirementList.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCreditsRequired \u003d computeCreditsRequired(requirementList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCreditsFulfilled \u003d computeCreditsFulfilled(requirementList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(new Credits(totalCreditsRequired, totalCreditsFulfilled));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Computes the total number of credits fulfilled in a course by summing up all the {@code creditsFulfilled} in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * the list of all {@code Requirement}s as passed as tthe {@code requirementList} argument."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an integer."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static int computeCreditsFulfilled(List\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsFulfilled \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (Requirement requirement : requirementList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            creditsFulfilled +\u003d requirement.getCredits().getCreditsFulfilled();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return creditsFulfilled;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Computes the total number of credits required in a course by summing up all the {@code creditsRequired} in"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * the list of all {@code Requirement}s as passed as tthe {@code requirementList} argument."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an integer."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static int computeCreditsRequired(List\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsRequired \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (Requirement requirement : requirementList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            creditsRequired +\u003d requirement.getCredits().getCreditsRequired();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return creditsRequired;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Computes and returns a {@code Optional\u003cCap\u003e} object based on a list of {@code Requirement}s;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * in {@code requirementList} and list of {@code Module}s in {@code moduleList} passed in."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Optional\u003cCap\u003e computeCap(List\u003cModule\u003e moduleList, List\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(moduleList, requirementList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If the moduleList or requirementList is empty, there\u0027s no talk about this, Cap would be"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Optional.empty, because there is (literally) nothing by which cap could be computed upon"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (moduleList.isEmpty() || requirementList.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double totalCredits \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double totalModuleCredits \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalNumOfModules \u003d moduleList.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (int i \u003d 0; i \u003c totalNumOfModules; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Module module \u003d moduleList.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * Firstly, we\u0027ve to check if that module belongs to any requirement. If it doesn\u0027t"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             * then we can\u0027t add that into the final Cap."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "             */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            boolean modPresentInAnyReq \u003d requirementList.stream()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .filter(requirement -\u003e requirement.hasModule(module))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .isPresent();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (!modPresentInAnyReq) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Now if the module belongs to at least one requirement, we try to compute cap."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Optional\u003cGrade\u003e grade \u003d module.getGrade();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // However, if the module does not have any grade, don\u0027t bother computing, just skip."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (grade.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            int moduleCredits \u003d module.getCredits().toInteger();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            totalModuleCredits +\u003d moduleCredits;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            totalCredits +\u003d (grade.get().getGradeValue() * moduleCredits);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (grade.get().isSuGrade()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalModuleCredits -\u003d moduleCredits;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Cap capResult;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (totalModuleCredits \u003d\u003d 0) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            capResult \u003d CAP_ZERO;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            capResult \u003d new Cap(totalCredits / totalModuleCredits);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(capResult);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    //@@author teriaiw"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Computes and returns a {@code Optional\u003cSemesters\u003e} object based on {@code Optional\u003cSemesters\u003e} object and a"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * list of {@code Module}s passed in."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static Optional\u003cSemesters\u003e computeSemesters(Optional\u003cSemesters\u003e semesters, List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireAllNonNull(semesters, moduleList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (moduleList.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return semesters.map(value -\u003e new Semesters(value.toString()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (semesters.isEmpty()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int totalSemesters \u003d semesters.get().getTotalSemesters();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int remainingSemesters \u003d computeRemainingSemesters(totalSemesters, moduleList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return Optional.of(new Semesters(totalSemesters, remainingSemesters));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Computes and returns an Integer representing remaining semesters based on a list of {@Module}s passed in."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private static int computeRemainingSemesters(int totalSemesters, List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //If module list is empty, no semesters have been done yet"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (moduleList.isEmpty()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return totalSemesters;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int totalNumOfModules \u003d moduleList.size();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int latestFinishedSem \u003d 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        for (int i \u003d 0; i \u003c totalNumOfModules; i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            Optional\u003cGrade\u003e grade \u003d moduleList.get(i).getGrade();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            if (grade.isEmpty()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            Optional\u003cSemester\u003e semester \u003d moduleList.get(i).getSemester();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            if (semester.isEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            int semesterValue \u003d semester.get().getValue();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            if (semesterValue \u003e latestFinishedSem) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                latestFinishedSem \u003d semesterValue;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int year \u003d latestFinishedSem / 10;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int sem \u003d latestFinishedSem % 10;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int totalCompletedSems \u003d 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (year \u003e 0) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            totalCompletedSems \u003d ((year - 1) * 2);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        totalCompletedSems +\u003d sem;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int remainingSems \u003d totalSemesters - totalCompletedSems;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!Semesters.isValidRemainingSemesters(remainingSems)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return remainingSems;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns an estimated Cap (Double) based on {@code Model} and {@code Cap} object passed in."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static Optional\u003cCap\u003e computeEstimatedCap(CourseInfo courseInfo, Cap capToAchieve) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d courseInfo.getSemesters();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int totalSemesters \u003d semesters.get().getTotalSemesters();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int remainingSemesters \u003d semesters.get().getRemainingSemesters();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e current \u003d courseInfo.getCap();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (current.isEmpty()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return Optional.of(capToAchieve);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            totalSemesters \u003d remainingSemesters + 1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Cap currentCap \u003d courseInfo.getCap().orElse(CAP_ZERO);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        double capWanted \u003d capToAchieve.value;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        double capNow \u003d currentCap.value;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        double estimatedCapEachSem \u003d ((capWanted * totalSemesters) - capNow) / remainingSemesters;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!Cap.isValidCap(estimatedCapEachSem)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new CapOverflowException(estimatedCapEachSem);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return Optional.of(new Cap(Double.toString(estimatedCapEachSem)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Optional\u003cCap\u003e getCap() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Optional\u003cCredits\u003e getCredits() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Optional\u003cSemesters\u003e getSemesters() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!(other instanceof CourseInfo)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo otherCourseInfo \u003d (CourseInfo) other;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return (otherCourseInfo.getName().equals(getName())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 otherCourseInfo.getCap().equals(getCap())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 otherCourseInfo.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 otherCourseInfo.getSemesters().equals(getSemesters()));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cName\u003e name \u003d getName();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        /*name.ifPresent(x -\u003e builder.append(\" Name \").append(x));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "         cap.ifPresent(x -\u003e builder.append(\" Cap \").append(x));*/"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        name.ifPresent(x -\u003e builder.append(x));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 165,
      "nathanaelseen": 191
    }
  },
  {
    "path": "src/main/java/igrad/model/course/Credits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a {@code CourseInfo}\u0027s credits information in the course book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: immutable, fields are non-null and valid as declared by {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Total modular Credits provided for the course is invalid!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"It should be a number more than 0.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]\\\\d*$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final int creditsRequired;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final int creditsFulfilled;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code Credits} with {@code creditsRequired} credits required and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code creditsFulfilled} creditsFulfilled."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param creditsRequired  A valid credits value (integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param creditsFulfilled A valid credits value (integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Credits(int creditsRequired, int creditsFulfilled) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidCreditsRequired(creditsRequired), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidCreditsFulfilled(creditsFulfilled), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.creditsRequired \u003d creditsRequired;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.creditsFulfilled \u003d creditsFulfilled;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if given integer {@code test} is a valid credits required (i.e. more than 0)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidCreditsRequired(int test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if given integer {@code test} is a valid credits fulfilled (i.e. more than or equals 0)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidCreditsFulfilled(int test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the credits (int) required to mark requirement as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int getCreditsRequired() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return creditsRequired;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the credits (int) fulfilled."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int getCreditsFulfilled() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return creditsFulfilled;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return String.valueOf(creditsRequired);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // return true if same object, else check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof Credits"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 creditsRequired \u003d\u003d ((Credits) other).creditsRequired"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 creditsFulfilled \u003d\u003d ((Credits) other).creditsFulfilled);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return (creditsRequired + creditsFulfilled);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 83
    }
  },
  {
    "path": "src/main/java/igrad/model/course/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Course Info\u0027s name in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name provided for the course is invalid!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"It should not start with a space or slash and should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // The first character of the course name must not be a whitespace (\" \")."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // The name must not be blank."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 57
    }
  },
  {
    "path": "src/main/java/igrad/model/course/Semesters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Represents a {@code CourseInfo}\u0027s semester information in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Guarantees: immutable, fields are non-null and valid as declared by {@link #isValidSemesters(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class Semesters {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Total Semesters of a course provided is invalid!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"It should be a number more than 0 and less than 100.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMS \u003d \"Remaining semester count invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]\\\\d*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    // set max limit to 100"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final int MAX_SEMS \u003d 100;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    // set min limit to 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final int MIN_SEMS \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public final int totalSemesters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public final int remainingSemesters;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Constructs a {@code Semesters} with remaining semesters as total semesters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @param totalSemesters A valid semester count (integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Semesters(String totalSemesters) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(totalSemesters);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        checkArgument(isValidSemesters(totalSemesters), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.totalSemesters \u003d Integer.parseInt(totalSemesters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.remainingSemesters \u003d this.totalSemesters;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Constructs a {@code Semesters} with {@code totalSemesters} total semesters and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * {@code remainingSemesters} remaining semesters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @param totalSemesters     A valid semester count (integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @param remainingSemesters A valid semester count (integer)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Semesters(int totalSemesters, int remainingSemesters) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(totalSemesters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        checkArgument(isValidTotalSemesters(totalSemesters), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        checkArgument(isValidRemainingSemesters(remainingSemesters), MESSAGE_INVALID_SEMS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.totalSemesters \u003d totalSemesters;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        this.remainingSemesters \u003d remainingSemesters;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if given String {@code test} is a valid Semesters count (i.e. integer more than 0)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static boolean isValidSemesters(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(test) \u003e MIN_SEMS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(test) \u003c MAX_SEMS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if given integer {@code test} is a valid total Semesters count (i.e. more than or equals 0)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static boolean isValidTotalSemesters(int test) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return test \u003e MIN_SEMS \u0026\u0026 test \u003c MAX_SEMS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if given integer {@code test} is a valid remaining Semesters count (i.e. more than or equals 0)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static boolean isValidRemainingSemesters(int test) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return test \u003e\u003d MIN_SEMS \u0026\u0026 test \u003c MAX_SEMS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int getTotalSemesters() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return totalSemesters;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int getRemainingSemesters() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return remainingSemesters;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return String.valueOf(totalSemesters);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return other \u003d\u003d this // return true if same object, else check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (other instanceof Semesters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 totalSemesters \u003d\u003d ((Semesters) other).totalSemesters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 remainingSemesters \u003d\u003d ((Semesters) other).remainingSemesters);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return totalSemesters;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 122
    }
  },
  {
    "path": "src/main/java/igrad/model/course/exceptions/CapOverflowException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.model.course.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Signals that the operation will result in overflow of Cap."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CapOverflowException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CapOverflowException(double cap) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        super(String.format("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \"Unable to achieve desired C.A.P. as C.A.P. of %1$s to maintain per semester is invalid\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            cap));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 14
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Credits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s credit units in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Module Credits provided for the module is invalid!\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            + \"It should be a number more than 0 and less than 200.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    // set max limit to 200"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final int MAX_CREDITS \u003d 200;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    // set min limit to 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final int MIN_CREDITS \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs an {@code Credits}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param credits A valid credits value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Credits(String credits) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidCredits(credits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given string is a valid credits."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidCredits(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Integer.parseInt(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                \u0026\u0026 Integer.parseInt(test) \u003e MIN_CREDITS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                \u0026\u0026 Integer.parseInt(test) \u003c MAX_CREDITS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts the string credits {@code value} to integer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int toInteger() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Credits // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Credits) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 52,
      "teriaiw": 11,
      "yjskrs": 8,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s grade."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Grade provided for the module is invalid!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"It should be in the valid format: A+, A, A-, B+, B-, C+, C, D, D+, F, S, U\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(A\\\\+)|(A)|(A-)|(B\\\\+)|(B)|(B-)|(C\\\\+)|(C)|(D)|(D\\\\+)|(F)|(S)|(U)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * This is a mapping from grade to cap (double), since an SU grade does not have any cap value,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * we set it to Optional.empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Map\u003cString, Optional\u003cDouble\u003e\u003e SU_GRADE_CAP_MAP \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"S\", Optional.empty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"U\", Optional.empty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * This is a mapping from grade to cap (double), including SU grades."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Map\u003cString, Optional\u003cDouble\u003e\u003e GRADE_CAP_MAP \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"A+\", Optional.of(5.0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"A\", Optional.of(5.0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"A-\", Optional.of(4.5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"B+\", Optional.of(4.0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"B\", Optional.of(3.5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"B-\", Optional.of(3.0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"C+\", Optional.of(2.5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"C\", Optional.of(2.0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"D+\", Optional.of(1.5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"D\", Optional.of(1.0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            put(\"F\", Optional.of(0.0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            putAll(SU_GRADE_CAP_MAP);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs an {@code Grade}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param grade A valid grade value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    // @@author teriaiw"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if {@code String grade} is valid grade."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @return cap which represents a particular grade"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public double getGradeValue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return GRADE_CAP_MAP.get(value).orElse(0.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // @@author nathanaelseen"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Determines whether a grade is SU or not."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isSuGrade() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return GRADE_CAP_MAP.get(value).isEmpty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 value.equals(((Grade) other).value)); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 16,
      "yjskrs": 4,
      "nathanaelseen": 87
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents a Module in the course book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Credits credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final ModulePrerequisites prequisites;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final ModulePreclusions preclusions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // A module object can be created without all these fields (which are optional)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Optional\u003cSemester\u003e semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Module("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Title title,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Credits credits,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemester\u003e semester,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cGrade\u003e grade"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireAllNonNull(title, moduleCode, credits);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.preclusions \u003d new ModulePreclusions();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.prequisites \u003d new ModulePrerequisites();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Module("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Title title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Credits credits,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModulePreclusions preclusions,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModulePrerequisites prequisites"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireAllNonNull(title, moduleCode, credits);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.prequisites \u003d prequisites;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Optional\u003cSemester\u003e getSemester() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModulePrerequisites getPrequisites() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return prequisites;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModulePreclusions getPreclusions() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return preclusions;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if module is done, else false."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return grade.isPresent();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * This defines a weaker notion of equality between two modules than Module#isSameModule."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean hasModuleCodeOf(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleCode \u003d\u003d this.moduleCode) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if both modules of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getSemester().equals(getSemester());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Objects.hash(title, moduleCode, credits, semester);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Title title \u003d getTitle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode \u003d getModuleCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Credits credits \u003d getCredits();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        builder"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\"Module Code: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(moduleCode)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\"\\nTitle: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(title)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\"\\nCredits: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(credits);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        semester.ifPresent(x -\u003e builder.append(\"\\nSemester: \").append(x));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        grade.ifPresent(x -\u003e builder.append(\"\\nGrade: \").append(x));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 174,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents a Module\u0027s module code in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Module Code provided for the module is invalid!\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Module code should contain at least two or three letters at the front and four numbers at the back, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"with an optional letter at the end.\\ne.g. CS2103T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".{2,3}\\\\d{4}\\\\w{0,1}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((ModuleCode) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 57,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/ModulePreclusions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Holds the module preclusions in a list of module codes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Preclusions for a specific module are modules that cannot be taken"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * if the module is already taken"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModulePreclusions extends ModulePrerequisitesOrPreclusions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModulePreclusions(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.moduleCodes \u003d moduleCodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModulePreclusions() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "dargohzy": 21
    }
  },
  {
    "path": "src/main/java/igrad/model/module/ModulePrerequisites.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Holds the module prerequisites in a list of module codes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Prerequisites for a specific module are modules that have to be fulfilled"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * before the module is taken"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModulePrerequisites extends ModulePrerequisitesOrPreclusions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModulePrerequisites(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.moduleCodes \u003d moduleCodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModulePrerequisites() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "dargohzy": 21
    }
  },
  {
    "path": "src/main/java/igrad/model/module/ModulePrerequisitesOrPreclusions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Checks if the current module is valid in terms of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * prerequisites and preclusions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public abstract class ModulePrerequisitesOrPreclusions {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    protected List\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public List\u003cModuleCode\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return moduleCodes.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        for (ModuleCode moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            string.append(moduleCode.value).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "dargohzy": 32
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Semester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents the semester a module was taken."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Semester provided for the module is invalid!\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Semester should be in the format Y_S_\\ne.g. Y1S2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)Y[1-9]S[1-2]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param semester A valid module code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d semester.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidSemester(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String intValue \u003d value.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Integer.parseInt(intValue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Semester) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 63,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents a Module\u0027s title in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Title provided for the module is invalid!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"It should not start with a space or slash and should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // The first character of the module title must not be a whitespace (\" \")."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // The title must not be blank."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 55,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getTitle().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 4,
      "-": 22,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Module} as the given argument;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * {@code toCheck}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if the list contains all equivalent {@code Module}s in the list of"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * {@code Module}s as the given argument; {@code modulesToCheck}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean contains(List\u003cModule\u003e modulesToCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(modulesToCheck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return modulesToCheck.stream().allMatch(this::contains);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns a module if the list contains an equivalent {@code Module};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * which has module code; {@code moduleCode}, and returns an {@code Optional.empty} if otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Optional\u003cModule\u003e getByModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .filter(module -\u003e module.getModuleCode().equals(moduleCode))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns a list of modules; {@code List\u003cModule\u003e} of all modules in the internal list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * whose module code matches the module codes in; {@code moduleCodes}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public List\u003cModule\u003e getByModuleCodes(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .filter(modules -\u003e moduleCodes.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .anyMatch(moduleCode -\u003e moduleCode.equals(modules.getModuleCode())))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Adds all modules to the current list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void add(List\u003cModule\u003e modulesToAdd) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(modulesToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        modulesToAdd.forEach(this::add);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Removes all modules from the current list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * The module must already exist in the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void remove(List\u003cModule\u003e modulesToRemove) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(modulesToRemove);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        modulesToRemove.forEach(this::remove);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 191,
      "yjskrs": 2
    }
  },
  {
    "path": "src/main/java/igrad/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 11
    }
  },
  {
    "path": "src/main/java/igrad/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 5,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/model/module/sorters/SortBySemester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.module.sorters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Sorter for modules by semester"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class SortBySemester implements Comparator\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Compares the digits in the semester a module is tagged with."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Results in an ascending sort."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int compare(Module m1, Module m2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int s1 \u003d extractDigits(m1.getSemester().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int s2 \u003d extractDigits(m2.getSemester().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return s1 - s2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Extracts digits from a string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private int extractDigits(String str) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Integer.parseInt(str.replaceAll(\"\\\\D+\", \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 30,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/quotes/QuoteGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.quotes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Randomly selects a {@code Quote} each time the user starts the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class QuoteGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String[] quotes \u003d {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Believe you can and you’re halfway there.\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"You have to expect things of yourself before you can do them.\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"It always seems impossible until it’s done.\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Don’t let what you cannot do interfere with what you can do.\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Start where you are. Use what you have. Do what you can.\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"The secret of success is to do the common things uncommonly well.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Strive for progress, not perfection.\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"I find that the harder I work, the more luck I seem to have.\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Success is the sum of small efforts, repeated day in and day out.\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Don’t wish it were easier; wish you were better.\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"The secret to getting ahead is getting started.\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"You don’t have to be great to start, but you have to start to be great.\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"The expert in everything was once a beginner.\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"There are no shortcuts to any place worth going.\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Push yourself, because no one else is going to do it for you.\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"There is no substitute for hard work.\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"The difference between ordinary and extraordinary is that little “extra.”\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"You don’t always get what you wish for; you get what you work for.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"The only place where success comes before work is in the dictionary.\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"There are no traffic jams on the extra mile.\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"If you’re going through hell, keep going.\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Don’t let your victories go to your head, or your failures go to your heart.\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Failure is the opportunity to begin again more intelligently.\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"You don’t drown by falling in the water; you drown by staying there.\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"It’s not going to be easy, but it’s going to be worth it.\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"I’ve failed over and over and over again in my life. And that is why I succeed.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getRandomQuote() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int max \u003d quotes.length - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int min \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int randomIndex \u003d (int) (Math.random() * ((max - min) + 1)) + min;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return quotes[randomIndex];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 50
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/Credits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Requirement\u0027s credits information in the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Guarantees: immutable, fields are non-null and valid as declared by {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The modular Credits provided for the requirement is invalid!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"It should be a number more than 0 and less than 10000.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // allow any numbers more than or equals zero"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]\\\\d*$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // set max limit to 10000"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final int MAX_CREDITS \u003d 10000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // set min limit to 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final int MIN_CREDITS \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final int creditsRequired;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final int creditsAssigned;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final int creditsFulfilled;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code Credits} with 0 fulfilled credits."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param creditsRequired A valid credits value (integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Credits(String creditsRequired) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(creditsRequired);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        checkArgument(isValidCredits(creditsRequired), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsRequired \u003d Integer.parseInt(creditsRequired);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsAssigned \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsFulfilled \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code Credits} with {@code creditsRequired} credits required,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code creditsAssigned} and {@code creditsFulfilled} creditsFulfilled."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param creditsRequired  A valid credits value (integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param creditsAssigned  A valid credits value (integer)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param creditsFulfilled A valid credits value (integer)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Credits(int creditsRequired, int creditsAssigned, int creditsFulfilled) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        checkArgument(isValidCredits(creditsRequired, creditsAssigned, creditsFulfilled), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsRequired \u003d creditsRequired;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsAssigned \u003d creditsAssigned;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.creditsFulfilled \u003d creditsFulfilled;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if given String {@code test} is a valid credits"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * (i.e. integer more than 0 and less than 1000)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static boolean isValidCredits(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 Integer.parseInt(test) \u003e MIN_CREDITS"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 Integer.parseInt(test) \u003c MAX_CREDITS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if given credits are valid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static boolean isValidCredits(int required, int assigned, int fulfilled) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check if any of them are below the min limit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (required \u003c MIN_CREDITS || assigned \u003c MIN_CREDITS || fulfilled \u003c MIN_CREDITS) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check if any of them are over the max limit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (required \u003e MAX_CREDITS || assigned \u003e MAX_CREDITS || fulfilled \u003e MAX_CREDITS) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // field specific checks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return required !\u003d MIN_CREDITS \u0026\u0026 fulfilled \u003c\u003d assigned;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits (int) required to mark requirement as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsRequired() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return creditsRequired;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits (int) which are assigned to the requirement."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsAssigned() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return creditsAssigned;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits (int) fulfilled."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsFulfilled() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return creditsFulfilled;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if requirement is fulfilled, i.e. credits fulfilled is more than or equals credits required."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Otherwise return false."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return creditsFulfilled \u003e\u003d creditsRequired;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return String.valueOf(creditsRequired);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // return true if same object, else check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof Credits"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 creditsRequired \u003d\u003d ((Credits) other).creditsRequired"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 creditsAssigned \u003d\u003d ((Credits) other).creditsAssigned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 creditsFulfilled \u003d\u003d ((Credits) other).creditsFulfilled);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return creditsRequired + creditsAssigned + creditsFulfilled;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 138
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/ReadOnlyRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Unmodifiable view of a requirement."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface ReadOnlyRequirement {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the requirement code of the requirement"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    RequirementCode getRequirementCode();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the name of the requirement."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Title getTitle();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits of the requirement."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Credits getCredits();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits required for the requirement."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    int getCreditsRequired();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits assigned for the requirement."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    int getCreditsAssigned();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the credits fulfilled for the requirement."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    int getCreditsFulfilled();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the modules in this requirement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if {@code otherRequirement} is the same requirement as this."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The check is done by checking the requirement code, which basically represents the identity"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * of the requirement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean isSameRequirement(Requirement otherRequirement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a boolean value to indicate whether the requirement is already fulfilled."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if requirement is fulfilled (credits are fulfilled), else return false."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean isFulfilled();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 60
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/Requirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * The Requirement class contains the data required at the requirement level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A Requirement has a RequirementCode attribute, a Title attribute, a Credits attribute"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * and a list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Guarantees: immutable, field values are validated, non-null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Requirement implements ReadOnlyRequirement {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final RequirementCode requirementCode; // unique requirement code of the requirement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Title title; // title of the requirement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Credits credits; // credit information for the requirement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList modules \u003d new UniqueModuleList(); // list of modules associated with requirement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Creates a {@code Requirement} object with given {@code requirementCode}, {@code title}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * and {@code credits} and a default empty modules list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param requirementCode RequirementCode of the requirement."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param title           Title of the requirement."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param credits         Credits of the requirement."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(RequirementCode requirementCode, Title title, Credits credits) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(requirementCode, title, credits);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Creates a {@code Requirement} object with given {@code requirementCode}, {@code title}, {@code credits} and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * a list of {@code modules}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param requirementCode RequirementCode of the requirement."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param title           Title of the requirement."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param credits         Credits of the requirement."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param modules         List of modules belonging in the requirement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(RequirementCode requirementCode, Title title, Credits credits, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(requirementCode, title, credits, modules);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d computeCredits(credits, modules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        resetModules(modules);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Creates a requirement by making a copy from an existing requirement {@code toBeCopied}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param toBeCopied Requirement to copy from."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(ReadOnlyRequirement toBeCopied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d toBeCopied.getRequirementCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d toBeCopied.getTitle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d toBeCopied.getCredits();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        resetModules(toBeCopied.getModuleList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // requirement-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The list must not contain duplicate modules."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // module-level operations"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if all modules in {@code modules} with the same identity as {@code module} exists in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean hasModules(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return modules.contains(moduleList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a {@code module} to the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.add(module);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Adds a list of {@code Module}s; {@code modules} to the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * The modules must not already exist in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.modules.add(modules);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //@@author yjskrs"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code module} from this {@code Requirement}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The {@code module} must exist in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.remove(module);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes a list of {@code Module}s; {@code modules} from the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The modules must already exist in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.remove(modules);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementCode getRequirementCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirementCode;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsRequired() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return credits.getCreditsRequired();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsAssigned() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return credits.getCreditsAssigned();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getCreditsFulfilled() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return credits.getCreditsFulfilled();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean isSameRequirement(Requirement otherRequirement) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (otherRequirement \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this \u003d\u003d otherRequirement"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || this.requirementCode.equals(otherRequirement.requirementCode);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return credits.isFulfilled();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Computes the number of credits fulfilled by the list of modules. Returns an integer."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Credits computeCredits(Credits credits, List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(credits, moduleList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int creditsAssigned \u003d 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int creditsFulfilled \u003d 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            creditsAssigned +\u003d module.getCredits().toInteger();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (module.isDone()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                creditsFulfilled +\u003d module.getCredits().toInteger();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Credits(credits.getCreditsRequired(), creditsAssigned, creditsFulfilled);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode code \u003d getRequirementCode();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title title \u003d getTitle();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credits \u003d getCredits();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        builder"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(\"Requirement Code: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(code)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(\", Title: \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(title)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(\", Credits: \")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .append(credits);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof Requirement // check properties, takes care of null other"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 requirementCode.equals(((Requirement) other).requirementCode)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 title.equals(((Requirement) other).title)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 credits.equals(((Requirement) other).credits)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 modules.equals(((Requirement) other).modules));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 233,
      "nathanaelseen": 21
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/RequirementCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Requirement\u0027s requirement code in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Auto-generated based on algorithm."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Guarantees: immutable and non-null."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class RequirementCode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Requirement Code provided for the requirement is invalid!\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"It should only contain uppercase alphabets and/or integers and should not be blank.\\ne.g. UE1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Requirement Code should have alphabets followed by some digits."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[A-Z0-9]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String STRIP_DIGITS_REGEX \u003d \"[0123456789]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String STRIP_ALPHABETS_REGEX \u003d \"\\\\D+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code requirementCode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param value A requirement code string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public RequirementCode(String value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidRequirementCode(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if the given string {@code test} is a valid RequirementCode."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidRequirementCode(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if {@code otherCode} has same starting alphabets as this."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasSameAlphabets(RequirementCode otherCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(otherCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return otherCode.getAlphabets().equals(getAlphabets());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the first starting alphabets of the requirement code."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String getAlphabets() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return value.replaceAll(STRIP_DIGITS_REGEX, \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the identifying number of the requirement code."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String number \u003d value.replaceAll(STRIP_ALPHABETS_REGEX, \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Integer.parseInt(number);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof RequirementCode // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((RequirementCode) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 35,
      "teriaiw": 2,
      "yjskrs": 34,
      "nathanaelseen": 12
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Requirement\u0027s title."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Guarantees: immutable, non-null and is valid as declared by {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Title provided for requirement is invalid!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"Title should not start with a space, should not be blank and must contain at least one alphabet.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // The first character of the requirement title must not be a whitespace (\" \")."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // The title must not contain only numbers or be blank."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param value A valid title string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Title(String value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        checkArgument(isValidTitle(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if the given string {@code test} is a valid title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object, else check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof Title \u0026\u0026 value.equals(((Title) other).value)); // check same type and value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 58
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/UniqueRequirementList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.DuplicateRequirementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.RequirementNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A list of requirements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A requirement is considered unique by comparing using {@code Requirement#isSameRequirement}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * As such, adding and updating of requirements uses Requirement#isSameRequirement(Requirement) for equality"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * so as to ensure that the requirement being added or updated is unique in terms of requirement code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * @see Requirement#isSameRequirement(Requirement)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueRequirementList implements Iterable\u003cRequirement\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cRequirement\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cRequirement\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Comparator\u003cRequirement\u003e compareByFulfilledCriteria \u003d (Requirement r1, Requirement r2) -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        !r1.isFulfilled() \u0026\u0026 r2.isFulfilled() ? 0 : 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if the list contains an equivalent requirement to {@code toCheck}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean contains(Requirement toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRequirement);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a requirement if the list contains an equivalent {@code Requirement};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * which has requirement code; {@code requirementCode}, and returns an"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Optional.empty} if otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cRequirement\u003e getByRequirementCode(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(requirementCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .filter(requirement -\u003e requirement.getRequirementCode().equals(requirementCode))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a list of requirement; {@code List\u003cRequirement\u003e} of all requirements in the internal list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * which contains the specified module; {@code module}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public List\u003cRequirement\u003e getByModule(Module module) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .filter(requirement -\u003e requirement.hasModule(module))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a {@code requirement} to the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must not already exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DuplicateRequirementException If a duplicate requirement exists in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add(Requirement toAdd) throws DuplicateRequirementException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        //FXCollections.sort(internalList, compareByFulfilledCriteria);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces all requirements with {@code replacement}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(UniqueRequirementList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        //FXCollections.sort(internalList, compareByFulfilledCriteria);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of this list with the list {@code requirements}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The {@code requirements} list must not contain duplicate requirements."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DuplicateRequirementException If a duplicate requirement exists in the list to set."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(List\u003cRequirement\u003e requirements) throws DuplicateRequirementException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(requirements);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!requirementsAreUnique(requirements)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(requirements);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        //FXCollections.sort(internalList, compareByFulfilledCriteria);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the requirement {@code target} in the list with {@code editedRequirement}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws RequirementNotFoundException If the target requirement does not exist."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement(Requirement target, Requirement editedRequirement) throws RequirementNotFoundException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedRequirement);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new RequirementNotFoundException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!target.isSameRequirement(editedRequirement) \u0026\u0026 contains(editedRequirement)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.set(index, editedRequirement);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        //FXCollections.sort(internalList, compareByFulfilledCriteria);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes the requirement {@code toRemove} from the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must exist in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws RequirementNotFoundException If the requirement to remove does not exist."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove(Requirement toRemove) throws RequirementNotFoundException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new RequirementNotFoundException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Iterator\u003cRequirement\u003e iterator() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if {@code requirements} list contains only unique requirements."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private boolean requirementsAreUnique(List\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (int i \u003d 0; i \u003c requirements.size() - 1; i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c requirements.size(); j++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                if (requirements.get(i).isSameRequirement(requirements.get(j))) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the number of requirements that are fulfilled."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String countFulfilled() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        long count \u003d internalList.stream().filter(Requirement::isFulfilled).count();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return String.valueOf(count);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Checks if all requirements have been fulfilled."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean areAllFulfilled() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Long.parseLong(countFulfilled()) \u003d\u003d internalList.size();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // check if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof UniqueRequirementList"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueRequirementList) other).internalList));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 178,
      "nathanaelseen": 26
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/exceptions/DuplicateRequirementException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation will result in duplicate requirements with the same name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class DuplicateRequirementException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public DuplicateRequirementException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(\"Operation would result in duplicate requirements\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 10
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/exceptions/RequirementNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation is unable to find the specified requirement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 7
    }
  },
  {
    "path": "src/main/java/igrad/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Contains utility methods for populating {@code CourseBook} with sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static List\u003cModule\u003e getSampleModules() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return new ArrayList\u003cModule\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Software Engineering\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"CS2103T\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y1S1\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"A+\"))));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Introduction to Operating Systems\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"CS2106\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y2S2\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"A+\"))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Digital Storytelling\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"NM3230\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y2S2\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"B\"))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Quantitative Reasoning\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"GER1000\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y1S1\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"B+\"))));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Programming Methodology I\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"CS1101S\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y1S1\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"C+\"))));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Discrete Structures\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"CS1231\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y1S1\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"C+\"))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Linear Algebra I\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"MA1101R\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y1S1\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"B+\"))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Communicating in the Information Age\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"ES2660\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y2S1\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"B\"))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Introduction to Human-Computer Interaction Design\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"NM2213\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y2S2\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"A\"))));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(new Module("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Title(\"Darwin and Evolution\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new ModuleCode(\"GET1020\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    new Credits(\"4\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Semester(\"Y2S1\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    Optional.of(new Grade(\"B\"))));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static ArrayList\u003cRequirement\u003e getSampleRequirements() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        List\u003cModule\u003e modules \u003d getSampleModules();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        List\u003cModule\u003e csFoundationModules \u003d new LinkedList\u003cModule\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        csFoundationModules.add(modules.get(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        csFoundationModules.add(modules.get(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        csFoundationModules.add(modules.get(4));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        csFoundationModules.add(modules.get(5));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        List\u003cModule\u003e unrestrictedElectivesModules \u003d new LinkedList\u003cModule\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        unrestrictedElectivesModules.add(modules.get(2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        unrestrictedElectivesModules.add(modules.get(8));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        List\u003cModule\u003e generalEducationModules \u003d new LinkedList\u003cModule\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        generalEducationModules.add(modules.get(3));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        generalEducationModules.add(modules.get(9));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Requirement csFoundation \u003d new Requirement("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new RequirementCode(\"CF0\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Title(\"CS Foundation\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Credits(\"32\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            csFoundationModules);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Requirement unrestrictedElectives \u003d new Requirement("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new RequirementCode(\"UE0\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Title(\"Unrestricted Electives\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Credits(\"32\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            unrestrictedElectivesModules);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Requirement generalEducation \u003d new Requirement("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new RequirementCode(\"GE0\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Title(\"General Education\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new igrad.model.requirement.Credits(\"20\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            generalEducationModules);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return new ArrayList\u003cRequirement\u003e() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(csFoundation);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(unrestrictedElectives);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                add(generalEducation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static CourseInfo getSampleCourseInfo(List\u003cModule\u003e moduleList, List\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e name \u003d Optional.of(new Name(\"Computer Science\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cigrad.model.course.Credits\u003e credits \u003d CourseInfo.computeCredits(requirementList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d CourseInfo.computeSemesters(Optional.of(new Semesters(\"5\")), moduleList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    //@@author dargohzy"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static Avatar getSampleAvatar() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return Avatar.getSampleAvatar();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static Path getSampleCourseBookFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return Paths.get(\"data\", \"coursebook.json\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static Path getSampleBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return Paths.get(\"data\", \"backup_coursebook.json\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static ReadOnlyCourseBook getSampleCourseBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        CourseBook sampleCourseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            sampleCourseBook.addModule(sampleModule);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        for (Requirement sampleRequirement : getSampleRequirements()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            sampleCourseBook.addRequirement(sampleRequirement);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        CourseInfo courseInfo \u003d getSampleCourseInfo(getSampleModules(), getSampleRequirements());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sampleCourseBook.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return sampleCourseBook;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static ReadOnlyCourseBook getEmptyCourseBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        CourseBook emptyCourseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return emptyCourseBook;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static UserPrefs getSampleUserPrefs() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UserPrefs sampleUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sampleUserPrefs.setGuiSettings(new GuiSettings());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sampleUserPrefs.setCourseBookFilePath(getSampleCourseBookFilePath());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sampleUserPrefs.setBackupCourseBookFilePath(getSampleBackupCourseBookFilePath());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sampleUserPrefs.setAvatar(getSampleAvatar());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return sampleUserPrefs;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 187,
      "yjskrs": 1,
      "-": 1,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/main/java/igrad/services/GetRequestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The handler for all get requests"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class GetRequestManager extends RequestManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public GetRequestManager(String url) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(url);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Makes a request to the web-page specified by {@code url}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return the response converted to a string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String makeRequest() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.getResponseCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        BufferedReader in \u003d new BufferedReader("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new InputStreamReader(connection.getInputStream())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String inputLine;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            content.append(inputLine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.disconnect();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return content.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 45,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/JsonParsedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * A buffer for the Module class which additionally handles the parsing of a JSON response string."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class JsonParsedModule {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String credits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public JsonParsedModule(String title, String moduleCode, String credits, String description,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            String prerequisite, String preclusion) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.prerequisite \u003d prerequisite;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.preclusion \u003d preclusion;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses a JSON response string. This function is rudimentary and can only handle"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * single-level JSON strings with no nesting."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param data A JSON response string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return a JsonParsedModule object with {@code title},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code moduleCode},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code credits} and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code description} attributes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static JsonParsedModule initJsonParsedModule(String data) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String credits \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String prerequisite \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String preclusion \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        data \u003d data.substring(1, data.length() - 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] keyValueStrArray \u003d data.split(\"\\\",\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String keyValueStr : keyValueStrArray) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String[] keyValueStrSplit \u003d keyValueStr.split(\":\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String key \u003d keyValueStrSplit[0].substring(1, keyValueStrSplit[0].length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            while (i \u003c keyValueStrSplit.length) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (i \u003e 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    value.append(keyValueStrSplit[i]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String valueStr \u003d value.length() \u003e 0 ? value.toString().substring(1) : \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            switch (key) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleCode\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                moduleCode \u003d valueStr;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleTitle\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                title \u003d valueStr;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleCredit\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                credits \u003d valueStr;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleDescription\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                description \u003d valueStr;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"Prerequisite\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                prerequisite \u003d valueStr;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"Preclusion\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                preclusion \u003d valueStr;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new JsonParsedModule(title, moduleCode, credits, description, prerequisite, preclusion);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getCredits() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void addPreclusionEquivalents(String equivalents) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.preclusion +\u003d \" \" + equivalents;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return \"Module Title: \" + title"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nModule Code: \" + moduleCode"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nModular Credits: \" + credits"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nDescription: \" + description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 128,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/NusModsRequester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The client of NUSMods which makes requests from NUSMods API"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class NusModsRequester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NusModsRequester.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final String fileNotFoundMsg \u003d \"The specified module could not be\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" found on NUSMods. Please remove the \" + CliSyntax.FLAG_AUTO"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" flag and add the file manually\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A representation of the {@code Module} object, but all attributes are strings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode code of module to be fetched from NUSMods API"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return a {@code JsonParsedModule} object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static JsonParsedModule getModule(String moduleCode) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String academicYear \u003d getAcademicYear(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String urlPath \u003d getUrlPath(academicYear, moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        GetRequestManager getRequestManager \u003d new GetRequestManager(urlPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String res;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        JsonParsedModule jsonParsedModule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            res \u003d getRequestManager.makeRequest();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            jsonParsedModule \u003d JsonParsedModule.initJsonParsedModule(res);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return jsonParsedModule;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Formulates the URL to retrieve from"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param academicYear formatted as YYYY-YYYY"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode   {@code moduleCode}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static String getUrlPath(String academicYear, String moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Routes.NUS_MODS_ROOT + \"/\" + academicYear"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"/\" + Routes.NUS_MODS_MODULES_DIR + \"/\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + moduleCode.toUpperCase() + \"/\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + Routes.NUS_MODS_INDEX_JSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Gets the current academic year based on:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * startOfSem: 9th August"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * If the current date is before the startOfSem, get previous to current year,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * else, get current to next year."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static String getAcademicYear(Boolean getPrevYear) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Calendar startOfSem \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.MONTH, Calendar.AUGUST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.DAY_OF_MONTH, 9);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Date startOfSemDate \u003d startOfSem.getTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Date nowDate \u003d now.getTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (getPrevYear) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (nowDate.before(startOfSemDate)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 2) + \"-\" + (year - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 1) + \"-\" + (year - 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (nowDate.before(startOfSemDate)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 1) + \"-\" + year;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return year + \"-\" + (year - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 96,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/services/RequestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The Request Manager sets up the connection for its children"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public abstract class RequestManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected URL url;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected HttpURLConnection connection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param urlName url of the site to retrieve data from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public RequestManager(String urlName) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        url \u003d new URL(urlName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setRequestProperty(\"Content-Type\", \"application/json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setConnectTimeout(1000);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 27,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/Routes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Contains NUSMods path and file names."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Routes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_ROOT \u003d \"https://api.nusmods.com\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_INDEX_JSON \u003d \"index.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_MODULES_DIR \u003d \"modules\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 13,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/exceptions/ServiceException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents an error which occurs during execution of a {@code Request}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ServiceException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ServiceException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ServiceException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 16,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/storage/CourseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a storage for {@link CourseBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface CourseBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns CourseBook data as a {@link ReadOnlyCourseBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see #getCourseBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Saves the given {@link ReadOnlyCourseBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param courseBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see #saveCourseBook(ReadOnlyCourseBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 46,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedCourseInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_COURSE_NOT_SET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Jackson-friendly version of {@link CourseInfo}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class JsonAdaptedCourseInfo {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Course Info\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private String semesters;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code JsonAdaptedCourseInfo} with the given module details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public JsonAdaptedCourseInfo(@JsonProperty(\"name\") String name, @JsonProperty(\"semesters\") String semesters) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d semesters;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Converts a given {@code CourseInfo} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public JsonAdaptedCourseInfo(CourseInfo source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d source.getName().isPresent() ? source.getName().get().value : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d source.getSemesters().isPresent() ? source.getSemesters().get().toString() : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code CourseInfo} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo toModelType(List\u003cModule\u003e moduleList, List\u003cRequirement\u003e requirementList)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Course name can be null (in the event that the user hasn\u0027t run course add command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (name !\u003d null \u0026\u0026 !Name.isValidName(name)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Optional\u003cName\u003e modelName \u003d name !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? Optional.of(new Name(name))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Number of semesters can be null if user has not set up"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (semesters !\u003d null \u0026\u0026 !Semesters.isValidSemesters(semesters)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new IllegalValueException(Semesters.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Optional\u003cSemesters\u003e modelSemesters \u003d semesters !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? Optional.of(new Semesters(semesters))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * However, if course name is null (Optional.empty()), but we still have modules/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * requirements in the course book, that\u0027s an invalid state and we have to throw an IllegalValueException."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (modelName.isEmpty() \u0026\u0026 modelSemesters.isEmpty() \u0026\u0026 (!moduleList.isEmpty() || !requirementList.isEmpty())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new IllegalValueException(MESSAGE_COURSE_NOT_SET);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Else if everything (the state) of the course info is valid, we can then proceed to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * compute cap (if applicable; course name and semesters exists)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Optional\u003cCap\u003e cap \u003d modelName.isPresent()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? CourseInfo.computeCap(moduleList, requirementList)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Also, we proceed to compute credits (required and fulfilled) (if applicable; course name and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * semesters exists)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Optional\u003cCredits\u003e credits \u003d modelName.isPresent()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? CourseInfo.computeCredits(requirementList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Proceed to compute semesters (total and remaining) (if applicable; course name and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * semesters exists)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Optional\u003cSemesters\u003e semesters \u003d modelName.isPresent()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? CourseInfo.computeSemesters(modelSemesters, moduleList)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : modelSemesters;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(modelName, cap, credits, semesters);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 106
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"title\") String name, @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                             @JsonProperty(\"credits\") String credits, @JsonProperty(\"memo\") String memo,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                             @JsonProperty(\"semester\") String semester, @JsonProperty(\"grade\") String grade) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleCode \u003d source.getModuleCode().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        credits \u003d source.getCredits().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        semester \u003d source.getSemester().isPresent() ? source.getSemester().get().value : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        grade \u003d source.getGrade().isPresent() ? source.getGrade().get().value : null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (semester !\u003d null \u0026\u0026 !Semester.isValidSemester(semester)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (grade !\u003d null \u0026\u0026 !Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Optional\u003cSemester\u003e modelSemester \u003d semester !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? Optional.of(new Semester(semester)) : Optional.empty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Optional\u003cGrade\u003e modelGrade \u003d grade !\u003d null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? Optional.of(new Grade(grade)) : Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Module(modelTitle, modelModuleCode, modelCredits, modelSemester, modelGrade);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 110,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedRequirement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Jackson-friendly version of {@link Requirement}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "class JsonAdaptedRequirement {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Requirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String requirementCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final List\u003cString\u003e moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequirement} with the given requirement details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonAdaptedRequirement(@JsonProperty(\"requirementCode\") String requirementCode,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                  @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                  @JsonProperty(\"credits\") String credits,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                  @JsonProperty(\"modules\") List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d requirementCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (moduleCodes !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.moduleCodes.addAll(moduleCodes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts a given {@code Requirement} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonAdaptedRequirement(Requirement source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirementCode \u003d source.getRequirementCode().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        credits \u003d String.valueOf(source.getCreditsRequired());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleCodes.addAll(source.getModuleList().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(module -\u003e module.getModuleCode().toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts this Jackson-friendly adapted requirement object into the model\u0027s {@code Requirement} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted requirement."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement toModelType(List\u003cModule\u003e moduleList) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check for valid requirement code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (requirementCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                RequirementCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!RequirementCode.isValidRequirementCode(requirementCode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check for valid title"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // check for valid credits"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final RequirementCode modelRequirementCode \u003d new RequirementCode(requirementCode);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final Title modelName \u003d new Title(title);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final List\u003cModule\u003e modelModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelModules.addAll(moduleList.stream() // for all modules"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .filter(module -\u003e moduleCodes.stream() // find module existing in moduleCodes"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                .anyMatch(moduleCode -\u003e module.hasModuleCodeOf(new ModuleCode(moduleCode))))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Requirement(modelRequirementCode, modelName, modelCredits, modelModules);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 104,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonCourseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A class to access CourseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonCourseBookStorage implements CourseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCourseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public JsonCourseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return readCourseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Similar to {@link #readCourseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cJsonSerializableCourseBook\u003e jsonCourseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            filePath, JsonSerializableCourseBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!jsonCourseBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.of(jsonCourseBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        saveCourseBook(courseBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Similar to {@link #saveCourseBook(ReadOnlyCourseBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCourseBook(courseBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "yjskrs": 73,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonSerializableCourseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * An Immutable CourseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "@JsonRootName(value \u003d \"coursebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "class JsonSerializableCourseBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REQUIREMENT \u003d \"Requirement list contains duplicate requirement(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final JsonAdaptedCourseInfo courseInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final List\u003cJsonAdaptedRequirement\u003e requirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code JsonSerializableCourseBook} with the given modules."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public JsonSerializableCourseBook(@JsonProperty(\"courseInfo\") JsonAdaptedCourseInfo courseInfo,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                                      @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      @JsonProperty(\"requirements\") List\u003cJsonAdaptedRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseInfo \u003d courseInfo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts a given {@code ReadOnlyCourseBook} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCourseBook}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonSerializableCourseBook(ReadOnlyCourseBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseInfo \u003d new JsonAdaptedCourseInfo(source.getCourseInfo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.addAll(source.getModuleList().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(JsonAdaptedModule::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.addAll(source.getRequirementList().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(JsonAdaptedRequirement::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts this course book into the model\u0027s {@code CourseBook} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (courseBook.hasModule(module)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addModule(module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d courseBook.getModuleList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (JsonAdaptedRequirement jsonAdaptedRequirement : requirements) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Requirement requirement \u003d jsonAdaptedRequirement.toModelType(moduleList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (courseBook.hasRequirement(requirement)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REQUIREMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d courseBook.getRequirementList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * If the modules and all requirements are valid (from storage), we now populate course info"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * from storage. However, to do that, we need a list of all {@code Module} in the system"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to calculate the CAP (i.e, those modules that has grade would be added to cumulative CAP"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * of course info), the total credits fulfilled, and we also need a list of all {@code Requirement}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * to compute the total credits required for the course."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.addCourseInfo(courseInfo.toModelType(moduleList, requirementList));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 36,
      "-": 34,
      "nathanaelseen": 29
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return JsonUtil.readJsonFile(filePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 5,
      "-": 37,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface Storage extends CourseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 30,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Manages storage of CourseBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private CourseBookStorage courseBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public StorageManager(CourseBookStorage courseBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBookStorage \u003d courseBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CourseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookStorage.getCourseBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return readCourseBook(courseBookStorage.getCourseBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookStorage.readCourseBook(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        saveCourseBook(courseBook, courseBookStorage.getCourseBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBookStorage.saveCourseBook(courseBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 76
    }
  },
  {
    "path": "src/main/java/igrad/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 5,
      "-": 29,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/AvatarImage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * An UI component that displays the image of the {@code Avatar}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class AvatarImage extends Image {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AvatarImage.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String imgPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String avatarName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private int rowIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private int colIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public AvatarImage(String imgPath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(imgPath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        logger.info(\"HERE HERE\" + imgPath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.imgPath \u003d imgPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public AvatarImage(String imgPath, String avatarName, int rowIndex, int colIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(imgPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.imgPath \u003d imgPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.avatarName \u003d avatarName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.rowIndex \u003d rowIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.colIndex \u003d colIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the row index of an image in a grid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getRowIndex() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return rowIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the column index of an image in a grid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getColIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return colIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String getAvatarName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.avatarName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 35,
      "dargohzy": 7,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/main/java/igrad/ui/AvatarSelectionPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class AvatarSelectionPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final String FXML \u003d \"AvatarSelectionPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to iGrad.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AvatarSelectionPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private GridPane avatarGridPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label avatarLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private List\u003cAvatarImage\u003e avatarImgList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public AvatarSelectionPanel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        initAvatarImgList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        showAvatarImgList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Initialises an internal list of {@code AvatarImage}, maintained by this class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void initAvatarImgList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cAvatar\u003e avatarList \u003d Avatar.getAvatarList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            for (int j \u003d 0; j \u003c 3; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                String avatarName \u003d avatarList.get(index).getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                AvatarImage avatarImg \u003d new AvatarImage("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \"/avatars/\" + avatarName + \".png\", avatarName, i, j);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                avatarImgList.add(avatarImg);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Displays the Avatar images in a {@code GridPane}, in the panel."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void showAvatarImgList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (AvatarImage avatarImg : avatarImgList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            StackPane pane \u003d new StackPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Label avatarName \u003d new Label(avatarImg.getAvatarName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ImageView avatarDisplay \u003d new ImageView();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarDisplay.setFitHeight(60);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarDisplay.setFitWidth(60);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarDisplay.setImage(avatarImg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarName.setStyle(\"-fx-font-family: \u0027Calibri Light\u0027; -fx-font-size: 24; -fx-text-fill: white\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarName.setPadding(new Insets(100, 0, 0, 0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            StackPane.setAlignment(avatarName, Pos.BOTTOM_CENTER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            pane.getChildren().addAll(avatarDisplay, avatarName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            GridPane.setRowIndex(pane, avatarImg.getRowIndex());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            GridPane.setColumnIndex(pane, avatarImg.getColIndex());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarGridPane.getChildren().add(pane);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 68,
      "dargohzy": 15,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException | ParseException | IOException | ServiceException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ParseException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            IOException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ServiceException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "yjskrs": 6,
      "-": 68,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/ui/CommandReceivedPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "// @@author dargohzy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Panel showing the last command input into the system."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class CommandReceivedPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"CommandReceivedPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label commandReceived;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public CommandReceivedPanel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Sets the string in the commandReceived box."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setCommandReceived(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandReceived.setText(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 29
    }
  },
  {
    "path": "src/main/java/igrad/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f09-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // Cheatsheet command formats"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String COURSE_ADD \u003d \"course set n/COURSE_NAME s/TOTAL_SEMESTERS\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String COURSE_EDIT \u003d \"course edit n/COURSE_NAME s/TOTAL_SEMESTERS\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String COURSE_ACHIEVE \u003d \"course achieve c/DESIRED_CAP\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String COURSE_DELETE \u003d \"course delete\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String REQUIREMENT_ADD \u003d \"requirement add t/REQUIREMENT_TITLE u/MCS_REQUIRED\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String REQUIREMENT_EDIT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \"requirement edit REQUIREMENT_CODE [t/REQUIREMENT_TITLE] [u/MCS_REQUIRED]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String REQUIREMENT_ASSIGN \u003d \"requirement un/assign REQUIREMENT_CODE n/MODULE_CODE …\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String REQUIREMENT_DELETE \u003d \"requirement delete REQUIREMENT_CODE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String MODULE_ADD \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \"module add n/MODULE_CODE t/MODULE_TITLE u/MCs [s/SEMESTER]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String MODULE_EDIT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \"module edit MODULE_CODE [n/MODULE_CODE] [t/MODULE_TITLE] [u/MCs] [s/SEMESTER]\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String MODULE_DONE \u003d \"module done MODULE_CODE [g/GRADE] [s/SEMESTER]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String MODULE_DELETE \u003d \"module delete MODULE_CODE\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String EXPORT \u003d \"export\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Hyperlink hyperlink;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label courseAdd;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label courseEdit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label courseDelete;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label courseAchieve;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementAdd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementEdit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementDelete;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementAssign;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label moduleAdd;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label moduleEdit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label moduleDelete;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label moduleDone;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label undo;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label export;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label exit;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        hyperlink.setText(\"iGrad User Guide\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        setLabels();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Opens the iGrad User Guide in the user\u0027s default browser."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void openUserGuide() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                Desktop.getDesktop().browse(new URI(USERGUIDE_URL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            } catch (IOException e1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            } catch (URISyntaxException e1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Sets the commands and their respective messages."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setLabels() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        courseAdd.setText(COURSE_ADD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        courseEdit.setText(COURSE_EDIT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        courseAchieve.setText(COURSE_ACHIEVE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        courseDelete.setText(COURSE_DELETE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementAdd.setText(REQUIREMENT_ADD);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementEdit.setText(REQUIREMENT_EDIT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementAssign.setText(REQUIREMENT_ASSIGN);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementDelete.setText(REQUIREMENT_DELETE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleAdd.setText(MODULE_ADD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleEdit.setText(MODULE_EDIT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleDone.setText(MODULE_DONE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleDelete.setText(MODULE_DELETE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        undo.setText(UNDO);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        export.setText(EXPORT);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        exit.setText(EXIT);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 207,
      "yjskrs": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane avatarSelectionPanelPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane requirementListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private AvatarSelectionPanel avatarSelectionPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private RequirementListPanel requirementListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private ProgressSidePanel progressSidePanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private CommandReceivedPanel commandReceivedPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private VBox moduleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private VBox requirementList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private VBox progressPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private VBox commandReceivedPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane modularCreditsPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private HBox mainContainer;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label creditsCount;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        *//*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * is fixed in later version of SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * the TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Fills and displays the window of all the {@code Avatar} placeholders, when in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Avatar} selection state."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void displayAvatarSelectionPanel(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanelPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        mainContainer.getChildren().removeAll(moduleList, requirementList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        mainContainer.getChildren().add(avatarSelectionPanelPlaceholder);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        logger.info(\"Avatar not found. Displaying avatar selection screen instead.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanel \u003d new AvatarSelectionPanel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanelPlaceholder.getChildren().add(avatarSelectionPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandReceivedPanel \u003d new CommandReceivedPanel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay \u003d new ResultDisplay(model.getAvatar());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"Choose an animal guide by entering the NAME of the animal\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displayCommandBox(model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Fills up and displays/refreshes all the panels in the module management state."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void displayMainPanel(Model model) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        mainContainer.getChildren().remove(avatarSelectionPanelPlaceholder);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleListPanelPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requirementListPanelPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleList.getChildren().add(moduleListPanelPlaceholder);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requirementList.getChildren().add(requirementListPanelPlaceholder);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!mainContainer.getChildren().contains(requirementList)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            mainContainer.getChildren().add(requirementList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!mainContainer.getChildren().contains(moduleList)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            mainContainer.getChildren().add(moduleList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requirementListPanel \u003d new RequirementListPanel(logic.getRequirementList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requirementListPanelPlaceholder.getChildren().add(requirementListPanel.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandReceivedPanel \u003d new CommandReceivedPanel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandReceivedPanelPlaceholder.getChildren().add(commandReceivedPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleListPanelPlaceholder.setPrefHeight(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requirementListPanelPlaceholder.setPrefHeight(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay \u003d new ResultDisplay(model.getAvatar());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!model.isCourseNameSet()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            resultDisplay.setFeedbackToUser(Messages.MESSAGE_ADD_COURSE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            resultDisplay.setFeedbackToUser(Messages.MESSAGE_WELCOME_BACK);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displayCommandBox(model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        displayProgressPanel(model);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // @@author dargohzy"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Fills up and displays/refreshes the the placeholders of the side panels (Modular credits info, CAP info)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void displayProgressPanel(Model model) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        progressSidePanel \u003d new ProgressSidePanel(model);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        progressPanelPlaceholder.getChildren().add(progressSidePanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Refreshes the result display (UI component) with information from {@code CommandResult}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void refreshResultDisplay(CommandResult commandResult) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Refreshes the result display (UI component) to reflect an error from error String."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void refreshResultDisplayError(String errorMessage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        resultDisplay.setFeedbackToUser(errorMessage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // @@author dargohzy"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Refreshes the avatar expression on the result display (UI component)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void refreshResultDisplayAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        resultDisplay.setAvatar(avatar);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Gets the avatar with the appropriate expression to the success of the command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    Avatar getAvatar(Model model, boolean isSuccessful) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return model.getAvatar();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Avatar currentAvatar \u003d model.getAvatar();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Avatar sadAvatar \u003d new Avatar(currentAvatar.getName() + \"-sad\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return sadAvatar;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Refreshes the last command received in the last command received panel."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void refreshCommandReceived(String command) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandReceivedPanel.setCommandReceived(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Sets the progress panel on startup."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void refreshProgressPanel(Model model) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        progressSidePanel.updateProgress(model);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Fills up and displays/refreshes the placeholder of the command box."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void displayCommandBox(Model model) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(c -\u003e executeCommand(c, model));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        primaryStage.setMaxHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Displays the sad (loading) version of the avatar when loading"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void handleStartLoading(Avatar avatar) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Avatar sadAvatar \u003d new Avatar(avatar.getName() + \"-sad\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        resultDisplay.setAvatar(sadAvatar);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void handleStopLoading(Avatar avatar) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        resultDisplay.setAvatar(avatar);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private CommandResult executeCommand(String commandText, Model model) throws CommandException,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ParseException,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        IOException,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ServiceException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        refreshCommandReceived(commandText);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            CommandResult commandResult;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            boolean isSelectingAvatar \u003d model.isSampleAvatar();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (isSelectingAvatar) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // If user has not selected avatar, get her to do so."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                commandResult \u003d logic.executeAvatar(commandText);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Now we\u0027ve already selected Avatar, remove Avatar selection panel to display the Main module panel"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                displayMainPanel(model);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Else, let user execute commands normally."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Avatar avatar \u003d getAvatar(model, true);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplayAvatar(avatar);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplay(commandResult);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshProgressPanel(model);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (CommandException | ParseException | IOException | ServiceException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Avatar avatar \u003d getAvatar(model, false);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplayAvatar(avatar);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplayError(e.getMessage());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 75,
      "dargohzy": 157,
      "yjskrs": 10,
      "-": 74,
      "nathanaelseen": 64
    }
  },
  {
    "path": "src/main/java/igrad/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "// @@author dargohzy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * An UI component that displays information about {@code Module}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CourseBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private HBox moduleCardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //       id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        title.setText(module.getTitle().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleCode.setText(module.getModuleCode().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        credits.setText(module.getCredits().value + \" MCs\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        credits.getStyleClass().add(\"module-card-default-present\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (module.getSemester().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            semester.setText(module.getSemester().get().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            semester.getStyleClass().add(\"module-card-default-present\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (module.getGrade().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            grade.setText(module.getGrade().get().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            grade.getStyleClass().add(\"module-card-default-present\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public int getDisplayedIndex() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.displayedIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.displayedIndex \u003d\u003d card.displayedIndex"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 76,
      "yjskrs": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/igrad/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 45,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/ui/ProgressSidePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.model.course.Cap.MAX_CAP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Panel containing the progress (MCs, modules completed, requirements completed, CAP info) of the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ProgressSidePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String FXML \u003d \"ProgressSidePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private int totalCreditsRequired;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private int totalCreditsFulfilled;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private double progressBarPercentage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label courseNameLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label creditsCount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label inspirationalQuote;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label currentCapLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label semesterLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ProgressSidePanel(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        updateProgress(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Updates the progress panel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void updateProgress(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String quote \u003d model.getRandomQuoteString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        inspirationalQuote.setText(\"\\\"\" + quote + \"\\\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CourseInfo courseInfo \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cName\u003e courseName \u003d courseInfo.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d courseInfo.getCredits();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d courseInfo.getCap();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d courseInfo.getSemesters();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseName.ifPresentOrElse("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            name -\u003e courseNameLabel.setText(name.value), () -\u003e courseNameLabel"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .setText(\"Your Course.\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String creditsCountString \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String semestersCountString \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (credits.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            progressBarPercentage \u003d (double) credits.get().getCreditsFulfilled()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                / credits.get().getCreditsRequired();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            progressBar.setProgress(progressBarPercentage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            creditsCountString \u003d credits.get().getCreditsFulfilled()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                + \" out of \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                + credits.get().getCreditsRequired() + \" MCs completed\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            progressBar.setProgress(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            creditsCountString \u003d \"- MCs\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (semesters.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            int remainingSemesters \u003d semesters.get().getRemainingSemesters();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            semestersCountString \u003d String.valueOf(remainingSemesters);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            semestersCountString \u003d \"-\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap.ifPresentOrElse("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            x -\u003e currentCapLabel.setText(x + \"/\" + MAX_CAP), () -\u003e currentCapLabel"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                .setText(\"-\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsCount.setText(creditsCountString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesterLabel.setText(semestersCountString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Returns the string to be displayed as progress."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String countFormat(int completed, int total) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (total \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return \"-/-\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            return completed + \"/\" + total;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Returns the decimal formatted string required for progress display."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String decimalFormat(double value) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 51,
      "dargohzy": 36,
      "nathanaelseen": 35
    }
  },
  {
    "path": "src/main/java/igrad/ui/RequirementCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "// @@author dargohzy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Shows requirements, where each {@code requirement} is a list of {@code Module}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class RequirementCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"RequirementListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Requirement requirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label requirementTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label creditsCount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private FlowPane moduleCodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private HBox requirementCardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public RequirementCard(Requirement requirement, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.requirement \u003d requirement;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementCode.setText(requirement.getRequirementCode().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementTitle.setText(requirement.getTitle().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        int creditsFulfilled \u003d requirement.getCreditsFulfilled();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        int creditsRequired \u003d requirement.getCreditsRequired();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        int creditsAssigned \u003d requirement.getCreditsAssigned();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String creditsCountText \u003d creditsFulfilled"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + \" out of \" + creditsRequired"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + \" MCs fulfilled (\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + creditsAssigned + \" assigned)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (requirement.isFulfilled()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            requirementCardPane.getStyleClass().add(\"done\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        creditsCount.setText(creditsCountText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d requirement.getModuleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Label moduleCode \u003d new Label(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            moduleCode.getStyleClass().add(\"module-tag\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            moduleCodes.getChildren().add(moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "dargohzy": 70
    }
  },
  {
    "path": "src/main/java/igrad/ui/RequirementListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "// @@author dargohzy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * Panel showing the list of requirements entered."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class RequirementListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"RequirementListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(RequirementListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private ListView\u003cRequirement\u003e requirementListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public RequirementListPanel(ObservableList\u003cRequirement\u003e requirementList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementListView.setItems(requirementList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        requirementListView.setCellFactory(listView -\u003e new RequirementListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    class RequirementListViewCell extends ListCell\u003cRequirement\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        protected void updateItem(Requirement requirement, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            super.updateItem(requirement, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            if (empty || requirement \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                setGraphic(new RequirementCard(requirement, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 47,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private ImageView avatarDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ResultDisplay(Avatar avatar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.setAvatar(avatar);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String imgPath \u003d \"/avatars/\" + avatar.getName() + \".png\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        AvatarImage avatarImage \u003d new AvatarImage(imgPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarDisplay.setImage(avatarImage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 13,
      "yjskrs": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/igrad/ui/StatusBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "// @@author dargohzy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * A (permanent) top-panel that displays course status information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class StatusBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"StatusBar.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String courseName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane pane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label course;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public StatusBar() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.courseName \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        pane \u003d new StackPane();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        course.setText(\"Course:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        StackPane.setAlignment(course, Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        pane.getChildren().add(course);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Sets the course name inputted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setCourseName(String courseName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        course.setText(courseName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Checks if courseName is set."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.courseName.length() !\u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Returns the text that the label is current holding."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String getLabelText() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return course.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public StackPane getPane() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 65
    }
  },
  {
    "path": "src/main/java/igrad/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/igrad/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 1,
      "-": 10,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (model.isSampleAvatar()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                mainWindow.displayAvatarSelectionPanel(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                mainWindow.displayMainPanel(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 26,
      "yjskrs": 5,
      "-": 58,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 16,
      "yjskrs": 2,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/AvatarSelectionPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" stylesheets\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cGridPane"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            styleClass\u003d\"avatar-selection\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                text\u003d\"Welcome to iGrad\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                fx:id\u003d\"avatarLabel\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                styleClass\u003d\"title\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cHBox GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cGridPane"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    styleClass\u003d\"avatar-grid-pane\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    fx:id\u003d\"avatarGridPane\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    hgap\u003d\"100.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    vgap\u003d\"24.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 26,
      "dargohzy": 7
    }
  },
  {
    "path": "src/main/resources/view/CapPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"capPanel\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"mcSidePanel\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"143.0\" prefHeight\u003d\"50.0\" style\u003d\"-fx-font-size: 20;\" text\u003d\"C.A.P\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cImageView fitHeight\u003d\"35.0\" fitWidth\u003d\"37.0\" layoutX\u003d\"102.0\" layoutY\u003d\"8.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cImage url\u003d\"@../images/cap.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel layoutX\u003d\"127.0\" layoutY\u003d\"105.0\" style\u003d\"-fx-font-size: 15;\" text\u003d\"Current\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"96.0\" layoutY\u003d\"43.0\" prefHeight\u003d\"71.0\" prefWidth\u003d\"109.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               style\u003d\"-fx-font-size: 50;\" text\u003d\"4.24\" textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel layoutX\u003d\"185.0\" layoutY\u003d\"169.0\" style\u003d\"-fx-font-size: 15;\" text\u003d\"Target/Sem\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel layoutX\u003d\"59.0\" layoutY\u003d\"169.0\" style\u003d\"-fx-font-size: 15;\" text\u003d\"Goal\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel layoutX\u003d\"42.0\" layoutY\u003d\"123.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"4.00\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel layoutX\u003d\"185.0\" layoutY\u003d\"123.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"3.94\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 7,
      "dargohzy": 19
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cTextField"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               styleClass\u003d\"command-box\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "dargohzy": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CommandReceivedPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"100.0\" styleClass\u003d\"command-received-panel-container\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cGridPane styleClass\u003d\"command-received\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cLabel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        alignment\u003d\"TOP_LEFT\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        text\u003d\"Waiting for command...\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"commandReceived\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                       styleClass\u003d\"command-received-box\" wrapText\u003d\"true\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                       GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cInsets bottom\u003d\"16.0\" left\u003d\"16.0\" right\u003d\"16.0\" top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 10,
      "dargohzy": 17
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cfx:root maxHeight\u003d\"560.0\" maxWidth\u003d\"920.0\" minHeight\u003d\"560.0\" minWidth\u003d\"920.0\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cStackPane minWidth\u003d\"800.0\" prefWidth\u003d\"900.0\" styleClass\u003d\"help-window\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cGridPane styleClass\u003d\"help-window-panel-container\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                 \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                   \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"1.0\" prefWidth\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                   \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"814.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                 \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                 \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                   \u003cRowConstraints maxHeight\u003d\"-Infinity\" prefHeight\u003d\"40.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"1.0\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"96.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"1.0\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"96.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"1.0\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"96.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"1.0\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"25.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"25.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"1.0\" prefHeight\u003d\"1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRowConstraints prefHeight\u003d\"25.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                 \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel style\u003d\"-fx-font-size: 20; -fx-font-weight: 800; -fx-text-fill: #f27c36;\" text\u003d\"Commands\" wrapText\u003d\"true\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cHyperlink fx:id\u003d\"hyperlink\" onAction\u003d\"#openUserGuide\" style\u003d\"-fx-text-fill: #3b7ee2;\" text\u003d\"Hyperlink\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Hyperlink\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Course\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"2\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Requirement\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"4\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Module\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"6\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Undo\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"8\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Export\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"10\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel styleClass\u003d\"help-window-commands\" text\u003d\"Exit\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"12\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" spacing\u003d\"6.0\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"2\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"courseAdd\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"courseEdit\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"courseDelete\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"courseAchieve\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" spacing\u003d\"6.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"4\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"requirementAdd\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"requirementEdit\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"requirementDelete\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"requirementAssign\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" spacing\u003d\"6.0\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"6\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"moduleAdd\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"moduleEdit\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"moduleDelete\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cLabel fx:id\u003d\"moduleDone\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel fx:id\u003d\"undo\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"8\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel fx:id\u003d\"export\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"10\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cLabel fx:id\u003d\"exit\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"12\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"9\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"9\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"8\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"10\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"12\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cRegion maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" styleClass\u003d\"help-window-gridpane-divider\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 143,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"650.0\" minWidth\u003d\"1100.0\" maxWidth\u003d\"Infinity\" onCloseRequest\u003d\"#handleExit\" title\u003d\"iGrad\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cImage url\u003d\"@/images/iGrad_Shibu.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cVBox style\u003d\"-fx-background-color: #2a2a2a;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cHBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"mainContainer\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"main-window\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                \u003cVBox"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                        styleClass\u003d\"progress-panel-container\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                    fx:id\u003d\"progressPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                \u003cVBox fx:id\u003d\"commandReceivedPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                        \u003cInsets top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                \u003cInsets left\u003d\"16.0\" top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003cVBox"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                styleClass\u003d\"requirement-panel-container\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                fx:id\u003d\"requirementList\" alignment\u003d\"CENTER_LEFT\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                              HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003cVBox"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                styleClass\u003d\"module-panel-container\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                fx:id\u003d\"moduleList\" alignment\u003d\"CENTER_LEFT\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                              HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                \u003cInsets right\u003d\"16.0\" top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cStackPane"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"result-display-container\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"resultDisplayPlaceholder\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003cInsets bottom\u003d\"16.0\" top\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-box-container\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 39,
      "dargohzy": 18,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/McSidePanelIndicator.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"mcPanelPlaceholder\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"180.0\" prefWidth\u003d\"320.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            style\u003d\"-fx-background-color: #2a2a2a;\" styleClass\u003d\"mcSidePanel\" stylesheets\u003d\"DarkTheme.css\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"145.0\" layoutY\u003d\"139.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"27.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                           progress\u003d\"0.52\" scaleX\u003d\"5.0\" scaleY\u003d\"5.0\" styleClass\u003d\"progress-indicator\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cCircle fill\u003d\"#1f93ff00\" layoutX\u003d\"160.0\" layoutY\u003d\"114.0\" radius\u003d\"42.0\" stroke\u003d\"#2a2a2a\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                strokeWidth\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cCircle fill\u003d\"#2d2d2d\" layoutX\u003d\"160.0\" layoutY\u003d\"114.0\" radius\u003d\"36.0\" scaleX\u003d\"0.99\" scaleY\u003d\"0.99\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                stroke\u003d\"#2a2a2a\" strokeType\u003d\"INSIDE\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel fx:id\u003d\"creditsCount\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"124.0\" layoutY\u003d\"97.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"95.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               style\u003d\"-fx-font-size: 20;\" text\u003d\" 40/160\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cFont size\u003d\"41.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"120.0\" layoutY\u003d\"3.0\" prefHeight\u003d\"58.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               prefWidth\u003d\"104.0\" style\u003d\"-fx-font-size: 20;\" text\u003d\"MCs\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                \u003cFont name\u003d\"Calibri Light\" size\u003d\"42.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cImageView fitHeight\u003d\"58.0\" fitWidth\u003d\"55.0\" layoutX\u003d\"97.0\" layoutY\u003d\"4.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cImage url\u003d\"@../images/module.png\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 16,
      "dargohzy": 23,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cHBox"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"module-card-pane\" fx:id\u003d\"moduleCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cVBox styleClass\u003d\"module-card\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"1.5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cInsets bottom\u003d\"2\" left\u003d\"8\" right\u003d\"2\" top\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"module-code\" text\u003d\"\\$moduleCode\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cLabel wrapText\u003d\"true\" fx:id\u003d\"title\" styleClass\u003d\"title\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel styleClass\u003d\"module-card-default\" fx:id\u003d\"semester\" text\u003d\"SEMESTER\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cRegion styleClass\u003d\"vertical-divider\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel styleClass\u003d\"module-card-default\" fx:id\u003d\"credits\" text\u003d\"CREDITS\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cRegion styleClass\u003d\"vertical-divider\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel styleClass\u003d\"module-card-default\" fx:id\u003d\"grade\" text\u003d\"GRADE\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cInsets bottom\u003d\"6.0\" left\u003d\"6.0\" right\u003d\"6.0\" top\u003d\"6.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 14,
      "dargohzy": 9,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"module-panel\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" maxHeight\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "              VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/ListView\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "dargohzy": 8,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ProgressSidePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      styleClass\u003d\"progress-side-panel\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cHBox spacing\u003d\"4.0\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cImageView"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"grad-cap\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"gradCapImageView\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cLabel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        wrapText\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"course-name\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        text\u003d\"My Course\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"courseNameLabel\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cHBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    style\u003d\"-fx-border-color: #4d4d4d; -fx-border-width: 0 0 2 0;\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cLabel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        wrapText\u003d\"true\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"inspirational-quote\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    fx:id\u003d\"inspirationalQuote\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    text\u003d\"\u0026quot;Strive for progress, not perfection.\u0026quot;\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cVBox styleClass\u003d\"progress-content\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cLabel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"credits-count\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                fx:id\u003d\"creditsCount\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                text\u003d\"0 of 0 MCs completed\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cProgressBar"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"progress-bar\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    fx:id\u003d\"progressBar\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cLabel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"progress-title\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    text\u003d\"My Progress\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cGridPane hgap\u003d\"80.0\" vgap\u003d\"4.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            styleClass\u003d\"progress-label\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            text\u003d\"Semesters Left\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            fx:id\u003d\"semesterLabel\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            styleClass\u003d\"progress-value\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            text\u003d\"-\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            styleClass\u003d\"progress-label\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            text\u003d\"Current CAP\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    \u003cLabel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            fx:id\u003d\"currentCapLabel\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            styleClass\u003d\"progress-value\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            text\u003d\"-/5.0\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 66,
      "dargohzy": 11
    }
  },
  {
    "path": "src/main/resources/view/RequirementListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cHBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"requirement-card-pane\" fx:id\u003d\"requirementCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cVBox styleClass\u003d\"requirement-card\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"1.5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cInsets bottom\u003d\"2\" left\u003d\"8\" right\u003d\"2\" top\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cLabel fx:id\u003d\"requirementCode\" styleClass\u003d\"code\" text\u003d\"\\$moduleCode\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cLabel wrapText\u003d\"true\" fx:id\u003d\"requirementTitle\" styleClass\u003d\"title\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cLabel wrapText\u003d\"true\" fx:id\u003d\"creditsCount\" styleClass\u003d\"credits\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003cFlowPane"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                styleClass\u003d\"module-codes\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                fx:id\u003d\"moduleCodes\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cInsets bottom\u003d\"6.0\" left\u003d\"6.0\" right\u003d\"6.0\" top\u003d\"6.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\"--\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--      styleClass\u003d\"requirement-card\"--\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--    \u003cVBox styleClass\u003d\"inner\" HBox.hgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003cLabel--\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--                styleClass\u003d\"code\"--\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--                GridPane.rowIndex\u003d\"0\"--\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--                fx:id\u003d\"requirementCode\" text\u003d\"Label\"\u003e--\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003cLabel--\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--                wrapText\u003d\"true\"--\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            styleClass\u003d\"title\" GridPane.columnIndex\u003d\"0\"--\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            GridPane.rowIndex\u003d\"1\"--\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            fx:id\u003d\"requirementTitle\" text\u003d\"Label\"\u003e--\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003cLabel--\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            styleClass\u003d\"credits\"--\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            GridPane.rowIndex\u003d\"2\"--\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            fx:id\u003d\"creditsCount\" text\u003d\"Label\"\u003e--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003cFlowPane--\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            styleClass\u003d\"module-codes\"--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            GridPane.rowIndex\u003d\"3\"--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--            fx:id\u003d\"moduleCodes\"\u003e--\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--        \u003c/FlowPane\u003e--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--    \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c!--\u003c/HBox\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 55,
      "dargohzy": 10
    }
  },
  {
    "path": "src/main/resources/view/RequirementListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"requirement-panel\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cListView fx:id\u003d\"requirementListView\" maxHeight\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/ListView\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "dargohzy": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" prefHeight\u003d\"100.0\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cHBox"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                styleClass\u003d\"result-display\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "              HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cImageView"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        styleClass\u003d\"avatar\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"avatarDisplay\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                           preserveRatio\u003d\"true\" scaleX\u003d\"0.8\" scaleY\u003d\"0.8\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u003cTextArea"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        wrapText\u003d\"true\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        fx:id\u003d\"resultDisplay\" editable\u003d\"false\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"700.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                          styleClass\u003d\"text-area\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 14,
      "dargohzy": 16,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/StatusBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "           prefWidth\u003d\"600.0\" styleClass\u003d\"status-bar\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel fx:id\u003d\"course\" text\u003d\"Course\" styleClass\u003d\"course\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "dargohzy": 10
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/igrad/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/igrad/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/igrad/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/iGrad_Shibu.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 33,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 110,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/igrad/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonCourseBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookStorage(temporaryFolder.resolve(\"courseBook.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Setup LogicManager with JsonCourseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCourseBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String addCommand \u003d ModuleAddCommand.COMMAND_WORD + TITLE_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MODULE_CODE_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + CREDITS_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MEMO_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + SEMESTER_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(TypicalModules.PROGRAMMING_METHODOLOGY).withTags().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String inputCommand,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model expectedModel"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    ) throws CommandException, ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static class JsonCourseBookIoExceptionThrowingStub extends JsonCourseBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private JsonCourseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 10,
      "yjskrs": 26,
      "-": 112,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 45,
      "nathanaelseen": 5
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE_CS_1101S \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE_CS_2100 \u003d \"Computer Organisation\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE_CS_2103T \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE_CS_2101 \u003d \"Effective Communication for Computing Professionals\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE_CS_2040 \u003d \"Data Structures and Algorithms\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS_1101S \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS_2100 \u003d \"CS2100\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS_2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS_2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS_2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_CREDITS_4 \u003d \"4\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_CREDITS_6 \u003d \"6\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String VALID_GRADE_PROGRAMMING_METHODOLOGY \u003d \"A+\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String VALID_GRADE_COMPUTER_ORGANISATION \u003d \"B-\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MEMO_PROGRAMMING_METHODOLOGY \u003d \"v easy module leh\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MEMO_COMPUTER_ORGANISATION \u003d \"a lot of calculation ah\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_SEMESTER_Y1S1 \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String VALID_SEMESTER_Y1S2 \u003d \"Y1S2\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_SEMESTER_Y2S2 \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TAG_EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_GRADE_A \u003d \"A\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_GRADE_B \u003d \"B\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TITLE_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_TITLE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_TITLE_CS_1101S;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TITLE_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_TITLE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_TITLE_CS_2100;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CODE_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_MODULE_CODE_CS_1101S;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CODE_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_MODULE_CODE_CS_2100;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String CREDITS_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_CREDITS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_CREDITS_4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String CREDITS_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_CREDITS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_CREDITS_6;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String SEMESTER_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_SEMESTER"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_SEMESTER_Y1S1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String SEMESTER_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_SEMESTER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + VALID_SEMESTER_Y2S2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027!\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Programming Methodology!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + \"CS2040S\u0026\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in credits"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + \"4%\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in semester"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_SEMESTER_DESC \u003d \" \" + PREFIX_SEMESTER + \"4%\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        DESC_PROGRAMMING_METHODOLOGY \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_TITLE_CS_1101S)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withSemester(VALID_SEMESTER_Y1S1).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        DESC_COMPUTER_ORGANISATION \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_TITLE_CS_2100)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_2100)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(VALID_CREDITS_6)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withSemester(VALID_SEMESTER_Y2S2).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * - the course book, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook expectedCourseBook \u003d new CourseBook(actualModel.getCourseBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(expectedCourseBook, actualModel.getCourseBook());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author nathanaelseen"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Asserts that the execution of {@code command} given a {@code model} is successful and the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * model manipulated is equals to {@code expectedModel}, and the success message is equals to"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code expectedMessage}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param command         Command object."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param model           User input string."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param expectedModel   Expected model."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param expectedMessage Expected message."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static void assertExecuteSuccess(Command command, Model model, Model expectedModel, String expectedMessage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // First check the message equals to expected message"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Next check if the model equals to the expected model"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"The CommandException was unexpectedly thrown.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Asserts that the execution of {@code command} given a {@code model} is unsuccessful and the error message"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * is equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param command         Command object."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param model           User input string."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param expectedMessage Expected command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static void assertExecuteFailure(Command command, Model model, String expectedMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a backup of this model first"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model oldModel \u003d new ModelManager(model.getCourseBook(), model.getUserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            assertEquals(expectedMessage, ce.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // in the event a command changes, the model should not be mutated"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            assertEquals(oldModel, model);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Path getBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean undoCourseBook() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cModule\u003e exportModuleList() throws IOException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Avatar getAvatar() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseBook(ReadOnlyCourseBook newData) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseInfo(CourseInfo editedCourseInfo) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cModule\u003e getSortedModuleList(Comparator\u003cModule\u003e comparator) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cRequirement\u003e getRequirementsWithModule(Module module) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cModule\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePreclusions(Module module) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePrerequisites(Module module) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public String getRandomQuoteString() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "waynewee": 268,
      "dargohzy": 3,
      "yjskrs": 12,
      "-": 57,
      "nathanaelseen": 95
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2100;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2100;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor descriptorWithSameValues \u003d new ModuleEditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .EditModuleDescriptor(DESC_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(DESC_PROGRAMMING_METHODOLOGY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(DESC_PROGRAMMING_METHODOLOGY.equals(DESC_PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(DESC_COMPUTER_ORGANISATION));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor editedProgrammingMethodology \u003d new EditModuleDescriptorBuilder("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            DESC_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_TITLE_CS_2100).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(editedProgrammingMethodology));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedProgrammingMethodology \u003d new EditModuleDescriptorBuilder(DESC_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_2100)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(editedProgrammingMethodology));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 27,
      "nathanaelseen": 17
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 13,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/course/CourseAchieveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseAchieveCommand.MESSAGE_COURSE_ACHIEVE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSCI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseAchieveCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CourseAchieveCommand(cap));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d Optional.of(new Cap(\"0\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseAchieveCommand cmd \u003d new CourseAchieveCommand(cap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void execute_achieveCourse_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCap(VALID_COURSE_CAP_BCOMPSCI)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCreditsOptional()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        model.addCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo courseInfoCopy \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCap(VALID_COURSE_CAP_BCOMPSCI)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCreditsOptional()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        expectedModel.addCourseInfo(courseInfoCopy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e capToAchieve \u003d Optional.of(new Cap(4.5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e estimatedCap \u003d CourseInfo.computeEstimatedCap(model.getCourseInfo(), capToAchieve.get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseAchieveCommand cmd \u003d new CourseAchieveCommand(capToAchieve);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COURSE_ACHIEVE_SUCCESS, estimatedCap.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e capToAchieve \u003d Optional.of(new Cap(4.5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        final CourseAchieveCommand courseAchieveCommand \u003d new CourseAchieveCommand(capToAchieve);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(courseAchieveCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //same course achieve command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(courseAchieveCommand.equals(courseAchieveCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(courseAchieveCommand.equals(module));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different course achieve command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseAchieveCommand otherCourseAchieveCommand;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e otherCapToAchieve \u003d Optional.of(new Cap(\"0\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        otherCourseAchieveCommand \u003d new CourseAchieveCommand(otherCapToAchieve);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(courseAchieveCommand.equals(otherCourseAchieveCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 99
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/course/CourseAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_COURSE_ALREADY_SET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseAddCommand.MESSAGE_COURSE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // CourseInfo null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ) -\u003e new CourseAddCommand(courseInfo));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseAddCommand cmd \u003d new CourseAddCommand(courseInfo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_courseAlreadySet_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager(); // set-up an empty Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoA \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addCourseInfo(courseInfoA); // Add the course to our model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoB \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addCourseInfo(courseInfoA); // Add the course to our model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseAddCommand cmd \u003d new CourseAddCommand(courseInfoB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, MESSAGE_COURSE_ALREADY_SET);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_addCourse_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo addedCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addCourseInfo(addedCourseInfo);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToAdd \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseAddCommand cmd \u003d new CourseAddCommand(courseInfoToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COURSE_ADD_SUCCESS, addedCourseInfo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final CourseAddCommand courseAddCommand \u003d new CourseAddCommand(courseInfo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseAddCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same course add command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(courseAddCommand.equals(courseAddCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseAddCommand.equals(module));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseAddCommand otherCourseAddCommand;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo otherCourseInfo;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different course add command; course info different"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherCourseAddCommand \u003d new CourseAddCommand(otherCourseInfo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseAddCommand.equals(otherCourseAddCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 135
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/course/CourseCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Utility class that stores static strings/ints used in creating CourseInfo objects"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * or CourseCommand objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseCommandTestUtil extends CommandTestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // valid course arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_NAME_BCOMPSCI \u003d \"Bachelor of Computer Science\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_NAME_BCOMPSEC \u003d \"Bachelor of Computer Security\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_CAP_BCOMPSCI \u003d \"4.5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_CAP_BCOMPSEC \u003d \"4.8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI \u003d 108;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC \u003d 180;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI \u003d 64;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC \u003d 40;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_SEMESTERS_BCOMPSCI \u003d \"3\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_COURSE_SEMESTERS_BCOMPSEC \u003d \"4\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI \u003d 6;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_TOTAL_SEMESTERS_BCOMPSEC \u003d 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int VALID_COURSE_REMAINING_SEMESTERS_BCOMPSEC \u003d 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // invalid course arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_COURSE_NAME \u003d \" Bachelor of Mathematics\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_COURSE_SEMESTERS \u003d \"4\u003c\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // course name descriptor for command entered"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_NAME_DESC_BCOMPSCI \u003d \" \" + PREFIX_NAME + VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_NAME_DESC_BCOMPSEC \u003d \" \" + PREFIX_NAME + VALID_COURSE_NAME_BCOMPSEC;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // course semesters descriptor for command entered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_SEMESTERS_DESC_BCOMPSCI \u003d \" \" + PREFIX_SEMESTER + VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_SEMESTERS_DESC_BCOMPSEC \u003d \" \" + PREFIX_SEMESTER + VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_COURSE_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_COURSE_NAME;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_COURSE_SEMESTERS_DESC \u003d \" \" + PREFIX_SEMESTER + INVALID_COURSE_SEMESTERS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // cap descriptor for command entered"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_CAP_DESC \u003d \" \" + PREFIX_CAP + \"4.5\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_CAP_DESC \u003d \" \" + PREFIX_CAP + \"6\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 51
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/course/CourseDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseDeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseDeleteCommand cmd \u003d new CourseDeleteCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_deleteCourse_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseToDelete \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo deletedCourse \u003d new CourseInfoBuilder(courseToDelete).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model (it should not contain any course as it has been deleted already)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseDeleteCommand cmd \u003d new CourseDeleteCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Due to some weird Java garbage mechanism in Java, the old course info dissapears"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * during this JUnit test, despite backups made, hence we\u0027re only able to verify"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * that the model equals here."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final CourseDeleteCommand courseAddCommand \u003d new CourseDeleteCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseAddCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same course delete command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(courseAddCommand.equals(courseAddCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseAddCommand.equals(module));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 71
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/course/CourseEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSEC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseEditCommand.MESSAGE_COURSE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand.EditCourseDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.EditCourseDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseEditCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // EditCourseDescriptor null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor descriptor \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseEditCommand cmd \u003d new CourseEditCommand(descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_editCourse_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a course info"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfoToEdit \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addCourseInfo(courseInfoToEdit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COURSE_EDIT_SUCCESS, editedCourseInfo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseEditCommand cmd \u003d new CourseEditCommand(descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final CourseEditCommand courseEditCommand \u003d new CourseEditCommand(descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseEditCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same course add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(courseEditCommand.equals(courseEditCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseEditCommand.equals(module));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseEditCommand otherCourseEditCommand;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor otherDescriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different course add command; descriptor different"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherDescriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherCourseEditCommand \u003d new CourseEditCommand(otherDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseEditCommand.equals(otherCourseEditCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 116
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleAddAutoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.TypicalModules.getEmptyCourseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleAddAutoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2101 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2101)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2103t \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2103T)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs9999 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(\"CS9999\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(\"This Module Is Not Real\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2040 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2040)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleAddAutoCommand(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_multipleModulesAcceptedByModel_invalidModuleNotAdded() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e moduleStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2103t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2101);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleStrings.add(cs2103t.getModuleCode().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleStrings.add(cs2101.getModuleCode().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleStrings.add(cs9999.getModuleCode().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        new ModuleAddAutoCommand(moduleStrings).execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_multipleModulesAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e validModuleStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2103t);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2101);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2040);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModuleStrings.add(cs2103t.getModuleCode().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModuleStrings.add(cs2101.getModuleCode().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModuleStrings.add(cs2040.getModuleCode().value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        new ModuleAddAutoCommand(validModuleStrings).execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e validModuleStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2103t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModuleStrings.add(cs2103t.getModuleCode().value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        new ModuleAddAutoCommand(validModuleStrings).execute(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_duplicateModuleNotAdded() throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cString\u003e validModuleStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2103t);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModuleStrings.add(cs2103t.getModuleCode().value);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2103t);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        new ModuleAddAutoCommand(validModuleStrings).execute(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 120
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleAddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleAddCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCommandTestUtil.ModelStubAcceptingModuleAdded modelStub \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCommandTestUtil.ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult commandResult \u003d new ModuleAddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(String.format(ModuleAddCommand.MESSAGE_MODULE_ADD_SUCCESS, validModule),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_moduleRejectedByModel_invalidModuleCode() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCommandTestUtil.ModelStubAcceptingModuleAdded modelStub \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCommandTestUtil.ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Module invalidModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                .withModuleCode(\"INVALID\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            CommandResult commandResult \u003d new ModuleAddCommand(invalidModule).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(ModuleCode.MESSAGE_CONSTRAINTS, iae.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleAddCommand moduleAddCommand \u003d new ModuleAddCommand(validModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCommandTestUtil.ModelStub modelStub \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCommandTestUtil.ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(CommandException.class, ModuleAddCommand.MESSAGE_DUPLICATE_MODULE, ("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ) -\u003e moduleAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 58,
      "yjskrs": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePreclusions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModulePrerequisites;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleCommandTestUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // valid requirement arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_TITLE_CS1101S \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_TITLE_CS2100 \u003d \"Computer Organisation\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_TITLE_CS2103T \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_TITLE_CS2101 \u003d \"Effective Communication for Computing Professionals\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_TITLE_CS2040 \u003d \"Data Structures and Algorithms\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1101S \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2100 \u003d \"CS2100\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_CREDITS_4 \u003d \"4\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_CREDITS_6 \u003d \"6\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_SEMESTER_Y1S1 \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_SEMESTER_Y2S2 \u003d \"Y2S2\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_SEMESTER_CS1101S \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_SEMESTER_CS2100 \u003d \"Y2S2\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_GRADE_A \u003d \"A\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_GRADE_B \u003d \"B\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_GRADE_CS1101S \u003d \"A\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_GRADE_CS2100 \u003d \"B\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // invalid requirement arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE \u003d \"CS2040S\u0026\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_GRADE \u003d \"A*\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CREDITS \u003d \"4%\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_SEMESTER \u003d \"4%\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // module title descriptor for command entered"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_TITLE_DESC_CS1101S \u003d \" \" + PREFIX_TITLE + VALID_MODULE_TITLE_CS1101S;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_TITLE_DESC_CS2100 \u003d \" \" + PREFIX_TITLE + VALID_MODULE_TITLE_CS2100;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // module code descriptor for command entered"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String MODULE_MODULE_CODE_DESC_CS1101S \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String MODULE_MODULE_CODE_DESC_CS2100 \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // module credits descriptor for command entered"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CREDITS_DESC_CS1101S \u003d \" \" + PREFIX_CREDITS + VALID_MODULE_CREDITS_4;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CREDITS_DESC_CS2100 \u003d \" \" + PREFIX_CREDITS + VALID_MODULE_CREDITS_6;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // module grade descriptor for command entered"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_GRADE_DESC_CS1101S \u003d \" \" + PREFIX_GRADE + VALID_MODULE_GRADE_CS1101S;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_GRADE_DESC_CS2100 \u003d \" \" + PREFIX_GRADE + VALID_MODULE_GRADE_CS2100;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // module semester descriptor for command entered"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_SEMESTER_DESC_CS1101S \u003d \" \" + PREFIX_SEMESTER + VALID_MODULE_SEMESTER_CS1101S;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_SEMESTER_DESC_CS2100 \u003d \" \" + PREFIX_SEMESTER + VALID_MODULE_SEMESTER_CS2100;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // Starting with \u0027 \u0027 not allowed in titles"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \" Programming Methodology\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // Starting with \u0027/\u0027 not allowed in titles"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_TITLE_SLASH_DESC \u003d \" \" + PREFIX_TITLE + \"/Programming Methodology\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    // Empty titles are not allowed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_TITLE_EMPTY_DESC \u003d \" \" + PREFIX_TITLE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in credits"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + INVALID_MODULE_CREDITS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in semester"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_SEMESTER_DESC \u003d \" \" + PREFIX_SEMESTER + INVALID_MODULE_SEMESTER;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027*\u0027 not allowed in grade"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_GRADE_DESC \u003d \" \" + PREFIX_GRADE + INVALID_MODULE_GRADE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        DESC_PROGRAMMING_METHODOLOGY \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS1101S)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_Y1S1).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        DESC_COMPUTER_ORGANISATION \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_6)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_Y2S2).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * - the course book, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CourseBook expectedCourseBook \u003d new CourseBook(actualModel.getCourseBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(expectedCourseBook, actualModel.getCourseBook());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Path getBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean undoCourseBook() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cModule\u003e exportModuleList() throws IOException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Avatar getAvatar() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseBook(ReadOnlyCourseBook newData) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setCourseInfo(CourseInfo editedCourseInfo) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public Optional\u003cModule\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cModule\u003e getSortedModuleList(Comparator\u003cModule\u003e comparator) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public List\u003cRequirement\u003e getRequirementsWithModule(Module module) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePreclusions(Module module) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePrerequisites(Module module) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public String getRandomQuoteString() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return new CourseBook();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public ArrayList\u003cModule\u003e getModulesAdded() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return modulesAdded;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePreclusions(Module module) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            boolean hasModulePreclusions \u003d false;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModulePreclusions preclusions \u003d module.getPreclusions();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!preclusions.isEmpty()) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                List\u003cModuleCode\u003e moduleCodes \u003d preclusions.getModuleCodes();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                for (ModuleCode preclusion : moduleCodes) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    Optional\u003cModule\u003e mOpt \u003d getModule(preclusion);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    if (mOpt.isPresent()) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        hasModulePreclusions \u003d true;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return hasModulePreclusions;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public boolean hasModulePrerequisites(Module module) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            boolean hasModulePrerequisites \u003d true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModulePrerequisites prerequisites \u003d module.getPrequisites();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (!prerequisites.isEmpty()) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                List\u003cModuleCode\u003e moduleCodes \u003d prerequisites.getModuleCodes();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                for (ModuleCode moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    Optional\u003cModule\u003e mOpt \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    if (mOpt.isEmpty()) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        hasModulePrerequisites \u003d false;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        Module m \u003d mOpt.get();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        if (!m.isDone()) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            hasModulePrerequisites \u003d false;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return hasModulePrerequisites;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "waynewee": 419,
      "dargohzy": 13,
      "yjskrs": 1,
      "nathanaelseen": 55
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CREDITS_4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2040;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.MESSAGE_MODULE_NON_EXISTENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.TypicalModules.getEmptyCourseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * for ModuleEditCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleDeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2040 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2040)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2103t \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2103T)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2101 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2101)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_deleteOne_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleToDelete \u003d cs2040;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2103t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleDeleteCommand moduleDeleteCommand \u003d new ModuleDeleteCommand(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult result \u003d moduleDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                ModuleDeleteCommand.MESSAGE_MODULE_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                moduleToDelete"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            )"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model exepectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        exepectedModel.addModule(cs2103t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(model.getFilteredModuleList(), exepectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_deleteMultiple_success() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleNotToDelete \u003d cs2101;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2040);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2103t);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleNotToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleDeleteCommand moduleDeleteCommand \u003d new ModuleDeleteCommand(cs2040.getModuleCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleDeleteCommand moduleDeleteCommand1 \u003d new ModuleDeleteCommand(cs2103t.getModuleCode());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult result \u003d moduleDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                ModuleDeleteCommand.MESSAGE_MODULE_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                cs2040"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            )"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult result1 \u003d moduleDeleteCommand1.execute(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedResult1 \u003d new CommandResult("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                ModuleDeleteCommand.MESSAGE_MODULE_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                cs2103t"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            )"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model exepectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        exepectedModel.addModule(moduleNotToDelete);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(result1, expectedResult1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(model.getFilteredModuleList(), exepectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_moduleNotFound_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleToDelete \u003d cs2040;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2101);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2103t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleDeleteCommand moduleDeleteCommand \u003d new ModuleDeleteCommand(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String.format(MESSAGE_MODULE_NON_EXISTENT, moduleToDelete.getModuleCode().value)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model exepectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        exepectedModel.addModule(cs2101);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        exepectedModel.addModule(cs2103t);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            moduleDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(new CommandResult(ce.getMessage()), expectedResult);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(model.getFilteredModuleList(), exepectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final ModuleDeleteCommand standardCommand \u003d new ModuleDeleteCommand("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleDeleteCommand commandWithSameValues \u003d new ModuleDeleteCommand("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertNotEquals(standardCommand, new ModuleDeleteCommand(new ModuleCode(VALID_MODULE_CODE_CS2103T)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 177
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleDoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommand.MESSAGE_MODULE_NON_EXISTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_GRADE_CS1101S;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_GRADE_CS2100;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.MESSAGE_MODULE_DONE_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_GE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * for ModuleDoneCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDoneCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // ModuleCode null, but EditModuleDescriptor not null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCodeA \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptorA \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new ModuleDoneCommand(moduleCodeA, descriptorA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // EditModuleDescriptor null, but ModuleCode not null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCodeB \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptorB \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new ModuleDoneCommand(moduleCodeB, descriptorB));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDoneCommand cmd \u003d new ModuleDoneCommand(moduleCode, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_moduleNonExistentOnEmptyModel_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager(); // set-up an empty Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDoneCommand cmd \u003d new ModuleDoneCommand(moduleCode, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, String.format(MESSAGE_MODULE_NON_EXISTENT, moduleCode.value));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_moduleNonExistentNonEmptyModel_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up a non-empty Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(CS2040);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDoneCommand cmd \u003d new ModuleDoneCommand(moduleCode, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, String.format(MESSAGE_MODULE_NON_EXISTENT, moduleCode.value));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_existentModule_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs1101s \u003d 4;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs2040 \u003d 4;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs1101s \u003d \"A\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs2040 \u003d \"B\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String semesterCs1101s \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsAssigned \u003d creditsCs1101s + creditsCs2040;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsFulfilled \u003d creditsCs2040;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsRequired \u003d 16;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsRequired \u003d (totalReqCreditsRequired * 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsFulfilled \u003d creditsCs2040 * 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double courseCap \u003d 3.5;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalSemesters \u003d 5;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a module with no grade"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToEdit \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(moduleToEdit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(dummyModule);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a new requirement and add that module inside"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListA.add(moduleToEdit);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListA.add(dummyModule); // add another dummy module inside"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListA)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssigned, totalReqCreditsFulfilled)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with that module inside too"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(moduleToEdit);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(dummyModule); // add another dummy module inside"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListB)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssigned, totalReqCreditsFulfilled)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Finally, create the appropriate course info and add it to Model too"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(courseCap)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(Integer.toString(totalSemesters))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // The module should have its grade updated to \u0027A\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModuleCopy \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(editedModule);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(dummyModuleCopy);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create an \u0027updated\u0027 requirement and add that \u0027updated\u0027 module inside"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListA.add(editedModule);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListA.add(dummyModuleCopy); // add another dummy module inside"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListA)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssigned, totalReqCreditsFulfilled + creditsCs1101s) // credits fulfilled should update"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with that module inside too"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(editedModule);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(dummyModuleCopy); // add another dummy module inside"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListB)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssigned, totalReqCreditsFulfilled + creditsCs1101s) // credits ulfilled should update"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementB);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create an \u0027updated\u0027 course info and add that \u0027updated\u0027 course info inside"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Here we cheat abit to get remaining semesters because the computation is complicated, and"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * currently the implementation is slightly buggy"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(editedModule);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(dummyModuleCopy);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int remainingSemesters \u003d CourseInfo.computeSemesters("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                courseInfo.getSemesters(), tempList).get().getRemainingSemesters();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(4.25)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    + (2 * creditsCs1101s)) // total credits fulfilled should be updated in both requirements"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemestersTwoParameters(totalSemesters, remainingSemesters)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now, specify the edits on Module through the descriptor and test it!"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDoneCommand cmd \u003d new ModuleDoneCommand(moduleCode, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULE_DONE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final ModuleDoneCommand moduleDoneCommand \u003d new ModuleDoneCommand(moduleCode, descriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(moduleDoneCommand.equals(null));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same module done command"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(moduleDoneCommand.equals(moduleDoneCommand));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(moduleDoneCommand.equals(module));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDoneCommand otherModuleDoneCommand;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode otherModuleCode;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor otherDescriptor;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module done command; only module code different"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2100);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleDoneCommand \u003d new ModuleDoneCommand(otherModuleCode, descriptor);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(moduleDoneCommand.equals(otherModuleDoneCommand));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module done command; only descriptor different"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherDescriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS2100)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleDoneCommand \u003d new ModuleDoneCommand(moduleCode, otherDescriptor);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(moduleDoneCommand.equals(otherModuleDoneCommand));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module done command; both module code and descriptor, different"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2100);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherDescriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS2100)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleDoneCommand \u003d new ModuleDoneCommand(otherModuleCode, otherDescriptor);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(moduleDoneCommand.equals(otherModuleDoneCommand));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 283
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CREDITS_4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CREDITS_6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_GRADE_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_SEMESTER_Y1S1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_SEMESTER_Y2S2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2040;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.MESSAGE_MODULE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.module.ModuleEditCommand.MESSAGE_MODULE_NON_EXISTENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.TypicalModules.getEmptyCourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * for ModuleEditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleEditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Module cs2040 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_MODULE_TITLE_CS2040)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_MODULE_CREDITS_6)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withoutOptionals()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withSemester(VALID_MODULE_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withGrade(VALID_MODULE_GRADE_A)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_allFieldsSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module toBeEdited \u003d cs2040;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(toBeEdited.getModuleCode().value)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_Y2S2)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * The edited module should have the fields specified in the descriptor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * overwritten"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(toBeEdited)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_Y2S2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(toBeEdited);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(toBeEdited.getModuleCode(), descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult(String.format(MESSAGE_MODULE_EDIT_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        expectedModel.addModule(editedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult actualMessage \u003d editCommand.execute(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(model.getFilteredModuleList(), expectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module toBeEdited \u003d cs2040;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(toBeEdited.getModuleCode().value)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * The edited module should have the fields specified in the descriptor"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * overwritten"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(toBeEdited)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(toBeEdited);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(toBeEdited.getModuleCode(), descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult(String.format(MESSAGE_MODULE_EDIT_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        expectedModel.addModule(editedModule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult actualMessage \u003d editCommand.execute(model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(model.getFilteredModuleList(), expectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module toBeEdited \u003d cs2040;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(toBeEdited.getModuleCode().value)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * The edited module should have the fields specified in the descriptor"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * overwritten"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(toBeEdited)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(toBeEdited);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(toBeEdited.getModuleCode(), descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult(String.format(MESSAGE_MODULE_EDIT_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        expectedModel.addModule(editedModule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult actualMessage \u003d editCommand.execute(model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(model.getFilteredModuleList(), expectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_moduleCodeNotFound_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module toBeEdited \u003d cs2040;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(toBeEdited.getModuleCode().value)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(toBeEdited.getModuleCode(), descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                MESSAGE_MODULE_NON_EXISTENT, toBeEdited.getModuleCode().value"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            )"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         * note that the module is not added to the model"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            editCommand.execute(model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            assertEquals(expectedMessage, new CommandResult(ce.getMessage()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final ModuleEditCommand standardCommand \u003d new ModuleEditCommand("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS2040),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            descriptor"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleEditCommand commandWithSameValues \u003d new ModuleEditCommand("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS2040),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            copyDescriptor"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertNotEquals(standardCommand, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertNotEquals(standardCommand, new ModuleEditCommand(new ModuleCode(VALID_MODULE_CODE_CS2103T), descriptor));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 223,
      "yjskrs": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/module/ModuleFilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "//@@author waynewee"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.TypicalModules.getEmptyCourseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleFilterCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_filterModule_noParameters() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module cs1101s \u003d TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module cs2103t \u003d TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module cs2101 \u003d TypicalModules.CS2101;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs1101s);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2103t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(cs2101);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs1101s);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2103t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(cs2101);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleFilterCommand moduleFilterCommand \u003d new ModuleFilterCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.empty(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.empty(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.empty(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleFilterCommand.AND"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleFilterCommand.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_filterModule_orOperator() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithGrade \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2103T)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withGrade(ModuleCommandTestUtil.VALID_MODULE_GRADE_A)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithSixCredits \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_6)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2101)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithSemester \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2040)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withSemester(ModuleCommandTestUtil.VALID_MODULE_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithoutOptionals \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2100)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithGrade);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithSemester);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithSixCredits);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithoutOptionals);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(moduleWithGrade);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(moduleWithSemester);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(moduleWithSixCredits);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleFilterCommand moduleFilterCommand \u003d new ModuleFilterCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.of(new Semester(ModuleCommandTestUtil.VALID_MODULE_SEMESTER_Y1S1)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.of(new Credits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_6)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.of(new Grade(ModuleCommandTestUtil.VALID_MODULE_GRADE_A)),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleFilterCommand.OR"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleFilterCommand.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void execute_filterModule_andOperator() throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithGradeA \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2103T)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2103T)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withGrade(ModuleCommandTestUtil.VALID_MODULE_GRADE_A)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithGradeB \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_6)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2101)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withGrade(ModuleCommandTestUtil.VALID_MODULE_GRADE_A)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module moduleWithoutGrade \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModuleCode(ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withCredits(ModuleCommandTestUtil.VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withTitle(ModuleCommandTestUtil.VALID_MODULE_TITLE_CS2040)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithGradeA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithGradeB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.addModule(moduleWithoutGrade);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e validModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(moduleWithGradeA);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        validModules.add(moduleWithGradeB);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleFilterCommand moduleFilterCommand \u003d new ModuleFilterCommand("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.empty(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.empty(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            Optional.of(new Grade(ModuleCommandTestUtil.VALID_MODULE_GRADE_A)),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ModuleFilterCommand.AND"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleFilterCommand.execute(model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(validModules, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 159
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_ADD_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_DUPLICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSBD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_CSBD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_CSBD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.setupCourseInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.CS_FOUNDATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.getTypicalCourseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Contains integration tests with the model for {@code RequirementAddCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_addNewRequirement_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      .withRequirementCode(VALID_REQ_CODE_CSBD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      .withTitle(VALID_REQ_TITLE_CSBD)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      .withCreditsOneParameter(VALID_REQ_CREDITS_CSBD)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.addRequirement(requirement);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand command \u003d new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d String.format(MESSAGE_REQUIREMENT_ADD_SUCCESS, requirement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setupCourseInfo(expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, message, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicateRequirement_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d CS_FOUNDATION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand command \u003d new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d MESSAGE_REQUIREMENT_DUPLICATE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(command, model, message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 50
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_ADD_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.ModelStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.ModelStubAcceptingRequirementAdded;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.ModelStubWithRequirement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_IP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_IP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_IP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementAddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_nullRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RequirementAddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_requirementAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubAcceptingRequirementAdded modelStub \u003d new ModelStubAcceptingRequirementAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement validRequirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CommandResult commandResult \u003d new RequirementAddCommand(validRequirement).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(String.format(MESSAGE_REQUIREMENT_ADD_SUCCESS, validRequirement),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.singletonList(validRequirement), modelStub.requirements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_addRequirement_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubAcceptingRequirementAdded modelStub \u003d new ModelStubAcceptingRequirementAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubAcceptingRequirementAdded modelStubSuccess \u003d new ModelStubAcceptingRequirementAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement validRequirement \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                           .withRequirementCode(VALID_REQ_CODE_IP)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                           .withTitle(VALID_REQ_TITLE_IP)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                           .withCreditsOneParameter(VALID_REQ_CREDITS_IP)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                           .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Command command \u003d new RequirementAddCommand(validRequirement);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String successMsg \u003d String.format(MESSAGE_REQUIREMENT_ADD_SUCCESS, validRequirement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        command.execute(modelStubSuccess);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, modelStub, successMsg, modelStubSuccess);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicateRequirement_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand command \u003d new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            RequirementAddCommand.MESSAGE_REQUIREMENT_DUPLICATE, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirementWithDifferentCode \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                       .withRequirementCode(VALID_REQ_CODE_IP)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                       .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirementWithDifferentTitle \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                        .withTitle(VALID_REQ_TITLE_IP)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                        .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirementWithDifferentCredits \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                          .withCreditsOneParameter(VALID_REQ_CREDITS_IP)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                          .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand command \u003d new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand commandWithSameRequirement \u003d new RequirementAddCommand(requirement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand commandWithDifferentCode \u003d new RequirementAddCommand(requirementWithDifferentCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand commandWithDifferentTitle \u003d new RequirementAddCommand(requirementWithDifferentTitle);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementAddCommand commandWithDifferentCredits \u003d new RequirementAddCommand(requirementWithDifferentCredits);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(command.equals(commandWithSameRequirement));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandWithDifferentCode));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandWithDifferentTitle));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandWithDifferentCredits));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 98
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementAssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAssignCommand.MESSAGE_REQUIREMENT_ASSIGN_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.getFormattedModulesStr;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_GE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementAssignCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // RequirementCode null, but moduleCodes not null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCodeA \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodesA \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new RequirementAssignCommand(requirementCodeA, moduleCodesA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // moduleCodes null, but RequirementCode not null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCodeB \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodesB \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new RequirementAssignCommand(requirementCodeB, moduleCodesB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementAssignCommand cmd \u003d new RequirementAssignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_requirementNonExistentOnEmptyModel_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager(); // set-up an empty Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementAssignCommand cmd \u003d new RequirementAssignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_requirementNonExistentNonEmptyModel_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up a non-empty Model"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementAssignCommand cmd \u003d new RequirementAssignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_existentRequirement_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs1101s \u003d 4;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs2040 \u003d 4;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs1101s \u003d \"A\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs2040 \u003d \"B\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String semesterCs1101s \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsAssignedReqA \u003d creditsCs2040;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsAssignedReqB \u003d creditsCs1101s + creditsCs2040;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsRequired \u003d 16;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsFulfilledReqA \u003d creditsCs2040;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsFulfilledReqB \u003d creditsCs1101s + creditsCs2040;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsRequired \u003d (totalReqCreditsRequired * 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsFulfilled \u003d totalReqCreditsFulfilledReqA"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + totalReqCreditsFulfilledReqB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double courseCap \u003d 4.25;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalSemesters \u003d 5;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a module with grade \u0027A\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToAssign \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(moduleToAssign);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(dummyModule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a new requirement and add the dummy module inside"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListA.add(dummyModule); // assign the dummy module inside"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListA)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqA, totalReqCreditsFulfilledReqA)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with the two modules already assigned"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(moduleToAssign);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(dummyModule); // add another dummy module inside"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListB)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqB, totalReqCreditsFulfilledReqB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Finally, create the appropriate course info and add it to Model too"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(courseCap)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(Integer.toString(totalSemesters))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a module with grade \u0027A\u0027"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToAssignCopy \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModuleCopy \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(moduleToAssignCopy);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(dummyModuleCopy);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create an \u0027updated\u0027 requirement and assign both modules inside"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListA.add(dummyModuleCopy);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListA.add(moduleToAssignCopy);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListA)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqA + creditsCs1101s, // total credits assigned should be updated"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsFulfilledReqA + creditsCs1101s) // total credits fulfilled should be updated"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with that module inside too"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(moduleToAssignCopy);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(dummyModuleCopy); // add another dummy module inside"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListB)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqB, totalReqCreditsFulfilledReqB) // there should be no change here"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementB);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create an \u0027updated\u0027 course info and add that \u0027updated\u0027 course info inside"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Here we cheat abit to get remaining semesters because the computation is complicated, and"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * currently the implementation is slightly buggy"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(moduleToAssignCopy);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(dummyModuleCopy);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int remainingSemesters \u003d CourseInfo.computeSemesters("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                courseInfo.getSemesters(), tempList).get().getRemainingSemesters();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(courseCap) // total cap no change"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    + (creditsCs1101s)) // total credits required should be updated"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemestersTwoParameters(totalSemesters, remainingSemesters)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now, specify 2 modules to assign to that requirement (one already assigned) and test it!"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesToAssign \u003d getFormattedModulesStr(new ArrayList\u003cModule\u003e() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(moduleToAssignCopy);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }, \"\\n\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesAlreadyAssigned \u003d getFormattedModulesStr(requirementA.getModuleList(), \"\\n\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_ASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                editedRequirementA.getRequirementCode(),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesToAssign,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesAlreadyAssigned);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementAssignCommand cmd \u003d new RequirementAssignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final RequirementAssignCommand requirementAssignCommand \u003d new RequirementAssignCommand("
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(null));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same requirement assign command"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(requirementAssignCommand.equals(requirementAssignCommand));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(module));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementAssignCommand otherRequirementAssignCommand;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode otherRequirementCode;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e otherModuleCodes;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement assign command; only requirement code different"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementAssignCommand \u003d new RequirementAssignCommand(otherRequirementCode, moduleCodes);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementAssignCommand));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement assign command; only module codes different"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementAssignCommand \u003d new RequirementAssignCommand(requirementCode,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                otherModuleCodes);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementAssignCommand));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement assign command; both requirement code and module codes, different"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementAssignCommand \u003d new RequirementAssignCommand(otherRequirementCode, otherModuleCodes);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementAssignCommand));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 330
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.UniqueRequirementList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.RequirementNotFoundException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Utility class that stores static strings/ints used in creating Requirement objects"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * or RequirementCommand objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementCommandTestUtil extends CommandTestUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // valid requirement arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_CSF \u003d \"Computer Science Foundation\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_CSBD \u003d \"Computer Science Breadth and Depth\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_MS \u003d \"Mathematics and Sciences\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_IP \u003d \"IT Professionalism\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_UE \u003d \"Unrestricted Electives\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_TITLE_GE \u003d \"General Electives\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_CSF \u003d \"CSF0\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_CSBD \u003d \"CSBD0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_MS \u003d \"MS0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_IP \u003d \"IP0\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_UE \u003d \"UE0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CODE_GE \u003d \"GE0\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_CSF \u003d \"32\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_CSBD \u003d \"48\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_MS \u003d \"16\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_IP \u003d \"12\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_UE \u003d \"32\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALID_REQ_CREDITS_GE \u003d \"20\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final int VALID_REQ_CREDITS_REQUIRED_IP \u003d 12;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final int VALID_REQ_CREDITS_ASSIGNED_IP \u003d 4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final int VALID_REQ_CREDITS_FULFILLED_IP \u003d 4;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // invalid requirement arguments"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CODE_DECIMAL \u003d \"RE1.0\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CODE_SYMBOL \u003d \"RE\u003c\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CREDITS_ALPHABET \u003d \"a\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CREDITS_DECIMAL \u003d \"40.0\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CREDITS_SYMBOL \u003d \"\u0026\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // requirement title descriptor for command entered"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_CSF \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_CSF;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_CSBD \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_CSBD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_MS \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_MS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_IP \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_IP;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_UE \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_UE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_TITLE_DESC_GE \u003d \" \" + PREFIX_TITLE + VALID_REQ_TITLE_GE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_CSF \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_CSF;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_CSBD \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_CSBD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_MS \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_MS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_IP \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_REQUIRED_IP;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_UE \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_UE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String REQ_CREDITS_DESC_GE \u003d \" \" + PREFIX_CREDITS + VALID_REQ_CREDITS_GE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String INVALID_REQ_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + INVALID_REQ_CREDITS_ALPHABET;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Executes the {@code command} and checks if the returned {@link CommandResult} matches CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * created with {@code expectedMessage} and that the result requirement lists are the same."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertEquals(expectedModel.getRequirementList(), actualModel.getRequirementList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(ce.getMessage(), ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Executes the {@code command} and checks if the exception thrown has the same message"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * as {@code expectedMessage} and the resultant {@code expectedModel} is the same"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * as {@code actualModel}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static void assertCommandThrows(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            command.execute(actualModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertEquals(ce.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertEquals(expectedModel.getRequirementList(), actualModel.getRequirementList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static void setupCourseInfo(Model model) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseInfo courseToEdit \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseInfo editedCourseInfo \u003d CommandUtil.createEditedCourseInfo(courseToEdit, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A default model stub with all non-essential methods failing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Path getBackupCourseBookFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean undoCourseBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public List\u003cModule\u003e exportModuleList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Avatar getAvatar() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new CourseBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModulePrerequisites(Module module) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModulePreclusions(Module module) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new CourseInfo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setCourseInfo(CourseInfo editedCourseInfo) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public String getRandomQuoteString() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public List\u003cRequirement\u003e getRequirementsWithModule(Module module) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Optional\u003cModule\u003e getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public List\u003cModule\u003e getModules(List\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new UniqueModuleList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public List\u003cModule\u003e getSortedModuleList(Comparator\u003cModule\u003e comparator) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A Model stub that contains a single requirement."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static class ModelStubWithRequirement extends ModelStub {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private Requirement requirement;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubWithRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(requirement);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.requirement \u003d requirement;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Optional\u003cRequirement\u003e getRequirement(RequirementCode requirementCode) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (requirement \u003d\u003d null) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (requirementCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return requirementCode.equals(requirement.getRequirementCode())"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                       ? Optional.of(requirement)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                       : Optional.empty();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            UniqueRequirementList list \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            list.setRequirements(Collections.singletonList(requirement));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return list.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(requirement);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return this.requirement.isSameRequirement(requirement);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setRequirement(Requirement target, Requirement newRequirement) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (!hasRequirement(target)) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                throw new RequirementNotFoundException();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requirement \u003d newRequirement;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                       || (other instanceof ModelStubWithRequirement"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                               \u0026\u0026 requirement.equals(((ModelStubWithRequirement) other).requirement));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A Model stub that accepts the requirement being added."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static class ModelStubAcceptingRequirementAdded extends ModelStub {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final ArrayList\u003cRequirement\u003e requirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(requirement);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return requirements.stream().anyMatch(requirement::isSameRequirement);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(requirement);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requirements.add(requirement);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            UniqueRequirementList list \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            list.setRequirements(requirements);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return list.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            ModelStubAcceptingRequirementAdded stub \u003d (ModelStubAcceptingRequirementAdded) other;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return requirements.stream().allMatch(requirement -\u003e stub.requirements.stream()"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                     .anyMatch(requirement::equals))"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                \u0026\u0026 stub.requirements.stream().allMatch(requirement -\u003e requirements.stream()"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                          .anyMatch(requirement::equals));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 429
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSBD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_IP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.setupCourseInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementDeleteCommand.MESSAGE_REQUIREMENT_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.CS_FOUNDATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.getTypicalCourseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Contains integration tests with the model and unit tests for {@code RequirementDeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementDeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Requirement requirement \u003d CS_FOUNDATION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final RequirementCode code \u003d new RequirementCode(VALID_REQ_CODE_CSF);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_deleteRequirementInCourseBook_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementDeleteCommand command \u003d new RequirementDeleteCommand(code);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d String.format(MESSAGE_REQUIREMENT_DELETE_SUCCESS, requirement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.deleteRequirement(requirement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setupCourseInfo(expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, message, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_nonExistentRequirementCode_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode invalidCode \u003d new RequirementCode(VALID_REQ_CODE_IP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementDeleteCommand command \u003d new RequirementDeleteCommand(invalidCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementDeleteCommand command \u003d new RequirementDeleteCommand(code);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementDeleteCommand commandSame \u003d new RequirementDeleteCommand(code);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementDeleteCommand commandDifferent \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementDeleteCommand(new RequirementCode(VALID_REQ_CODE_CSBD));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(command.equals(commandSame));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandDifferent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 66
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementEditCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_IP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_GE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_MS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_GE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_MS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.assertCommandThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.EditRequirementDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.CS_FOUNDATION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.IT_PROFESSIONALISM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.getTypicalCourseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditRequirementDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Contains integration tests with the model for {@code RequirementEditCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementEditCommandIntegrationTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Requirement requirement \u003d CS_FOUNDATION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementCode code \u003d new RequirementCode(VALID_REQ_CODE_CSF);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(requirement).withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            .withCreditsOneParameter(VALID_REQ_CREDITS_MS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder().withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .withCredits(VALID_REQ_CREDITS_MS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setRequirement(model.getRequirement(code).get(), editedRequirement);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, editedRequirement);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedTitle \u003d new RequirementBuilder(requirement).withTitle(VALID_REQ_TITLE_MS).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedCredits \u003d new RequirementBuilder(requirement)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                        .withCreditsOneParameter(VALID_REQ_CREDITS_MS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorTitle \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                        .withTitle(VALID_REQ_TITLE_MS).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorCredits \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                        .withCredits(VALID_REQ_CREDITS_MS).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setRequirement(model.getRequirement(code).get(), editedTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptorTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, editedTitle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setRequirement(model.getRequirement(code).get(), editedCredits);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        command \u003d new RequirementEditCommand(code, descriptorCredits);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, editedCredits);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_noFieldSpecified_modelNotUpdated() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptor();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String expectedMessage \u003d MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandThrows(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicateRequirementTitleAndCredits_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder(GENERAL_ELECTIVES).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(CS_FOUNDATION)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            .withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            .withCreditsOneParameter(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setRequirement(requirement, editedRequirement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, editedRequirement);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_nonExistentRequirementCode_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder(IT_PROFESSIONALISM).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode invalidCode \u003d new RequirementCode(VALID_REQ_CODE_IP);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(invalidCode, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 116
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.ModelStubWithRequirement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_GE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_GE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_GE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.EditRequirementDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditRequirementDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementEditCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementCode code \u003d new RequirementCode(VALID_REQ_CODE_CSF);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_nullRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RequirementEditCommand(null, descriptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RequirementEditCommand(code, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_editRequirementInCourseBook_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement modifiedTitle \u003d new RequirementBuilder().withTitle(VALID_REQ_TITLE_GE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement modifiedCredits \u003d new RequirementBuilder().withCreditsOneParameter(VALID_REQ_CREDITS_GE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement modifiedBoth \u003d new RequirementBuilder().withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                       .withCreditsOneParameter(VALID_REQ_CREDITS_GE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorWithTitle \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                            .withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorWithCredits \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                              .withCredits(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                              .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorWithBoth \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                           .withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                           .withCredits(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                           .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubWithRequirement modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubWithRequirement modelStubExpected \u003d new ModelStubWithRequirement(modifiedTitle);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptorWithTitle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, modifiedTitle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, modelStub, message, modelStubExpected);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelStubExpected \u003d new ModelStubWithRequirement(modifiedCredits);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        command \u003d new RequirementEditCommand(code, descriptorWithCredits);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        message \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, modifiedCredits);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, modelStub, message, modelStubExpected);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelStubExpected \u003d new ModelStubWithRequirement(modifiedBoth);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        command \u003d new RequirementEditCommand(code, descriptorWithBoth);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        message \u003d String.format(MESSAGE_REQUIREMENT_EDIT_SUCCESS, modifiedBoth);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(command, modelStub, message, modelStubExpected);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_editRequirementNonExisting_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode differentCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubWithRequirement modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptorBuilder(descriptor).withTitle(VALID_REQ_TITLE_GE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(differentCode, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(command, modelStub, message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_editRequirementDescriptorNotModified_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelStubWithRequirement modelStub \u003d new ModelStubWithRequirement(requirement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String message \u003d MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(command, modelStub, message);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorWithDifferentTitle \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                     .withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                     .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptorWithDifferentCredits \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                       .withCredits(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                                       .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode differentCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand command \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand commandNewInstance \u003d new RequirementEditCommand(code, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand commandDifferentCode \u003d new RequirementEditCommand(differentCode, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand commandEditTitle \u003d new RequirementEditCommand(code, descriptorWithDifferentTitle);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementEditCommand commandEditCredits \u003d new RequirementEditCommand(code, descriptorWithDifferentCredits);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(command.equals(commandNewInstance));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandDifferentCode));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandEditTitle));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(command.equals(commandEditCredits));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 117
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/requirement/RequirementUnassignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertExecuteSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2040;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.MESSAGE_REQUIREMENT_NON_EXISTENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommand.getFormattedModulesStr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_GE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementUnassignCommand.MESSAGE_REQUIREMENT_UNASSIGN_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementUnassignCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // RequirementCode null, but moduleCodes not null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCodeA \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodesA \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new RequirementUnassignCommand(requirementCodeA, moduleCodesA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // moduleCodes null, but RequirementCode not null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCodeB \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodesB \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ) -\u003e new RequirementUnassignCommand(requirementCodeB, moduleCodesB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementUnassignCommand cmd \u003d new RequirementUnassignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cmd.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_requirementNonExistentOnEmptyModel_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager(); // set-up an empty Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementUnassignCommand cmd \u003d new RequirementUnassignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_requirementNonExistentNonEmptyModel_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up a non-empty Model"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementUnassignCommand cmd \u003d new RequirementUnassignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteFailure(cmd, model, MESSAGE_REQUIREMENT_NON_EXISTENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void execute_existentRequirement_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //set-up our Model"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs1101s \u003d 4;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int creditsCs2040 \u003d 4;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs1101s \u003d \"A\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String gradeCs2040 \u003d \"B\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String semesterCs1101s \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsAssignedReqA \u003d creditsCs2040 + creditsCs2040;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsAssignedReqB \u003d creditsCs1101s + creditsCs2040;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsRequired \u003d 16;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsFulfilledReqA \u003d creditsCs2040 + creditsCs2040;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalReqCreditsFulfilledReqB \u003d creditsCs1101s + creditsCs2040;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsRequired \u003d (totalReqCreditsRequired * 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalCourseCreditsFulfilled \u003d totalReqCreditsFulfilledReqA"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + totalReqCreditsFulfilledReqB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double courseCap \u003d 4.25;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int totalSemesters \u003d 5;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a module with grade \u0027A\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToUnassign \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(moduleToUnassign);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(dummyModule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a new requirement and add these two modules inside"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListA.add(moduleToUnassign);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListA.add(dummyModule); // assign the dummy module inside"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListA)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqA, totalReqCreditsFulfilledReqA)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with the two modules already assigned"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(moduleToUnassign);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleListB.add(dummyModule); // add another dummy module inside"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(moduleListB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqB, totalReqCreditsFulfilledReqB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addRequirement(requirementB);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Finally, create the appropriate course info and add it to Model too"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(courseCap)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(Integer.toString(totalSemesters))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // set-up expected Model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a module with grade \u0027A\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToUnassignCopy \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs1101s))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs1101s)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a dummy module, with grade \u0027B\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module dummyModuleCopy \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2040)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(Integer.toString(creditsCs2040))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(gradeCs2040)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(moduleToUnassignCopy);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addModule(dummyModuleCopy);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create an \u0027updated\u0027 requirement and assign only the dummy module inside"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListA \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListA.add(dummyModuleCopy);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementA \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListA)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqA - creditsCs1101s, // total credits assigned should be updated"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsFulfilledReqA - creditsCs1101s) // total credits fulfilled should be updated"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementA); // Add that requirement to our Model"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create another requirement with that module inside too"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e editedModuleListB \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(moduleToUnassignCopy);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedModuleListB.add(dummyModuleCopy); // add another dummy module inside"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement editedRequirementB \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModules(editedModuleListB)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsThreeParameters(totalReqCreditsRequired,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                totalReqCreditsAssignedReqB, totalReqCreditsFulfilledReqB) // there should be no change here"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.addRequirement(editedRequirementB);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, create an \u0027updated\u0027 course info and add that \u0027updated\u0027 course info inside"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Here we cheat abit to get remaining semesters because the computation is complicated, and"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * currently the implementation is slightly buggy"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(moduleToUnassignCopy);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        tempList.add(dummyModuleCopy);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int remainingSemesters \u003d CourseInfo.computeSemesters("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                courseInfo.getSemesters(), tempList).get().getRemainingSemesters();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(courseCap) // total cap no change"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(totalCourseCreditsRequired, totalCourseCreditsFulfilled"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    - (creditsCs1101s)) // total credits required should be updated"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemestersTwoParameters(totalSemesters, remainingSemesters)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedModel.setCourseInfo(editedCourseInfo);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Now, specify 1 modules to unassign to that requirement (two currently assigned to it) and test it!"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String formattedModulesToUnassign \u003d getFormattedModulesStr(new ArrayList\u003cModule\u003e() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(moduleToUnassignCopy);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }, \"\\n\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_REQUIREMENT_UNASSIGN_SUCCESS,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                editedRequirementA.getRequirementCode(),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                formattedModulesToUnassign);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementUnassignCommand cmd \u003d new RequirementUnassignCommand(requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertExecuteSuccess(cmd, model, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final RequirementUnassignCommand requirementAssignCommand \u003d new RequirementUnassignCommand("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                requirementCode, moduleCodes);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(null));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same requirement unassign command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(requirementAssignCommand.equals(requirementAssignCommand));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(module));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementUnassignCommand otherRequirementUnassignCommand;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode otherRequirementCode;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e otherModuleCodes;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement unassign command; only requirement code different"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementUnassignCommand \u003d new RequirementUnassignCommand(otherRequirementCode, moduleCodes);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementUnassignCommand));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement unassign command; only module codes different"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementUnassignCommand \u003d new RequirementUnassignCommand(requirementCode,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                otherModuleCodes);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementUnassignCommand));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different requirement unassign command; both requirement code and module codes, different"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementCode \u003d new RequirementCode(VALID_REQ_CODE_GE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherModuleCodes \u003d new ArrayList\u003cModuleCode\u003e() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                add(new ModuleCode(VALID_MODULE_CODE_CS2040));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        };"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        otherRequirementUnassignCommand \u003d new RequirementUnassignCommand(otherRequirementCode, otherModuleCodes);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(requirementAssignCommand.equals(otherRequirementUnassignCommand));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 326
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * and the command created is equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param parser          Parser object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param userInput       User input string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param expectedCommand Expected command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * and the error message thrown is equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param parser          Parser object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param userInput       User input string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param expectedMessage Expected command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Asserts that the parsing of {@code inputA} by {@code parser} produces the same"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * output as the parsing of {@code inputB} by {@code parser}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param parser Parser object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param inputA User input string A."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param inputB User input string B."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static void assertParseEquals(Parser parser, String inputA, String inputB) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Command commandA \u003d parser.parse(inputA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Command commandB \u003d parser.parse(inputB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertEquals(commandA, commandB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid input.\", pe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Asserts that the parsing of {@code inputA} by {@code parser} produces different"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * output from the parsing of {@code inputB} by {@code parser}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param parser Parser object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param inputA User input string A."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param inputB User input string B."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static void assertParseNotEquals(Parser parser, String inputA, String inputB) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Command commandA \u003d parser.parse(inputA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Command commandB \u003d parser.parse(inputB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            assertNotEquals(commandA, commandB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid input.\", pe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 5,
      "yjskrs": 56,
      "-": 30,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/CourseBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBookParser parser \u003d new CourseBookParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand command \u003d (ModuleAddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleAddCommand(module), command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand command \u003d (ModuleDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ModuleDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleDeleteCommand(INDEX_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(module).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand command \u003d (ModuleEditCommand) parser.parseCommand(ModuleEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + INDEX_FIRST_MODULE.getOneBased() + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            + ModuleUtil.getEditModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleEditCommand(INDEX_FIRST_MODULE, descriptor), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 17,
      "-": 35,
      "nathanaelseen": 16
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Title expectedTitle \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTitle, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Title expectedTitle \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTitle, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_PHONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedModuleCode, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_PHONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedModuleCode, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Memo expectedMemo \u003d new Memo(VALID_ADDRESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedMemo, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Memo expectedMemo \u003d new Memo(VALID_ADDRESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedMemo, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Credits expectedCredits \u003d new Credits(VALID_EMAIL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedCredits, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Credits expectedCredits \u003d new Credits(VALID_EMAIL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedCredits, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Tags expectedTags \u003d new Tags(VALID_TAG_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTags, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Tags expectedTags \u003d new Tags(VALID_TAG_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTags, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Set\u003cTags\u003e actualTagsSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Set\u003cTags\u003e expectedTagsSet \u003d new HashSet\u003cTags\u003e(Arrays.asList(new Tags(VALID_TAG_1), new Tags(VALID_TAG_2)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTagsSet, actualTagsSet );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 98,
      "nathanaelseen": 57
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/course/CourseAchieveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseAchieveCommand.MESSAGE_COURSE_ACHIEVE_HELP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.INVALID_CAP_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_CAP_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.course.CourseAchieveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class CourseAchieveCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_ACHIEVE_HELP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_ACHIEVE_HELP);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private static final String INVALID_CAP \u003d Cap.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private CourseAchieveCommandParser parser \u003d new CourseAchieveCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void parse_missingArguments_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //\u0027course achieve\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); //just \u0027course achieve\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // \u0027course achieve c/\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        input \u003d \" \" + PREFIX_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // empty string; \"\", cap to achieve argument"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // \u0027course achieve s/6\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        input \u003d INVALID_CAP_DESC;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertParseFailure(parser, input, INVALID_CAP); // invalid cap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void parse_validAndPresentArguments_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cCap\u003e cap;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // \u0027course achieve s/4.5\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        input \u003d VALID_CAP_DESC;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        cap \u003d Optional.of(new Cap(\"4.5\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertParseSuccess(parser, input, new CourseAchieveCommand(cap));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 62
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/course/CourseAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseAddCommand.MESSAGE_COURSE_ADD_HELP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseAddCommand.MESSAGE_COURSE_NOT_ADDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.COURSE_NAME_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.INVALID_COURSE_SEMESTERS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_ADD_HELP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_NOT_ADDED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_NAME_FORMAT \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SEMESTERS_FORMAT \u003d Semesters.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private CourseAddCommandParser parser \u003d new CourseAddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_missingArguments_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing (mandatory) arguments only (i.e; the course name and total semesters):"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); // just \u0027course add\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \" \" + PREFIX_NAME;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // empty string; \"\", course name argument"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/Bachelor of Computer Science\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_COURSE_NAME_BCOMPSCI + COURSE_NAME_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // missing semester argument"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/Bachelor of Computer Science s/\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_COURSE_NAME_BCOMPSCI + COURSE_NAME_DESC_BCOMPSCI + \" \" + PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // empty string; \"\", course semesters argument"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid (mandatory) arguments, i.e, invalid course name and course semesters:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/ Bachelor of Mathematics s/3\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*input \u003d INVALID_COURSE_NAME_DESC + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_NAME_FORMAT); // invalid course name*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/Bachelor of Computer Science s/4\u003c\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_NAME_DESC_BCOMPSCI + INVALID_COURSE_SEMESTERS_DESC;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SEMESTERS_FORMAT); // invalid course semesters"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_validAndPresentArguments_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo expectedCourse;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // normal course add (with all mandatory arguments present and valid):"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course add n/Bachelor of Computer Science s/3\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_NAME_DESC_BCOMPSCI + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        expectedCourse \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCapOptional()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCreditsOptional()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseAddCommand(expectedCourse));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 93
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/course/CourseEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.COURSE_NAME_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.INVALID_COURSE_SEMESTERS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseEditCommand.EditCourseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseEditCommand.MESSAGE_COURSE_EDIT_HELP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.EditCourseDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseEditCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_EDIT_HELP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_COURSE_EDIT_HELP);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_NAME_FORMAT \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SEMESTERS_FORMAT \u003d Semesters.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private CourseEditCommandParser parser \u003d new CourseEditCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_missingArguments_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // at least one course argument; course name and/or total semesters must be present:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); // just \u0027course edit\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit n/\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \" \" + PREFIX_NAME;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // empty string; \"\", course name argument"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit s/\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \" \" + PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // empty string; \"\", course semesters argument"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid (mandatory) arguments, i.e, invalid course name and course semesters:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit n/ Bachelor of Mathematics s/3\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*input \u003d INVALID_COURSE_NAME_DESC + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_NAME_FORMAT); // invalid course name*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit n/Bachelor of Computer Science s/4\u003c\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_NAME_DESC_BCOMPSCI + INVALID_COURSE_SEMESTERS_DESC;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SEMESTERS_FORMAT); // invalid course semesters"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_validAndPresentArguments_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditCourseDescriptor descriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // normal course edit, name field only:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit n/Bachelor of Computer Science\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_NAME_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with whitespace preamble (name field only):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit       n/Bachelor of Computer Science\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + COURSE_NAME_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // normal course edit, semesters field only:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit s/3\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with whitespace preamble (semesters field only):"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit       s/3\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // normal course edit, both name and semesters field:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit n/Bachelor of Computer Science s/3\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d COURSE_NAME_DESC_BCOMPSCI + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with whitespace preamble (both name and semesters field):"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027course edit       n/Bachelor of Computer Science s/3\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + COURSE_NAME_DESC_BCOMPSCI + COURSE_SEMESTERS_DESC_BCOMPSCI;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new CourseEditCommand(descriptor));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 132
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/module/ModuleAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleAddCommand.MESSAGE_MODULE_NOT_ADDED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CREDITS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_TITLE_EMPTY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_TITLE_SLASH_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_TITLE_DESC_CS1101S;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CREDITS_4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_TITLE_CS1101S;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModuleAddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private ModuleAddCommandParser parser \u003d new ModuleAddCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS1101S)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String whiteSpace \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String jumbledOrder \u003d MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseSuccess(parser, whiteSpace, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseSuccess(parser, jumbledOrder, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withTitle(VALID_MODULE_TITLE_CS1101S)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withCredits(VALID_MODULE_CREDITS_4)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withoutOptionals()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String addModule \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseSuccess(parser, addModule, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_compulsoryPrefixesMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String prefixMissingMessage \u003d String.format("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MODULE_NOT_ADDED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing title prefix (\" t/\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingTitle \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + VALID_TITLE_CS_1101S"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing module code prefix (\" n/\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingModuleCode \u003d VALID_MODULE_CODE_CS1101S"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing credits prefix (\" u/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingCredits \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + VALID_MODULE_CREDITS_4;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingTitle, prefixMissingMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingModuleCode, prefixMissingMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingCredits, prefixMissingMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_argumentsMissing_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MODULE_NOT_ADDED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing title"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingTitle \u003d MODULE_TITLE_DESC_CS1101S + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing module code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingModuleCode \u003d MODULE_MODULE_CODE_DESC_CS1101S + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // missing credits"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String missingCredits \u003d MODULE_TITLE_DESC_CS1101S + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingTitle, errorMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingModuleCode, errorMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, missingCredits, errorMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_argumentsInvalid_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidModuleCodeErrorMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidTitleErrorMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidCreditsErrorMessage \u003d Credits.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidModuleCode \u003d INVALID_MODULE_CODE_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid title : starting with blank"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidTitle \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + INVALID_MODULE_TITLE_DESC"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid title : starting with slash"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidTitleSlash \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + INVALID_MODULE_TITLE_SLASH_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid title : empty"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidTitleEmpty \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + INVALID_MODULE_TITLE_EMPTY_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_CREDITS_DESC_CS1101S;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidCredits \u003d MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + MODULE_TITLE_DESC_CS1101S"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            + INVALID_MODULE_CREDITS_DESC;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, invalidModuleCode, invalidModuleCodeErrorMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        /* assertParseFailure(parser, invalidTitle, invalidTitleErrorMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, invalidTitleSlash, invalidTitleErrorMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, invalidTitleEmpty, invalidTitleErrorMessage);*/"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, invalidCredits, invalidCreditsErrorMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 154,
      "yjskrs": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/module/ModuleCommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Util for module command parser"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleCommandParserTestUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1101S \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2100 \u003d \"CS2100\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 15
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/module/ModuleDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.module.ModuleDeleteCommand.MESSAGE_MODULE_DELETE_HELP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.logic.commands.module.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * outside of the ModuleDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * same path through the ModuleDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModuleDeleteCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private ModuleDeleteCommandParser parser \u003d new ModuleDeleteCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            VALID_MODULE_CODE_CS1101S, new ModuleDeleteCommand(moduleCode));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String errorMessageEmpty \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MODULE_DELETE_HELP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String errorMessageInvalid \u003d String.format(MESSAGE_SPECIFIER_INVALID, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // Empty arguments"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String empty \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // Invalid module code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String invalidModuleCode \u003d INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, empty, errorMessageEmpty);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertParseFailure(parser, invalidModuleCode, errorMessageInvalid);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 49,
      "-": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/module/ModuleDoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_NOT_SPECIFIED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_GRADE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_SEMESTER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_GRADE_DESC_CS1101S;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_SEMESTER_DESC_CS1101S;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_GRADE_CS1101S;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_SEMESTER_CS1101S;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.MESSAGE_MODULE_DONE_HELP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleDoneCommand.MESSAGE_MODULE_NOT_EDITED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDoneCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_MODULE_DONE_HELP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String MISSING_SPECIFIER \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_NOT_SPECIFIED, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SPECIFIER \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_INVALID, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d MESSAGE_MODULE_NOT_EDITED;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_GRADE_FORMAT \u003d Grade.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SEMESTER_FORMAT \u003d Semester.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleDoneCommandParser parser \u003d new ModuleDoneCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_missingSpecifierOrMissingArguments_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier and arguments:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); // just \u0027module done\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier only:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done g/A\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d MODULE_GRADE_DESC_CS1101S;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, MISSING_SPECIFIER); // no specifier"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing (mandatory) arguments only (i.e; the grade):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // no arguments (module codes)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S g/\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + \" \" + PREFIX_GRADE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // one empty string module code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S s/Y1S1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + MODULE_SEMESTER_DESC_CS1101S;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // semesters (optional) provided but not module code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_invalidSpecifierOrInvalidArguments_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid specifier:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS2040S\u0026\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, causing it to be interpreted as (invalid) specifier:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S u/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + PREFIX_CREDITS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, but subsequent correct prefix, but nonetheless same as case above:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S u/ g/CS1101S\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + PREFIX_CREDITS + MODULE_GRADE_DESC_CS1101S;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid (mandatory) arguments, i.e, invalid module grade:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S g/A*\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + INVALID_MODULE_GRADE_DESC;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_GRADE_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid (optoinal) arguments, i.e, invalid module semester:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S g/A s/4%\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + MODULE_GRADE_DESC_CS1101S + INVALID_MODULE_SEMESTER_DESC;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SEMESTER_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_validAndPresentSpecifierAndArguments_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1101S);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // normal module done (without semester):"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S g/A\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + MODULE_GRADE_DESC_CS1101S;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new ModuleDoneCommand(moduleCode, descriptor));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with white space preamble (without semester):"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done       CS1101S g/A\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_MODULE_CODE_CS1101S + MODULE_GRADE_DESC_CS1101S;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new ModuleDoneCommand(moduleCode, descriptor));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with optional fields (semester):"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done CS1101S g/A s/Y1S1\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_MODULE_CODE_CS1101S + MODULE_GRADE_DESC_CS1101S + MODULE_SEMESTER_DESC_CS1101S;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_CS1101S)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new ModuleDoneCommand(moduleCode, descriptor));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // with white space preamble (with optional fields; semester):"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027module done      CS1101S g/A s/Y1S1\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_MODULE_CODE_CS1101S + MODULE_GRADE_DESC_CS1101S"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MODULE_SEMESTER_DESC_CS1101S;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder2()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(VALID_MODULE_GRADE_CS1101S)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_MODULE_SEMESTER_CS1101S)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new ModuleDoneCommand(moduleCode, descriptor));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 158
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/module/ModuleEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "//@@author dargohzy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class ModuleEditCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleEditCommand.MESSAGE_MODULE_EDIT_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private ModuleEditCommandParser parser \u003d new ModuleEditCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_missingArguments_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        String errorMessageNoField \u003d MESSAGE_MODULE_NOT_EDITED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        // no field"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        String noField \u003d VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        assertParseFailure(parser, noField, errorMessageNoField);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_PHONE_DESC + CommandTestUtil.EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being edited,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.TAG_DESC_FRIEND + TAG_EMPTY + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + TAG_EMPTY + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //                + CommandTestUtil.VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB).withEmail(CommandTestUtil.VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withTags(CommandTestUtil.VALID_TAG_HUSBAND, CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //ModuleEditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.PHONE_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        String targetModuleCode \u003d TypicalModules.CS2040.getModuleCode().value;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // String userInput \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 180,
      "yjskrs": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/requirement/RequirementAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAddCommand.MESSAGE_REQUIREMENT_NOT_ADDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CREDITS_ALPHABET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CREDITS_DECIMAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CREDITS_SYMBOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_CSBD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_CSF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_UE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_CSBD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_CSF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_UE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_UE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_UE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseNotEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementAddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementAddCommandParser parser \u003d new RequirementAddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement expectedRequirement \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withRequirementCode(\"UE\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(VALID_REQ_TITLE_UE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(VALID_REQ_CREDITS_UE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // whitespace preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + REQ_TITLE_DESC_UE + REQ_CREDITS_DESC_UE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementAddCommand(expectedRequirement));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // jumbled order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_UE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementAddCommand(expectedRequirement));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple titles, only last title parsed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_CSBD + REQ_TITLE_DESC_UE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementAddCommand(expectedRequirement));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseNotEquals(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_CSBD + REQ_TITLE_DESC_UE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_UE + REQ_TITLE_DESC_CSBD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple credits, only last credits parsed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_CREDITS_DESC_CSBD + REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_UE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementAddCommand(expectedRequirement));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseNotEquals(parser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_CREDITS_DESC_CSBD + REQ_CREDITS_DESC_UE + REQ_TITLE_DESC_UE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            REQ_TITLE_DESC_UE + REQ_CREDITS_DESC_UE + REQ_CREDITS_DESC_CSBD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_prefixesMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String prefixMissingMessage \u003d String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_NOT_ADDED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing title prefix (\" t/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, REQ_CREDITS_DESC_CSF, prefixMissingMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing credits prefix (\" c/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, REQ_TITLE_DESC_CSF, prefixMissingMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_argumentsMissing_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String argumentMissingMessage \u003d String.format("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_NOT_ADDED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing title"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String input \u003d \" \" + PREFIX_TITLE.getPrefix() + REQ_CREDITS_DESC_CSF;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, input, argumentMissingMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing credits"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        input \u003d REQ_TITLE_DESC_CSF + \" \" + PREFIX_CREDITS.getPrefix();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, input, argumentMissingMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String validInput \u003d REQ_TITLE_DESC_CSBD + \" \" + PREFIX_CREDITS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, validInput + INVALID_REQ_CREDITS_ALPHABET, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, validInput + INVALID_REQ_CREDITS_DECIMAL, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, validInput + INVALID_REQ_CREDITS_SYMBOL, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 104
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/requirement/RequirementAssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_NOT_SPECIFIED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAssignCommand.MESSAGE_REQUIREMENT_ASSIGN_HELP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementAssignCommand.MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_DECIMAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_SYMBOL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementAssignCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementAssignCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_ASSIGN_HELP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String MISSING_SPECIFIER \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_NOT_SPECIFIED, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SPECIFIER \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_INVALID, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_MODULE_CODE_FORMAT \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private RequirementAssignCommandParser parser \u003d new RequirementAssignCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_missingSpecifierOrMissingArguments_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier and arguments:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); // just \"requirement assign\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier only:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign n/CS1101S\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, MISSING_SPECIFIER); // no specifier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing arguments only (i.e; module codes, there must be at least one module code):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // no arguments (module codes)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 n/\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + \" \" + PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // one empty string module code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_invalidSpecifierOrInvalidArguments_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid specifier:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign RE1.0\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d INVALID_REQ_CODE_DECIMAL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign RE\u003c\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d INVALID_REQ_CODE_SYMBOL;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, causing it to be interpreted as (invalid) specifier:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 u/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + PREFIX_CREDITS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, but subsequent correct prefix, but nonetheless same as case above:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 u/ n/CS1101S\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + PREFIX_CREDITS + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid arguments (only one module code specified), i.e, invalid module codes:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 n/CS2040S\u0026\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_MODULE_CODE_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid arguments, (two module codes specified, first one valid, second one invalid):"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 n/CS1101S n/CS2040S\u0026\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S + INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_MODULE_CODE_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_validAndPresentSpecifierAndArguments_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCodes.add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 1 module only:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 n/CS1101S\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementAssignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 1 module only, with white space preamble:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign       UE0 n/CS1101S\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementAssignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 2 modules (or more)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign UE0 n/CS1101S n/CS2100\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCodes.add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S + MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementAssignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 2 modules (or more), with white space preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement assign     UE0 n/CS1101S n/CS2100\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementAssignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 146
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/requirement/RequirementDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_DECIMAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_SYMBOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_MS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementDeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementDeleteCommandParser parser \u003d new RequirementDeleteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_validSpecifier_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_MS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, VALID_REQ_CODE_MS, new RequirementDeleteCommand(requirementCode));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidSpecifier_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String errorMessage \u003d String.format(MESSAGE_SPECIFIER_INVALID, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, INVALID_REQ_CODE_DECIMAL, errorMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, INVALID_REQ_CODE_SYMBOL, errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 34
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/requirement/RequirementEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_NOT_SPECIFIED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CREDITS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_CSF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_IP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_MS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_CREDITS_DESC_UE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_CSF;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_IP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_MS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.REQ_TITLE_DESC_UE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSBD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_IP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_CSF;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_IP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_MS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_UE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_CSF;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_IP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_MS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_UE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.EditRequirementDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_EDIT_HELP;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseEquals;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseNotEquals;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.requirement.RequirementEditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditRequirementDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementEditCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_EDIT_HELP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String MISSING_SPECIFIER \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_NOT_SPECIFIED, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String INVALID_SPECIFIER \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_INVALID, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String FIELDS_NOT_SPECIFIED \u003d MESSAGE_REQUIREMENT_NOT_EDITED;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String INVALID_TITLE_FORMAT \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String INVALID_CREDITS_FORMAT \u003d Credits.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementEditCommandParser parser \u003d new RequirementEditCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_validSpecifierAndArguments_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // both fields modified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(VALID_REQ_TITLE_CSF)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCredits(VALID_REQ_CREDITS_CSF)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, VALID_REQ_CODE_UE + REQ_TITLE_DESC_CSF + REQ_CREDITS_DESC_CSF,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementEditCommand(requirementCode, descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // only one field modified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptorBuilder().withTitle(VALID_REQ_TITLE_CSF).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, VALID_REQ_CODE_UE + REQ_TITLE_DESC_CSF,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementEditCommand(requirementCode, descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptorBuilder().withCredits(VALID_REQ_CREDITS_CSF).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, VALID_REQ_CODE_UE + REQ_CREDITS_DESC_CSF,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementEditCommand(requirementCode, descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_missingSpecifierOrMissingArguments_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid command format"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, \"\", INVALID_COMMAND_FORMAT); // just \"requirement edit\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing specifier"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, \" t/\", MISSING_SPECIFIER); // no specifier"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" s/\", INVALID_SPECIFIER); // wrong prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" s/ t/\", INVALID_SPECIFIER); // wrong w correct prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // fields not given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE, FIELDS_NOT_SPECIFIED); // no prefix/arguments"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" t/\", FIELDS_NOT_SPECIFIED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" u/\", FIELDS_NOT_SPECIFIED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" t/\", FIELDS_NOT_SPECIFIED); // no title"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" u/\", FIELDS_NOT_SPECIFIED); // no credits"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + REQ_CREDITS_DESC_CSF + \" t/\", INVALID_TITLE_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" t/\" + REQ_CREDITS_DESC_CSF, INVALID_TITLE_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + REQ_TITLE_DESC_CSF + \" u/\", INVALID_CREDITS_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, VALID_REQ_CODE_UE + \" u/\" + REQ_TITLE_DESC_CSF, INVALID_CREDITS_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidSpecifier_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, \"-1\" + VALID_REQ_CODE_UE, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, \".\", INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseFailure(parser, \"  and some spaces\", INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_CSBD);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String input \u003d VALID_REQ_CODE_CSBD + REQ_TITLE_DESC_UE + REQ_CREDITS_DESC_UE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                           + REQ_TITLE_DESC_MS + REQ_CREDITS_DESC_MS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String basicInput \u003d VALID_REQ_CODE_CSBD + REQ_TITLE_DESC_MS + REQ_CREDITS_DESC_MS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String differentInput \u003d VALID_REQ_CODE_CSBD + REQ_TITLE_DESC_MS + REQ_CREDITS_DESC_MS"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                    + REQ_TITLE_DESC_UE + REQ_CREDITS_DESC_UE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String differentBasicInput \u003d VALID_REQ_CODE_CSBD + REQ_TITLE_DESC_UE + REQ_CREDITS_DESC_UE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .withCredits(VALID_REQ_CREDITS_MS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor differentDescriptor \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .withTitle(VALID_REQ_TITLE_UE)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .withCredits(VALID_REQ_CREDITS_UE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                   .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, input,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementEditCommand(requirementCode, descriptor));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, differentInput,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new RequirementEditCommand(requirementCode, differentDescriptor));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseEquals(parser, input, basicInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseEquals(parser, differentInput, differentBasicInput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseNotEquals(parser, input, differentBasicInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseNotEquals(parser, differentInput, basicInput);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode code \u003d new RequirementCode(VALID_REQ_CODE_IP);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String input \u003d VALID_REQ_CODE_IP + INVALID_REQ_CREDITS_DESC + REQ_CREDITS_DESC_IP;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditRequirementDescriptor descriptor \u003d new EditRequirementDescriptorBuilder()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                  .withCredits(VALID_REQ_CREDITS_IP)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                  .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementEditCommand(code, descriptor));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        input \u003d VALID_REQ_CODE_IP + INVALID_REQ_CREDITS_DESC + REQ_TITLE_DESC_IP + REQ_CREDITS_DESC_IP;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptorBuilder(descriptor).withTitle(VALID_REQ_TITLE_IP).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementEditCommand(code, descriptor));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 158
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/requirement/RequirementUnassignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_SPECIFIER_NOT_SPECIFIED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_DECIMAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.INVALID_REQ_CODE_SYMBOL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementUnassignCommand.MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementUnassignCommand.MESSAGE_REQUIREMENT_UNASSIGN_HELP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.requirement.RequirementUnassignCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class RequirementUnassignCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_REQUIREMENT_UNASSIGN_HELP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String MISSING_SPECIFIER \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_NOT_SPECIFIED, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_SPECIFIER \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_SPECIFIER_INVALID, RequirementCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String INVALID_MODULE_CODE_FORMAT \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String ARGUMENTS_NOT_SPECIFIED \u003d MESSAGE_REQUIREMENT_NO_MODULES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private RequirementUnassignCommandParser parser \u003d new RequirementUnassignCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_missingSpecifierOrMissingArguments_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier and arguments:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_COMMAND_FORMAT); // just \"requirement unassign\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing specifier only:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign n/CS1101S\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, MISSING_SPECIFIER); // no specifier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // missing arguments only (i.e; module codes, there must be at least one module code):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // no arguments (module codes)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 n/\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + \" \" + PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, ARGUMENTS_NOT_SPECIFIED); // one empty string module code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_invalidSpecifierOrInvalidArguments_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid specifier:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign RE1.0\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d INVALID_REQ_CODE_DECIMAL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign RE\u003c\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d INVALID_REQ_CODE_SYMBOL;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, causing it to be interpreted as (invalid) specifier:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 u/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + PREFIX_CREDITS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // wrong start prefix, but subsequent correct prefix, but nonetheless same as case above:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 u/ n/CS1101S\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + PREFIX_CREDITS + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_SPECIFIER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid arguments (only one module code specified), i.e, invalid module codes:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 n/CS2040S\u0026\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_MODULE_CODE_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid arguments, (two module codes specified, first one valid, second one invalid):"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 n/CS1101S n/CS2040S\u0026\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S + INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser, input, INVALID_MODULE_CODE_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parse_validAndPresentSpecifierAndArguments_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        RequirementCode requirementCode \u003d new RequirementCode(VALID_REQ_CODE_UE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModuleCode\u003e moduleCodes \u003d new ArrayList\u003cModuleCode\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCodes.add(new ModuleCode(VALID_MODULE_CODE_CS1101S));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 1 module only:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 n/CS1101S\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementUnassignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 1 module only, with white space preamble:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign       UE0 n/CS1101S\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementUnassignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 2 modules (or more)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign UE0 n/CS1101S n/CS2100\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCodes.add(new ModuleCode(VALID_MODULE_CODE_CS2100));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S + MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementUnassignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // 2 modules (or more), with white space preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // \u0027requirement unassign     UE0 n/CS1101S n/CS2100\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        input \u003d PREAMBLE_WHITESPACE + VALID_REQ_CODE_UE + MODULE_MODULE_CODE_DESC_CS1101S"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MODULE_MODULE_CODE_DESC_CS2100;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser, input, new RequirementUnassignCommand(requirementCode, moduleCodes));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 146
    }
  },
  {
    "path": "src/test/java/igrad/model/CourseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.emptyList(), courseBook.getModuleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e courseBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData_withValidReadOnlyCourseBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook newData \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newData, courseBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedProgrammingMethodology \u003d new ModuleBuilder(TypicalModules.CS1101S)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // .withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(TypicalModules.CS1101S, editedProgrammingMethodology);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBookStub newData \u003d new CourseBookStub(newModules);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e courseBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e courseBook.hasModule(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleNotInCourseBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(courseBook.hasModule(TypicalModules.CS1101S));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        courseBook.addModule(TypicalModules.CS1101S);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(courseBook.hasModule(TypicalModules.CS1101S));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        courseBook.addModule(TypicalModules.CS1101S);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(TypicalModules.CS1101S)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // .withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(courseBook.hasModule(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e courseBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A stub ReadOnlyCourseBook whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static class CourseBookStub implements ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // We\u0027re not testing requirement as its similar to modules"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public String requirementsFulfilled() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean isComplete() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 7,
      "yjskrs": 95,
      "nathanaelseen": 22
    }
  },
  {
    "path": "src/test/java/igrad/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.CourseBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(new CourseBook(), new CourseBook(modelManager.getCourseBook()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCourseBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_validPath_setsCourseBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelManager.setCourseBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(path, modelManager.getCourseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasPerson_personNotInCourseBook_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(modelManager.hasModule(TypicalModules.CS1101S));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasPerson_personInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        modelManager.addModule(TypicalModules.CS1101S);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(modelManager.hasModule(TypicalModules.CS1101S));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBookBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModule(TypicalModules.CS1101S)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .withModule(TypicalModules.CS2100)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook differentCourseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelManager \u003d new ModelManager(courseBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(courseBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different courseBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCourseBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] keywords \u003d TypicalModules.CS1101S.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modelManager.updateFilteredModuleList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(courseBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "yjskrs": 24,
      "-": 92,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/test/java/igrad/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCourseBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/igrad/model/course/CapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSEC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CapTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cap(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_invalidCap_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Testing overloaded String constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String invalidCapStr \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cap(invalidCapStr));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Testing overloaded Double constructor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        double invalidCapDouble \u003d 6.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cap(invalidCapDouble));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void isValidCap() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Testing overloaded String method"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null cap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cap.isValidCap(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid cap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"\")); // empty string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\" \")); // whitespace only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"a\")); // alphabet only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\" 1\")); // integer (cap) string starting with whitespace"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"1 \")); // integer (cap) string ending with whitespace"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\" 1.00\")); // double (cap) string starting with whitespace"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"1.00 \")); // double (cap) string ending with whitespace"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"44\")); // integer (cap) string more than one non-decimal digit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"44.00\")); // double (cap) string more than one non-decimal digit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"4.4 0\")); // space-separated double (cap) string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"4.4+0\")); // special character-separated double (cap) string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"4..40\")); // special character-separated double (cap) string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"4.40.40\")); // double (cap) string multiple decimal segments"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"4.\")); // double (cap) string with only trailing decimal point"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"5.01\")); // double (cap) string  above 5"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(\"-0.01\")); // double (cap) string below 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid cap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"4\")); // integer (cap) string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"4.40\")); // double (cap) string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"4.4000000000000001\")); // double (cap) string with many precisions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"0\")); // integer (cap) string exactly 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"0.0000000000000000\")); // double (cap) string exactly 0, with many precisions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"5\")); // integer (cap) string exactly 5"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(\"5.0000000000000000\")); // double (cap) string exactly 5, with many precisions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Testing overloaded Double method"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid cap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(5.01)); // double (cap) above 5"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Cap.isValidCap(-0.01)); // double (cap) below 0"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid cap"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(4)); // integer (cap)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(4.40)); // double (cap)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(4.4000000000000001)); // double (cap) with many precisions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(0)); // integer (cap) exactly 0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(0.0000000000000000)); // double (cap) exactly 0, with many precisions"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(5)); // integer (cap) exactly 5"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Cap.isValidCap(5.0000000000000000)); // double (cap) exactly 5, with many precisions"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Cap capA;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Cap capB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capA \u003d new Cap(VALID_COURSE_CAP_BCOMPSCI);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(capA.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same cap"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capA \u003d new Cap(VALID_COURSE_CAP_BCOMPSCI);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capB \u003d new Cap(VALID_COURSE_CAP_BCOMPSCI);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(capA.equals(capB));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capA \u003d new Cap(VALID_COURSE_CAP_BCOMPSCI);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(capA.equals(module));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different cap"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capA \u003d new Cap(VALID_COURSE_CAP_BCOMPSCI);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        capB \u003d new Cap(VALID_COURSE_CAP_BCOMPSEC);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(capA.equals(capB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 2,
      "nathanaelseen": 107
    }
  },
  {
    "path": "src/test/java/igrad/model/course/CourseInfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSEC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS1101S;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.module.ModuleCommandTestUtil.VALID_MODULE_CODE_CS2100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.model.course.Cap.CAP_ZERO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalCourseInfos.BCOMPSCI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalRequirements.CS_FOUNDATION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalRequirements.IT_PROFESSIONALISM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfoTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_withNoArgs_createsCourseInfoWithAllFieldsOptionalEmpty() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo emptyCourseInfo \u003d new CourseInfoBuilder().buildEmptyCourseInfo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), emptyCourseInfo.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), emptyCourseInfo.getCap());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), emptyCourseInfo.getCredits());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), emptyCourseInfo.getSemesters());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_nullFields_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CourseInfoBuilder().buildNullCourseInfo());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void getName_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e newName \u003d Optional.of(new Name(VALID_COURSE_NAME_BCOMPSCI));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo newCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(newName, newCourseInfo.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void getCap_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e newCap \u003d Optional.of(new Cap(VALID_COURSE_CAP_BCOMPSCI));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo newCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCap(VALID_COURSE_CAP_BCOMPSCI)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(newCap, newCourseInfo.getCap());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void getCredits_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e newCredits \u003d Optional.of(new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo newCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(newCredits, newCourseInfo.getCredits());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void getSemesters_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e newSemesters \u003d Optional.of(new Semesters(VALID_COURSE_SEMESTERS_BCOMPSCI));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo newCourseInfo \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(newSemesters, newCourseInfo.getSemesters());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCredits_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CourseInfo.computeCredits(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCredits_emptyRequirementList_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e emptyRequirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), CourseInfo.computeCredits(emptyRequirementList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCredits_totalCreditsRequiredTallyCreditsAllModules_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d CourseInfo.computeCredits(requirementList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int computedCreditsRequired \u003d credits.get().getCreditsRequired();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int expectedCreditsRequired \u003d (CS_FOUNDATION.getCredits().getCreditsRequired()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + GENERAL_ELECTIVES.getCredits().getCreditsRequired());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCreditsRequired, computedCreditsRequired);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCredits_totalCreditsFulfilledTallyCreditsAllModules_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(IT_PROFESSIONALISM);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d CourseInfo.computeCredits(requirementList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int computedCreditsFulfilled \u003d credits.get().getCreditsFulfilled();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int expectedCreditsFulfilled \u003d (CS_FOUNDATION.getCredits().getCreditsFulfilled()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + IT_PROFESSIONALISM.getCredits().getCreditsFulfilled());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCreditsFulfilled, computedCreditsFulfilled);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_moduleListNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, moduleList is null but requirementList not null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CourseInfo.computeCap(moduleList,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            requirementList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_requirementListNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, requirementList is null but moduleList not null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(CS2040);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CourseInfo.computeCap(moduleList,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            requirementList));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_moduleListAndRequirementListNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, both moduleList and requirementList is null"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CourseInfo.computeCap(moduleList,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            requirementList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_moduleListEmpty_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, moduleList is empty but requirementList not empty"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), CourseInfo.computeCap(moduleList, requirementList));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_requirementListEmpty_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, requirementList is empty but moduleList not empty"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(CS2040);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), CourseInfo.computeCap(moduleList, requirementList));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_moduleListAndRequirementListEmpty_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // In this test case, both moduleList and requirementList is empty"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(CS2040);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(Optional.empty(), CourseInfo.computeCap(moduleList, requirementList));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_noModulesInAnyRequirements_returnsCapZero() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(CS2040);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(CS2101);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(CAP_ZERO);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_allModulesNoGrade_returnsCapZero() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create 2 modules without any grade"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleOne \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleTwo \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withoutOptionals().build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleOne);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleTwo);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleOne);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleTwo);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(CAP_ZERO);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_oneModuleGradeA_returnsCapFive() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create a modules with grade; A"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(new Cap(5));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_twoModulesGradeA_returnsCapFive() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create 2 modules with grade; A"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleOne \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleTwo \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleOne);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleTwo);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleOne);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleTwo);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(new Cap(5));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_oneModuleGradeAOtherModuleGradeBMinus_returnsCapFour() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create 2 modules with grade; A"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleOne \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleTwo \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"B-\").build();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleOne);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleTwo);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleOne);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleTwo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(new Cap(4));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_oneModuleGradeAOtherModuleSuGrade_returnsCapFive() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create 2 modules with grade; A"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleOne \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleTwo \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"S\").build();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleOne);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleTwo);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleOne);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleTwo);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(new Cap(5));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void computeCap_twoModulesSuGrade_returnsCapZero() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d new ArrayList\u003cRequirement\u003e();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Create 2 modules with grade; A"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleOne \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS1101S)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"A\").build();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleTwo \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS2100)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withGrade(\"S\").build();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleOne);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleList.add(moduleTwo);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Add the modules to the requirement"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleOne);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirement.addModule(moduleTwo);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Finally, add the requirement to the requirementList"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requirementList.add(requirement);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e computedCap \u003d CourseInfo.computeCap(moduleList, requirementList);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e expectedCap \u003d Optional.of(new Cap(5));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(expectedCap, computedCap);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    //@@author teriaiw"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void computeSemesters_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CourseInfo.computeSemesters(null, null));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void computeSemesters_emptySemesters_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        List\u003cModule\u003e emptyModuleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertEquals(Optional.empty(), CourseInfo.computeSemesters(Optional.empty(), emptyModuleList));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void computeSemesters_emptyModuleList_returnsOriginalSemesters() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        List\u003cModule\u003e emptyModuleList \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d Optional.of(new Semesters(\"5\"));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertEquals(semesters, CourseInfo.computeSemesters(semesters, emptyModuleList));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(null));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // same course info"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(BCOMPSCI.equals(BCOMPSCI));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // copied course info"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo courseInfoCopy \u003d new CourseInfoBuilder(BCOMPSCI).build();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(BCOMPSCI.equals(courseInfoCopy));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(module));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(GENERAL_ELECTIVES));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo otherCourseInfo;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different course info; only cap different"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        otherCourseInfo \u003d new CourseInfoBuilder(BCOMPSCI)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .withCap(VALID_COURSE_CAP_BCOMPSEC)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(otherCourseInfo));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different course info; only credits different"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        otherCourseInfo \u003d new CourseInfoBuilder(BCOMPSCI)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(otherCourseInfo));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different course info; only semesters different"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        otherCourseInfo \u003d new CourseInfoBuilder(BCOMPSCI)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(otherCourseInfo));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different course info; both cap and credits, different"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        CourseInfo other \u003d new CourseInfoBuilder(BCOMPSCI)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .withCap(VALID_COURSE_CAP_BCOMPSEC)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(other));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different course info; cap, credits, semesters, all different"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        other \u003d new CourseInfoBuilder(BCOMPSCI)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCap(VALID_COURSE_CAP_BCOMPSEC)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                        VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(BCOMPSCI.equals(other));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teriaiw": 78,
      "nathanaelseen": 397
    }
  },
  {
    "path": "src/test/java/igrad/model/course/CreditsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int invalidCreditsRequired;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int invalidCreditsFulfilled;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int validCreditsRequired;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        int validCreditsFulfilled;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits required, but valid credits fulfilled"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        invalidCreditsRequired \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        validCreditsFulfilled \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Credits("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            invalidCreditsRequired, validCreditsFulfilled));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits fulfilled, but valid credits required"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        invalidCreditsFulfilled \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        validCreditsRequired \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Credits("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            validCreditsRequired, invalidCreditsFulfilled));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void isValidCreditsRequired() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits required"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Credits.isValidCreditsRequired(-1)); // negative number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Credits.isValidCreditsRequired(0)); // value 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid credits required"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Credits.isValidCreditsRequired(1)); // positive number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void isValidCreditsFulfilled() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits fulfilled"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Credits.isValidCreditsFulfilled(-1)); // negative number"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid credits fulfilled"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Credits.isValidCreditsFulfilled(0)); // value 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Credits.isValidCreditsFulfilled(1)); // positive number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits creditsA;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits creditsB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(creditsA.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same credits"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsB \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(creditsA.equals(creditsB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(creditsA.equals(module));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same credits required but different credits fulfilled"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(4, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(4, 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(creditsA.equals(creditsB));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same credits fulfilled but different credits required"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(3, 4);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(2, 4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(creditsA.equals(creditsB));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different credits required and different credits fulfilled"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsA \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        creditsB \u003d new Credits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(creditsA.equals(creditsB));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 100
    }
  },
  {
    "path": "src/test/java/igrad/model/course/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSEC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // string with blank spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Name.isValidName(\" Bachelor of Computer Science\")); // starts with a whitespace"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"bachelorofcomputerscience\")); // name without spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"bachelor of computer science\")); // contains spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"Bachelor Of Computer Science\")); // capitalise first letter of each word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"/Bachelor of Computer Science\")); // starts with non-alphabet"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"Bachelor of Computer Science 1\")); // contains alphanumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"Bachelor of Computer Science (with maths minor)\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"计算机科学\")); // contains only non-alphaneumeric characters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Name nameA;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Name nameB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameA \u003d new Name(VALID_COURSE_NAME_BCOMPSCI);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(nameA.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameA \u003d new Name(VALID_COURSE_NAME_BCOMPSCI);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameB \u003d new Name(VALID_COURSE_NAME_BCOMPSCI);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(nameA.equals(nameB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameA \u003d new Name(VALID_COURSE_NAME_BCOMPSCI);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(nameA.equals(module));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameA \u003d new Name(VALID_COURSE_NAME_BCOMPSCI);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        nameB \u003d new Name(VALID_COURSE_NAME_BCOMPSEC);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(nameA.equals(nameB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 75
    }
  },
  {
    "path": "src/test/java/igrad/model/course/SemestersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "//@@author teriaiw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_REMAINING_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_TOTAL_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "public class SemestersTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Semesters(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidSemesters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidSemestersStr \u003d \"\"; //empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semesters(invalidSemestersStr));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int invalidTotalSemesters;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int invalidRemainingSemesters;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int validTotalSemesters;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        int validRemainingSemesters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        validTotalSemesters \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        invalidRemainingSemesters \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semesters("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                validTotalSemesters, invalidRemainingSemesters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        invalidTotalSemesters \u003d -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        validRemainingSemesters \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semesters("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                invalidTotalSemesters, validRemainingSemesters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidSemesters() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidSemesters(\"\")); //empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidSemesters(\" \")); //whitespace"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidSemesters(\"0\")); //zero value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidSemesters(\"-1\")); //negative value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semesters.isValidSemesters(\"1\")); //positive value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidTotalSemesters() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidTotalSemesters(0)); //zero value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidTotalSemesters(-1)); //negative value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semesters.isValidTotalSemesters(1)); //positive value"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidRemainingSemesters() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semesters.isValidRemainingSemesters(-1)); //negative value"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semesters.isValidRemainingSemesters(0)); //zero value"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semesters.isValidRemainingSemesters(1)); //positive value"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Semesters semestersA;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Semesters semestersB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //same semester string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(VALID_COURSE_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different semester string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(VALID_COURSE_SEMESTERS_BCOMPSEC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //same semesters int"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different total and remaining semesters"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(VALID_COURSE_TOTAL_SEMESTERS_BCOMPSEC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_REMAINING_SEMESTERS_BCOMPSEC);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //same total semesters but different remaining semesters"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(5, 4);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(5, 3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different total semesters but same remaining semesters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(4, 5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersB \u003d new Semesters(3, 5);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(semestersB));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        //different type"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        semestersA \u003d new Semesters(VALID_COURSE_TOTAL_SEMESTERS_BCOMPSCI,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "                VALID_COURSE_REMAINING_SEMESTERS_BCOMPSCI);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(semestersA.equals(module));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 125
    }
  },
  {
    "path": "src/test/java/igrad/model/module/CreditsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Credits(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidCredits));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidCredits() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null credits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // assertThrows(NullPointerException.class, () -\u003e Credits.isValidCredits(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"abc\")); // malformed int"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid credits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"4\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 28,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/model/module/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 12
    }
  },
  {
    "path": "src/test/java/igrad/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null ModuleCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid ModuleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid ModuleCode (only 4 digits, no 2 letters in front)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"1234\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid ModuleCode (2 letters in front, followed by 4 digits, but no (optional) letter behind)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS1231\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid ModuleCode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 31,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_4;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_6;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_GRADE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_GRADE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_1101S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_Y1S1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_Y1S2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_1101S;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2100;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module cs1101s \u003d TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module cs2100 \u003d TypicalModules.CS2100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void hasModuleCodeOf_sameModuleCode_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode \u003d cs1101s.getModuleCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.hasModuleCodeOf(moduleCode));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void hasModuleCodeOf_differentModuleCode_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode \u003d cs2100.getModuleCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.hasModuleCodeOf(moduleCode));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void getTitle_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Title newTitle \u003d new Title(VALID_GRADE_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withTitle(VALID_GRADE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(newTitle, newModule.getTitle());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void getModuleCode_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        ModuleCode newModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS_1101S);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(newModuleCode, newModule.getModuleCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void getCredits_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Credits newCredits \u003d new Credits(VALID_CREDITS_4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(newCredits, newModule.getCredits());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void getSemester_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Semester newSemester \u003d new Semester(VALID_SEMESTER_Y1S1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withSemester(VALID_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(Optional.of(newSemester), newModule.getSemester());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void getGrade_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Grade newGrade \u003d new Grade(VALID_GRADE_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withGrade(VALID_GRADE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(Optional.of(newGrade), newModule.getGrade());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void isDone_gradePresent_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withGrade(VALID_GRADE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertTrue(newModule.isDone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void isDone_gradeNotPresent_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Optional\u003cGrade\u003e grade \u003d Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new Module(new Title(VALID_TITLE_CS_1101S),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS_1101S),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            new Credits(VALID_CREDITS_4),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Optional.of(new Semester(VALID_SEMESTER_Y1S1)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            grade);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertFalse(newModule.isDone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.isSameModule(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // same module"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.isSameModule(cs1101s));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different module"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.isSameModule(cs2100));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different title"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withTitle(VALID_TITLE_CS_2100)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.isSameModule(editedModule));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different module code"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS_2100)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.isSameModule(editedModule));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different credits"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withCredits(VALID_CREDITS_6)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.isSameModule(editedModule));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different semester"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withSemester(VALID_SEMESTER_Y1S2)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.isSameModule(editedModule));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different grade"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withGrade(VALID_GRADE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.isSameModule(editedModule));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // same module"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.equals(cs1101s));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // copied module"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module moduleCopy \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(cs1101s.equals(moduleCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(requirement));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different module code"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS_2100)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(editedModule));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different title"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withTitle(VALID_TITLE_CS_2100)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(editedModule));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different credits"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withCredits(VALID_CREDITS_6)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(editedModule));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different semester"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withSemester(VALID_SEMESTER_Y1S2)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(editedModule));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        // different grade"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withGrade(VALID_GRADE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(cs1101s.equals(editedModule));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 28,
      "dargohzy": 149,
      "yjskrs": 19
    }
  },
  {
    "path": "src/test/java/igrad/model/module/SemesterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidSemester_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidSemester \u003d \"Y1S3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidSemester));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid semester (only digits)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"11\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid semester (Sem 3 is not a valid sem)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y1S3\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y10S2\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid semester"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"Y1S1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "teriaiw": 20,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/model/module/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            firstPredicateKeywordList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 12,
      "-": 53,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/test/java/igrad/model/module/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null Title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid Title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Software Engineering\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 27,
      "nathanaelseen": 6
    }
  },
  {
    "path": "src/test/java/igrad/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_1101S;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module cs1101s \u003d TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module cs2100 \u003d TypicalModules.CS2100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains((Module) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void contains_nullModules_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertFalse(uniqueModuleList.contains(cs1101s));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertTrue(uniqueModuleList.contains(cs1101s));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertTrue(uniqueModuleList.contains(editedModule));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add((Module) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(cs1101s));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .setModule(null, cs1101s));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .setModule(cs1101s, null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .setModule(cs1101s, cs1101s));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.setModule(cs1101s, cs1101s);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList differentUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        differentUniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(differentUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(cs1101s)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.setModule(cs1101s, editedModule);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList differentUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        differentUniqueModuleList.add(editedModule);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(differentUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.setModule(cs1101s, cs2100);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList differentUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        differentUniqueModuleList.add(cs2100);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(differentUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        Module newModule \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withTitle(VALID_TITLE_CS_2100)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(newModule));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove((Module) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(cs1101s));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.remove(cs1101s);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList differentUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(differentUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            .setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList newUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        newUniqueModuleList.add(cs2100);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        uniqueModuleList.setModules(newUniqueModuleList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(newUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        uniqueModuleList.add(cs1101s);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(cs2100);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        UniqueModuleList newUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        newUniqueModuleList.add(cs2100);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(newUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(cs1101s, cs1101s);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(DuplicateModuleException.class, ()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 30,
      "dargohzy": 84,
      "yjskrs": 76
    }
  },
  {
    "path": "src/test/java/igrad/model/requirement/CreditsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Credits(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Credits(invalidCredits));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Credits(0, 8, 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Credits(8, 0, 8));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isValidCreditsOneParameter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null credits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Credits.isValidCredits(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\" \")); // whitespace only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"a\")); // alphabet only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\" 123\")); // integer string starting with whitespace"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"123 \")); // integer string ending with whitespace"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"12 12\")); // space-separated integer string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"12.3\")); // non-integer number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"12+4\")); // special character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"0\")); // value 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"-1\")); // negative"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // valid credits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"1\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"010\")); // starts with 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isValidCreditsThreeParameters() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int zeroValue \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int negativeValue \u003d -1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int valueA \u003d 40; // A is bigger than B"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int valueB \u003d 20; // B is bigger than C"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int valueC \u003d 10; // C is the smallest of ABC"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that required credits cant be 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(zeroValue, valueB, valueC));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that the other two fields can be 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(valueA, zeroValue, zeroValue));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that all fields cant be less than 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(negativeValue, valueB, valueC));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(valueA, negativeValue, valueC));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(valueA, valueB, negativeValue));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that fulfilled must not be more than assigned"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Credits.isValidCredits(valueA, valueB, valueA));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that fulfilled and assigned can be equal"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(valueA, valueB, valueB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // test that all three can be equal"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Credits.isValidCredits(valueB, valueB, valueB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isFulfilled_creditsFulfilledLessThanCreditsRequired_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits creditsWithOneParameterConstructor \u003d new Credits(\"40\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(creditsWithOneParameterConstructor.isFulfilled());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits creditsWithTwoParameterConstructor \u003d new Credits(20, 4, 4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(creditsWithTwoParameterConstructor.isFulfilled());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isFulfilled_creditsFulfilledMoreThanOrEqualsCreditsRequired_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits creditsWithTwoParameterSameArguments \u003d new Credits(20, 20, 20);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(creditsWithTwoParameterSameArguments.isFulfilled());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits creditsWithTwoParameterDifferentArguments \u003d new Credits(20, 32, 32);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(creditsWithTwoParameterDifferentArguments.isFulfilled());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credA \u003d new Credits(\"4\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credB \u003d new Credits(\"4\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credC \u003d new Credits(4, 0, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credD \u003d new Credits(4, 4, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credE \u003d new Credits(4, 4, 4);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits credF \u003d new Credits(\"8\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(credA.equals(credA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(credA.equals(credB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(credA.equals(credC));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(credA.equals(credD));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(credA.equals(credE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(credA.equals(credF));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 112
    }
  },
  {
    "path": "src/test/java/igrad/model/requirement/RequirementCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RequirementCode(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_invalidRequirementCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String invalidRequirementCode \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RequirementCode(invalidRequirementCode));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isValidRequirementCode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null RequirementCode"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RequirementCode.isValidRequirementCode(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid RequirementCode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(RequirementCode.isValidRequirementCode(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // no alphabets or numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(RequirementCode.isValidRequirementCode(\"-\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(RequirementCode.isValidRequirementCode(\" CSF0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(RequirementCode.isValidRequirementCode(\"CSF0 \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(RequirementCode.isValidRequirementCode(\" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // only numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(RequirementCode.isValidRequirementCode(\"12\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // valid RequirementCode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(RequirementCode.isValidRequirementCode(\"CSF0\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode codeA \u003d new RequirementCode(\"AS1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode codeB \u003d new RequirementCode(\"AS1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        RequirementCode codeC \u003d new RequirementCode(\"AS2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(codeA.equals(codeA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(codeA.equals(codeB));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(codeA.equals(codeC));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 53
    }
  },
  {
    "path": "src/test/java/igrad/model/requirement/RequirementTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_MS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_GE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_MS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_MS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalModules.getTypicalRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_withEmptyRequirement_createsRequirementWithEmptyModuleList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.emptyList(), requirement.getModuleList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetModules_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.resetModules(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetModules_withValidModuleList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e modules \u003d getTypicalModules();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.resetModules(modules);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(getTypicalRequirement(), requirement);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetModules_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module other \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"Pragramming Methadolajy\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCredits(\"8\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e modules \u003d Arrays.asList(module, other);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e requirement.resetModules(modules));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.hasModule(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.hasModules(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasModule_moduleNotInRequirement_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(requirement.hasModule(CS1101S));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasModule_moduleInRequirement_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(CS1101S);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(requirement.hasModule(CS1101S));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasModule_withSameIdentityInRequirement_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(CS1101S);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(CS1101S)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"Some Other Title\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(requirement.hasModule(editedModule));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.addModule(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule_moduleNotInRequirement_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(CS1101S);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(CS2100);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement other \u003d getTypicalRequirement();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(requirement, other);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule_moduleInRequirement_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(CS1101S);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e requirement.addModule(CS1101S));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule_withSameIdentityInRequirement_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module sameModule \u003d new ModuleBuilder(module)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"Another Title\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e requirement.addModule(sameModule));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_targetNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.setModule(null, module));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_editedModuleNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.setModule(module, null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_withSameIdentityInRequirement_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.singletonList(module), requirement.getModuleList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module modifiedModule \u003d new ModuleBuilder(module)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"New Title\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.setModule(module, modifiedModule);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.singletonList(modifiedModule), requirement.getModuleList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_withDifferentIdentityInRequirement_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.singletonList(module), requirement.getModuleList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module modifiedModule \u003d new ModuleBuilder(module)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withModuleCode(\"RN1111G\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"New Title\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.setModule(module, modifiedModule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.singletonList(modifiedModule), requirement.getModuleList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_targetDoesNotExistInRequirement_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e requirement.setModule(module, module));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder(module)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withModuleCode(\"RNG1111\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"New Title\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(otherModule);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module modifiedOtherModule \u003d new ModuleBuilder(otherModule).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e requirement.setModule(module, modifiedOtherModule));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModule_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requirement.removeModule(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModule_moduleInRequirement_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.removeModule(module);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.emptyList(), requirement.getModuleList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModule_moduleNotInRequirement_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e requirement.removeModule(module));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirement.addModule(module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module modifiedModule \u003d new ModuleBuilder(module)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"This is a title\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e requirement.removeModule(modifiedModule));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getTitle_withEmptyRequirement_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title newTitle \u003d new Title(VALID_REQ_TITLE_MS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement newReq \u003d new RequirementBuilder(requirement)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newTitle, newReq.getTitle());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getCredits_withEmptyRequirement_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Credits newCreds \u003d new Credits(VALID_REQ_CREDITS_GE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement newReq \u003d new RequirementBuilder(requirement)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newCreds, newReq.getCredits());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getCreditsRequired_withCreditsRequiredValue_nonZero() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertNotEquals(0, requirement.getCreditsRequired());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getCreditsFulfilled_withEmptyRequirement_returnsZero() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(0, requirement.getCreditsFulfilled());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e requirement.getModuleList().remove(0));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isSameRequirement() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(GENERAL_ELECTIVES.isSameRequirement(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same requirement"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(GENERAL_ELECTIVES.isSameRequirement(GENERAL_ELECTIVES));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different title"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(GENERAL_ELECTIVES)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(GENERAL_ELECTIVES.isSameRequirement(editedRequirement));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different credits"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        editedRequirement \u003d new RequirementBuilder(GENERAL_ELECTIVES)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(VALID_REQ_CREDITS_MS)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(GENERAL_ELECTIVES.isSameRequirement(editedRequirement));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different requirement code"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        editedRequirement \u003d new RequirementBuilder(GENERAL_ELECTIVES)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withRequirementCode(VALID_REQ_CODE_MS)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(GENERAL_ELECTIVES.isSameRequirement(editedRequirement));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same requirement"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(GENERAL_ELECTIVES.equals(GENERAL_ELECTIVES));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // copied requirement"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirementCopy \u003d new RequirementBuilder(GENERAL_ELECTIVES).build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(GENERAL_ELECTIVES.equals(requirementCopy));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(GENERAL_ELECTIVES.equals(module));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different requirement title and credits"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement other \u003d new RequirementBuilder(GENERAL_ELECTIVES)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(VALID_REQ_TITLE_MS)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(VALID_REQ_CREDITS_MS)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(GENERAL_ELECTIVES.equals(other));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 269
    }
  },
  {
    "path": "src/test/java/igrad/model/requirement/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(Title.isValidTitle(\" Foundation\")); // starts with a whitespace"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // assertFalse(Title.isValidTitle(\"1\")); // number only (to be fixed)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // assertFalse(Title.isValidTitle(\"1 \")); // number and space only (to be fixed)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"computersciencefoundation\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"computer science foundation\")); // contains spaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Computer Science Foundation\")); // contains capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"/Computer Science Foundation\")); // starts with non-alphabet"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Computer Science Foundation 1\")); // contains alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Requirements (for 2nd major)\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(Title.isValidTitle(\"日本研究学科\")); // contains only non-alphaneumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void toString_sameTitle_equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String str \u003d \"Title\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title title \u003d new Title(str);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(title.toString(), str);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        String str \u003d \"Title\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Title title \u003d new Title(str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(title.equals(new Title(str)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 58
    }
  },
  {
    "path": "src/test/java/igrad/model/requirement/UniqueRequirementListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.CS_FOUNDATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.GENERAL_ELECTIVES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalRequirements.UNRESTRICTED_ELECTIVES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.DuplicateRequirementException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.RequirementNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.RequirementBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueRequirementListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueRequirementList uniqueRequirementList \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_nullRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_requirementNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(uniqueRequirementList.contains(CS_FOUNDATION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_requirementInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(uniqueRequirementList.contains(CS_FOUNDATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_requirementWithSameIdentity_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(CS_FOUNDATION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(\"40\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(uniqueRequirementList.contains(editedRequirement));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add_nullRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add_requirementIsSameRequirement_throwsDuplicateRequirementException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateRequirementException.class, () -\u003e uniqueRequirementList.add(CS_FOUNDATION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add_requirementWithSameIdentity_throwsDuplicateRequirementException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(CS_FOUNDATION)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(\"40\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateRequirementException.class, () -\u003e uniqueRequirementList.add(editedRequirement));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_nullTargetRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirement(null, CS_FOUNDATION));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_nullEditedRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirement(CS_FOUNDATION, null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_targetRequirementNotInList_throwsRequirementNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(RequirementNotFoundException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirement(CS_FOUNDATION, CS_FOUNDATION));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_editedRequirementIsSameRequirement_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.setRequirement(CS_FOUNDATION, CS_FOUNDATION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UniqueRequirementList differentListWithSameRequirement \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        differentListWithSameRequirement.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(differentListWithSameRequirement, uniqueRequirementList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_editedRequirementWithSameIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement editedRequirement \u003d new RequirementBuilder(CS_FOUNDATION)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withTitle(\"New Title\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .withCreditsOneParameter(\"36\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.setRequirement(CS_FOUNDATION, editedRequirement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UniqueRequirementList differentListWithSameRequirement \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        differentListWithSameRequirement.add(editedRequirement);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(differentListWithSameRequirement, uniqueRequirementList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement_editedRequirementInList_throwsDuplicateRequirementException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(UNRESTRICTED_ELECTIVES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateRequirementException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirement(CS_FOUNDATION, UNRESTRICTED_ELECTIVES));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements_nullRequirementList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirements((UniqueRequirementList) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirements((List\u003cRequirement\u003e) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements_uniqueRequirementList_replacesOwnListWithProvidedUniqueRequirementList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UniqueRequirementList newRequirementList \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        newRequirementList.add(UNRESTRICTED_ELECTIVES);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.setRequirements(newRequirementList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newRequirementList, uniqueRequirementList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        newRequirementList.setRequirements(uniqueRequirementList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(uniqueRequirementList, newRequirementList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cRequirement\u003e requirementList \u003d Collections.singletonList(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.setRequirements(requirementList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UniqueRequirementList newRequirementList \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        newRequirementList.add(GENERAL_ELECTIVES);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newRequirementList, uniqueRequirementList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements_listWithDuplicateRequirements_throwsDuplicateRequirementException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cRequirement\u003e listWithDuplicateRequirements \u003d Arrays.asList(CS_FOUNDATION, CS_FOUNDATION);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateRequirementException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .setRequirements(listWithDuplicateRequirements));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_nullRequirement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRequirementList.remove(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_requirementFromEmptyList_throwsRequirementNotFoundException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(RequirementNotFoundException.class, () -\u003e uniqueRequirementList.remove(CS_FOUNDATION));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_nonExistingRequirement_throwsRequirementNotFoundException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(RequirementNotFoundException.class, () -\u003e uniqueRequirementList.remove(CS_FOUNDATION));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_existingRequirement_removesRequirement() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.add(CS_FOUNDATION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        uniqueRequirementList.remove(CS_FOUNDATION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UniqueRequirementList expectedUniqueRequirementList \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(expectedUniqueRequirementList, uniqueRequirementList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueRequirementList"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 193
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.testutil.TypicalModules.CS1101S;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TITLE \u003d \"Programming Methodology!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE \u003d \"CS2040S\u0026\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_CREDITS \u003d \"4%\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_SEMESTER \u003d \"4%\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_TITLE \u003d CS1101S.getTitle().toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d CS1101S.getModuleCode().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALID_CREDITS \u003d CS1101S.getCredits().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //public static final String VALID_SEMESTER \u003d PROGRAMMING_METHODOLOGY.getSemester().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // TODO: add more tests later"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS1101S);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assertEquals(CS1101S, module.toModelType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //JsonAdaptedModule person \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        new JsonAdaptedModule(INVALID_TITLE, VALID_MODULE_CODE, VALID_CREDITS, VALID_MEMO, VALID_SEMESTER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //                VALID_TAGS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "yjskrs": 3,
      "-": 11,
      "nathanaelseen": 15
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonAdaptedRequirementTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonAdaptedRequirementTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonCourseBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonCourseBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCourseBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCourseBook(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCourseBook\u003e readCourseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new JsonCourseBookStorage(Paths.get(filePath)).readCourseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(readCourseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"notJsonFormatCourseBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_invalidCourseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"invalidModuleCourseBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_invalidAndValidPersonCourseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"invalidAndValidModuleCourseBook.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readAndSaveCourseBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCourseBook.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook original \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Creating a course info for this test, because a course book with modules must have a course info"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Also, since there are modules in a course book, the cap has to be computed as well"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * based on those modules and placed in the course info"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e name \u003d Optional.of(new Name(\"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d CourseInfo.computeCap(original.getModuleList(), original.getRequirementList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d CourseInfo.computeCredits(original.getRequirementList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d CourseInfo.computeSemesters(Optional.of(new Semesters(\"5\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            original.getModuleList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        original.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage jsonCourseBookStorage \u003d new JsonCourseBookStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        jsonCourseBookStorage.saveCourseBook(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook readBack \u003d jsonCourseBookStorage.readCourseBook(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Modify data, overwrite existing file, and read back"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.removeModule(TypicalModules.COMPUTER_ORGANISATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //jsonCourseBookStorage.saveCourseBook(original, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //readBack \u003d jsonCourseBookStorage.readCourseBook(filePath).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //jsonCourseBookStorage.saveCourseBook(original); // file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //readBack \u003d jsonCourseBookStorage.readCourseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook_nullCourseBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCourseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Saves {@code courseBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private void saveCourseBook(ReadOnlyCourseBook courseBook, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                .saveCourseBook(courseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCourseBook(new CourseBook(), null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 93,
      "nathanaelseen": 35
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonSerializableCourseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonSerializableCourseBookTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableModuleBookTest\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesCourseBook.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleCourseBook.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleCourseBook.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook typicalPersonsCourseBook \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(courseBookFromFile, typicalPersonsCourseBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCourseBook.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 8,
      "-": 22,
      "nathanaelseen": 12
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"coursebook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 6,
      "-": 111,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d new JsonCourseBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storageManager \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        original.setGuiSettings(new GuiSettings(800, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void courseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * {@link JsonCourseBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCourseBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook original \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Creating a course info for this test, because a course book with modules must have course info"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cName\u003e name \u003d Optional.of(new Name(\"abc\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCap\u003e cap \u003d CourseInfo.computeCap(original.getModuleList(), original.getRequirementList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cCredits\u003e credits \u003d CourseInfo.computeCredits(original.getRequirementList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cSemesters\u003e semesters \u003d CourseInfo.computeSemesters(Optional.of(new Semesters(\"5\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            original.getModuleList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        original.setCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storageManager.saveCourseBook(original);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook retrieved \u003d storageManager.readCourseBook().get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(original, new CourseBook(retrieved));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getCourseBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertNotNull(storageManager.getCourseBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 17,
      "-": 49,
      "nathanaelseen": 18
    }
  },
  {
    "path": "src/test/java/igrad/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/igrad/testutil/CourseBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building CourseBook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * {@code CourseBook ab \u003d new CourseBookBuilder().withModule(module).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private CourseBook courseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder(CourseBook courseBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBook \u003d courseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a new {@code Module} to the {@code CourseBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addModule(module);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a new {@code Requirement} to the {@code CourseBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder requirement(Requirement requirement) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 44
    }
  },
  {
    "path": "src/test/java/igrad/testutil/CourseInfoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.Cap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Credits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class to help with building {@code CourseInfo} objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfoBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bachelor of Computing in Computer Science\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_CAP \u003d \"4.5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int DEFAULT_CREDITS_REQUIRED \u003d 108;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final int DEFAULT_CREDITS_FULFILLED \u003d 45;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_SEMESTERS \u003d \"3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Optional\u003cCap\u003e cap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Optional\u003cCredits\u003e credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Optional\u003cSemesters\u003e semesters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d Optional.of(new Name(DEFAULT_NAME));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap \u003d Optional.of(new Cap(DEFAULT_CAP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d Optional.of(new Credits(DEFAULT_CREDITS_REQUIRED, DEFAULT_CREDITS_FULFILLED));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesters \u003d Optional.of(new Semesters(DEFAULT_SEMESTERS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Initializes the CourseInfoBuilder with the data of {@code courseInfoToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder(CourseInfo courseInfoToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d courseInfoToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap \u003d courseInfoToCopy.getCap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d courseInfoToCopy.getCredits();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesters \u003d courseInfoToCopy.getSemesters();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Name} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d Optional.of(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Cap} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withCap(String cap) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.cap \u003d Optional.of(new Cap(cap));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Cap} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withCap(double cap) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.cap \u003d Optional.of(new Cap(cap));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Credits} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withCredits(int creditsRequired, int creditsToFulfill) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d Optional.of(new Credits(creditsRequired, creditsToFulfill));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semesters} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withSemesters(String totalSemesters) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d Optional.of(new Semesters(totalSemesters));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semesters} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withSemestersTwoParameters(int totalSemesters, int remainingSemesters) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d Optional.of(new Semesters(totalSemesters, remainingSemesters));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code CourseInfo} object based on the details supplied (if any)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Set the Credits field to {@code Optional.empty}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withCreditsOptional() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Set the Cap field to {@code Optional.empty}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withCapOptional() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.cap \u003d Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Set the Semesters field to {@code Optional.empty}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withSemestersOptional() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semesters \u003d Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code CourseInfo} object with all fields Optional.empty()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo buildEmptyCourseInfo() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesters \u003d Optional.empty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code CourseInfo} object with all fields null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo buildNullCourseInfo() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        cap \u003d null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semesters \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(name, cap, credits, semesters);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 1,
      "nathanaelseen": 150
    }
  },
  {
    "path": "src/test/java/igrad/testutil/EditCourseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.course.CourseEditCommand.EditCourseDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Semesters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class to help with building EditCourseDescriptor objects (in course edit command)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class EditCourseDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private EditCourseDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptorBuilder(EditCourseDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.descriptor \u003d new EditCourseDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an {@code EditCourseDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptorBuilder(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditCourseDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setName(courseInfo.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemesters(courseInfo.getSemesters());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Name} of the {@code EditCourseDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setName(Optional.of(new Name(name)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semesters} of the {@code EditCourseDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptorBuilder withSemesters(String semester) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemesters(Optional.of(new Semesters(semester)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditCourseDescriptor build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 55
    }
  },
  {
    "path": "src/test/java/igrad/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects (in module edit command)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleEditCommand.EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new ModuleEditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder(ModuleEditCommand.EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.descriptor \u003d new ModuleEditCommand.EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setTitle(module.getTitle());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setCredits(module.getCredits());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(module.getSemester());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Title} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Credits} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setCredits(new Credits(credits));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(Optional.of(new Semester(semester)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 7,
      "-": 28,
      "nathanaelseen": 39
    }
  },
  {
    "path": "src/test/java/igrad/testutil/EditModuleDescriptorBuilder2.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleDoneCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects (in module done command)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class EditModuleDescriptorBuilder2 {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder2() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder2(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder2(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setGrade(module.getGrade());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(module.getSemester());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Grade} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder2 withGrade(String grade) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setGrade(Optional.of(new Grade(grade)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder2 withSemester(String semester) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(Optional.of(new Semester(semester)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 55
    }
  },
  {
    "path": "src/test/java/igrad/testutil/EditRequirementDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementEditCommand.EditRequirementDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building EditRequirementDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditRequirementDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private EditRequirementDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptorBuilder(EditRequirementDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.descriptor \u003d new EditRequirementDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an {@code EditRequirementDescriptor} with fields containing {@code requirement}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptorBuilder(Requirement requirement) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor \u003d new EditRequirementDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor.setTitle(requirement.getTitle());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor.setCredits(requirement.getCredits());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code Title} of the {@code EditRequirementDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code Credits} of the {@code EditRequirementDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptorBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor.setCredits(new Credits(credits));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an EditRequirementDescriptor object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditRequirementDescriptor build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 62
    }
  },
  {
    "path": "src/test/java/igrad/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Grade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d \"4\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Good Module\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Optional\u003cSemester\u003e semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semester \u003d Optional.of(new Semester(DEFAULT_SEMESTER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        grade \u003d Optional.of(new Grade(DEFAULT_GRADE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title \u003d moduleToCopy.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        grade \u003d moduleToCopy.getGrade();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Title} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Credits} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semester \u003d Optional.of(new Semester(semester));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d Optional.of(new Grade(grade));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Sets all the optional fields to empty"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleBuilder withoutOptionals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.grade \u003d Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Builds a {@code Module} for testing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(title, moduleCode, credits, semester, grade);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 23,
      "yjskrs": 8,
      "-": 28,
      "nathanaelseen": 47
    }
  },
  {
    "path": "src/test/java/igrad/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.module.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return ModuleAddCommand.MODULE_ADD_COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_TITLE + module.getTitle().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + module.getModuleCode().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_CREDITS + module.getCredits().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_SEMESTER + module.getSemester().get().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getEditModuleDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getModuleCode().ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(moduleCode.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getCredits().ifPresent(credits -\u003e sb.append(PREFIX_CREDITS)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(credits.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getSemester().ifPresent(semester -\u003e sb.append(PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(semester.get().value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 10,
      "-": 22,
      "nathanaelseen": 23
    }
  },
  {
    "path": "src/test/java/igrad/testutil/RequirementBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_CSF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_CSF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Credits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.RequirementCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building {@code Requirement} objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String DEFAULT_REQUIREMENT_CODE \u003d VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d VALID_REQ_TITLE_CSF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d VALID_REQ_CREDITS_CSF;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private RequirementCode requirementCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private UniqueModuleList modules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes the RequirementBuilder with the default data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirementCode \u003d new RequirementCode(DEFAULT_REQUIREMENT_CODE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes the RequirementBuilder with the {@code Requirement requirementToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder(Requirement requirementToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirementCode \u003d requirementToCopy.getRequirementCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        title \u003d requirementToCopy.getTitle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        credits \u003d requirementToCopy.getCredits();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.setModules(requirementToCopy.getModuleList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code RequirementCode} of the {@code Requirement} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder withRequirementCode(String requirementCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirementCode \u003d new RequirementCode(requirementCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code Title} of the {@code Requirement} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code Credits} of the {@code Requirement} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder withCreditsOneParameter(String creditsRequired) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d new Credits(creditsRequired);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code Credits} of the {@code Requirement} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder withCreditsThreeParameters(int creditsRequired,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                         int creditsAssigned,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                                         int creditsFulfilled) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d new Credits(creditsRequired, creditsAssigned, creditsFulfilled);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Update credits value with addition of modules."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder updateCredits() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int creditsAssigned \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int creditsFulfilled \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            creditsAssigned +\u003d module.getCredits().toInteger();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (module.isDone()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                creditsFulfilled +\u003d module.getCredits().toInteger();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.credits \u003d new Credits(credits.getCreditsRequired(), creditsAssigned, creditsFulfilled);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the {@code UniqueModuleList} of the {@code Requirement} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public RequirementBuilder withModules(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.setModules(moduleList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return updateCredits();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a requirement object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Requirement(requirementCode, title, credits, moduleList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 119,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/test/java/igrad/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //     return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //     return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //     return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 22,
      "-": 29
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalCourseInfos.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "//@@author nathanaelseen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSCI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CAP_BCOMPSEC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSCI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_NAME_BCOMPSEC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSCI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.course.CourseCommandTestUtil.VALID_COURSE_SEMESTERS_BCOMPSEC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class containing a list of {@code CourseInfo} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TypicalCourseInfos {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final CourseInfo BCOMPSCI \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withName(VALID_COURSE_NAME_BCOMPSCI)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCap(VALID_COURSE_CAP_BCOMPSCI)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSCI,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSCI)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSCI)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final CourseInfo BCOMPSEC \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withName(VALID_COURSE_NAME_BCOMPSEC)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCap(VALID_COURSE_CAP_BCOMPSEC)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCredits(VALID_COURSE_CREDITS_REQUIRED_BCOMPSEC,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            VALID_COURSE_CREDITS_FULFILLED_BCOMPSEC)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withSemesters(VALID_COURSE_SEMESTERS_BCOMPSEC)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private TypicalCourseInfos() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a list of all the typical course infos."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static List\u003cCourseInfo\u003e getTypicalCourseInfos() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BCOMPSCI, BCOMPSEC));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 51
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_4;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_6;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_GRADE_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_GRADE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_GRADE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_1101S;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2040;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS_2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_Y1S1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_Y1S2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_1101S;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2040;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2100;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2101;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_CS_2103T;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Module CS2040 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_TITLE_CS_2040)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS_2040)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withSemester(VALID_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Module CS2101 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_TITLE_CS_2101)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS_2101)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withSemester(VALID_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_TITLE_CS_2103T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS_2103T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withSemester(VALID_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Module CS1101S \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_TITLE_CS_1101S)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS_1101S)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_CREDITS_4)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        .withSemester(VALID_SEMESTER_Y1S1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        .withGrade(VALID_GRADE_PROGRAMMING_METHODOLOGY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Module CS2100 \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withTitle(VALID_TITLE_CS_2100)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_CS_2100)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        .withCredits(VALID_CREDITS_6)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        .withSemester(VALID_SEMESTER_Y1S2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        .withGrade(VALID_GRADE_COMPUTER_ORGANISATION).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an {@code CourseBook} with all the typical modules."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static CourseBook getTypicalCourseBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addModule(module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns an empty {@code CourseBook}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static CourseBook getEmptyCourseBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new CourseBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a {@code Requirement} with all the typical modules."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static Requirement getTypicalRequirement() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Requirement requirement \u003d new RequirementBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requirement.addModule(module);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirement;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1101S, CS2100));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 53,
      "dargohzy": 8,
      "yjskrs": 16,
      "nathanaelseen": 34
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalRequirements.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "//@@author yjskrs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_CSF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_GE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_IP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CODE_UE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_ASSIGNED_IP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_CSF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_FULFILLED_IP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_GE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_REQUIRED_IP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_CREDITS_UE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_CSF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_GE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_IP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.requirement.RequirementCommandTestUtil.VALID_REQ_TITLE_UE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class containing a list of {@code Requirement} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class TypicalRequirements {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final Requirement CS_FOUNDATION \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withRequirementCode(VALID_REQ_CODE_CSF)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withTitle(VALID_REQ_TITLE_CSF)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withCreditsOneParameter(VALID_REQ_CREDITS_CSF)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withModules(getTypicalModules())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final Requirement UNRESTRICTED_ELECTIVES \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withRequirementCode(VALID_REQ_CODE_UE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withTitle(VALID_REQ_TITLE_UE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withCreditsOneParameter(VALID_REQ_CREDITS_UE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final Requirement GENERAL_ELECTIVES \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withRequirementCode(VALID_REQ_CODE_GE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withTitle(VALID_REQ_TITLE_GE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withCreditsOneParameter(VALID_REQ_CREDITS_GE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final Requirement IT_PROFESSIONALISM \u003d new RequirementBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withRequirementCode(VALID_REQ_CODE_IP)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withTitle(VALID_REQ_TITLE_IP)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .withCreditsThreeParameters(VALID_REQ_CREDITS_REQUIRED_IP, VALID_REQ_CREDITS_ASSIGNED_IP,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            VALID_REQ_CREDITS_FULFILLED_IP)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an {@code CourseBook} with all the typical requirements."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static CourseBook getTypicalCourseBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Requirement requirement : getTypicalRequirements()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a list of all the typical requirements."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static List\u003cRequirement\u003e getTypicalRequirements() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS_FOUNDATION, UNRESTRICTED_ELECTIVES, GENERAL_ELECTIVES));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 77
    }
  },
  {
    "path": "src/test/java/igrad/ui/StatusBarTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class StatusBarTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "/*    private final StatusBar statusBar \u003d new StatusBar();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(\"Course: \", statusBar.getLabelText());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void hasCourseName_notSet_returnsFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertFalse(statusBar.isCourseNameSet());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void hasCourseName_set_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        statusBar.setCourseName(\"Computer Science\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertTrue(statusBar.isCourseNameSet());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void isStatusBarUpdating() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        assertEquals(\"Course: Computer Science\", statusBar.getLabelText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 33
    }
  },
  {
    "path": "src/test/java/igrad/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/igrad/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 9,
      "-": 105
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/StatusBar.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "           prefWidth\u003d\"600.0\" styleClass\u003d\"status-bar\" stylesheets\u003d\"@DarkTheme.css\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel fx:id\u003d\"course\" style\u003d\"-fx-background-color: transparent;\" text\u003d\"Course\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 15
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "\u003c?import igrad.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "\u003cfx:root type\u003d\"igrad.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "nathanaelseen": 1
    }
  }
]
