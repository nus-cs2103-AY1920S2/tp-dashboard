[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "mainClassName \u003d \u0027seedu.volant.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027volant.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u0027site-name\u0027: \u0027Volant by CS2103T-F09-4\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F09-4/main\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /*\u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)*/"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/volant/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/volant/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/volant/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.JsonVolantStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.StorageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.VolantStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.HomeLogicManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected HomeModelManager model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected ReadOnlyUserPrefs userPrefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TripList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        VolantStorage volantStorage \u003d new JsonVolantStorage(userPrefs.getVolantFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage \u003d new StorageManager(volantStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * Initialising program with home logic manager."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logic \u003d new HomeLogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns application user preferences."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns a {@code HomeModelManager} with the data from {@code storage}\u0027s trip list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The data from the sample trip list will be used instead if {@code storage}\u0027s trip list is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * or an empty trip list will be used instead if errors occur when reading {@code storage}\u0027s trip list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HomeModelManager initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Optional\u003cReadOnlyTripList\u003e tripListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ReadOnlyTripList initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListOptional \u003d storage.readTripList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!tripListOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample trip list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            initialData \u003d tripListOptional.orElseGet(SampleDataUtil::getSampleTripList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty trip list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            initialData \u003d new TripList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty trip list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            initialData \u003d new TripList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new HomeModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TripList\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logger.info(\"Starting Volant \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Volant ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 60,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String LOG_FILE \u003d \"volant.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND_ITINERARY \u003d \"I do not recognize this command.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Here are some commands you can try:\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \" add\\n delete\\n edit\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command! If you need help, please enter `help`.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_INVALID_TRIP_DISPLAYED_INDEX \u003d \"The trip index provided is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_TRIPS_LISTED_OVERVIEW \u003d \"%1$d trip(s) listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_ACTIVITIES_LISTED_OVERVIEW \u003d \"%1$d activity(s) listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Please input a valid date in DD-MM-YYYY format!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Please input a valid time in HH:MM format!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_ERROR_LOADING_DATE \u003d \"Error loading date. Date storage in file manipulated.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_ERROR_LOADING_TIME \u003d \"Error loading time. Time storage in file manipulated.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 10,
      "zsoh97": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/exceptions/DatePassedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Represents an error when a activity to be done is set for a past date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class DatePassedException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public DatePassedException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsoh97": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/exceptions/DateRangeOutOfBoundsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Represents an error when a activity outside the trip\u0027s date-range is added."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class DateRangeOutOfBoundsException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public DateRangeOutOfBoundsException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsoh97": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.HomeLogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Logger LOGGER \u003d LogsCenter.getLogger(HomeLogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the storage object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Storage getStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the model object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Model getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the user prefs\u0027 volant file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Path getVolantFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 56
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/Page.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents different page contexts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public enum Page {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    HOME, TRIP, ITINERARY, JOURNAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.HOME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.ITINERARY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.JOURNAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Goes back one page from current page."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Goes back to the previous page.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String BACK_HOMEPAGE \u003d \"You are already on the home page.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String BACK_TRIP \u003d \"You have gone back to the home page.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String BACK_FEATURE \u003d \"You have returned to the trip page of TRIP: %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles back command if command was entered from the Trip page."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private CommandResult handleBackFromTrip(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripModelManager t \u003d ((TripModelManager) model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(BACK_TRIP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        commandResult.setBack();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles back command if command was entered from the Itinerary page."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private CommandResult handleBackFromItinerary(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ItineraryModelManager t \u003d ((ItineraryModelManager) model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(BACK_FEATURE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t.getTrip().getName().toString()), t.getTrip());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        commandResult.setBack();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles back command if command was entered from the Journal page."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private CommandResult handleBackFromJournal(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        JournalModelManager t \u003d ((JournalModelManager) model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(BACK_FEATURE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t.getTrip().getName().toString()), t.getTrip());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        commandResult.setBack();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Page page \u003d model.getPage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // If in a TRIP page, go back to HOME page."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (page.equals(TRIP)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return handleBackFromTrip(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if (page.equals(ITINERARY)) { // If in the itinerary page"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return handleBackFromItinerary(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if (page.equals(JOURNAL)) { // If in the journal page"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return handleBackFromJournal(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if (page.equals(HOME)) { // If in the home page"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(BACK_HOMEPAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 50,
      "zsoh97": 38
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected final String feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected final boolean isShowHelp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected final boolean isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /** The application should switch pages. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected boolean isGoto;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected boolean isBack;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected TripList tripList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Trip trip;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected TripFeature tripFeature;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Page targetPage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected boolean isHome;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean isGoto, boolean isBack) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isShowHelp \u003d showHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isExit \u003d exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isGoto \u003d isGoto;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isBack \u003d isBack;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates command result for commands to navigate:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      1) From a TRIP page back to the HOME page"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      2) From a TRIP_FEATURE page back to the HOME page"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      3) Back to HOME page from a TRIP page"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult(String feedbackToUser, TripList tripList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this(feedbackToUser, false, false, true, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.tripList \u003d tripList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates command result for commands to navigate:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      1) From the HOME page to a TRIP page"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      2) Back to the TRIP page from a TRIP_FEATURE page"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult(String feedbackToUser, Trip trip) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this(feedbackToUser, false, false, true, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates command result for commands to navigate:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *      1) From a TRIP page to a TRIP_FEATURE page"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult(String feedbackToUser, TripFeature tripFeature) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this(feedbackToUser, false, false, true, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.tripFeature \u003d tripFeature;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates command result for commands to navigate to the Home page."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult(String feedbackToUser, Model model) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isHome \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Page getTargetPage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return targetPage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isHome() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isHome;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isGoto() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isGoto;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isBack() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isBack;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setBack() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.isBack \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList getTripList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripFeature getTripFeature() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripFeature;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 isGoto \u003d\u003d otherCommandResult.isGoto"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 isBack \u003d\u003d otherCommandResult.isBack;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isExit, isGoto);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 3,
      "raniceyue": 115,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Volant as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Exits the program.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nTIP:\\tYou can also use the function key F1 to exit the program.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/GotoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a group of command objects that help to navigate through application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public abstract class GotoCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_USAGE_HOME \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \": Goes to a trip in the trip list. \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Parameters:\\tINDEX (must be a positive integer within range of trip list size)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example:\\t\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_USAGE_TRIP \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \": Goes to a feature in a trip.. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Parameters:\\tTRIP_FEATURE (itinerary, journal)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example:\\t\" + COMMAND_WORD + \" itinerary\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"TIP:\\t\\t\" + COMMAND_WORD + \" i and \" + COMMAND_WORD + \" j work as well.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 16,
      "zsoh97": 4
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "zsoh97": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "// TODO: Complete this implementation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Returns to HOME page from any page."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomeCommand extends GotoCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String RESULT_INVALID \u003d \"You are already on the home page.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String RESULT_SUCCESS \u003d \"You are now on the home page.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Goes back to the HOME page.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // If in the home page"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (model instanceof HomeModelManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(RESULT_INVALID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(RESULT_SUCCESS, model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 35
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/RefreshCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Refreshes the page to its original state."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class RefreshCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rf\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        + \": Reloads the current page to its original state.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        + \"\\nExample: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        + \"\\nTIP:\\t You can also enter F5 to execute this command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The page has been refreshed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new RefreshCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 24
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/RefreshCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the result of command execution where command is to refresh a page."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class RefreshCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public RefreshCommandResult(String feedbacktouser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(feedbacktouser);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 11
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "zsoh97": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Prefix PREFIX_DATERANGE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TEXT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final Prefix PREFIX_WEATHER \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final Prefix PREFIX_FEELING \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14,
      "mikhailfaiz": 2,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/GotoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.HOME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.ITINERARY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.JOURNAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.GotoTripCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.logic.commands.GotoItineraryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.logic.commands.GotoJournalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses input arguments and creates a new GotoCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class GotoCommandParser implements Parser\u003cGotoCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Trip trip;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // initializes page to be HOME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Page page \u003d HOME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs GotoCommandParser for goto commands to go to a specific trip"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoCommandParser() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs GotoCommandParser for goto commands to go to trip features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoCommandParser(Trip trip) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.page \u003d TRIP;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void setPageToJournal() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.page \u003d JOURNAL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses argument depending on which page the command is used in."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param argument"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException and gives feedback to user depending on which page the user is on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoCommand parse(String argument) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String argumentTrimmed \u003d argument.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (page \u003d\u003d TRIP) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                if (argumentTrimmed.equalsIgnoreCase(\"itinerary\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                        || argumentTrimmed.equalsIgnoreCase(\"i\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new GotoItineraryCommand(trip.getItinerary());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                } else if (argumentTrimmed.equalsIgnoreCase(\"journal\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                        || argumentTrimmed.equalsIgnoreCase(\"j\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new GotoJournalCommand(trip.getJournal());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (page \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(argument);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new GotoTripCommand(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (page \u003d\u003d ITINERARY || page \u003d\u003d JOURNAL) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (argumentTrimmed.equals(\"home\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new HomeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            /* If this statement is reached, it means that the command is invalid therefore throw exception */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (ParseException pE) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (page \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, GotoCommand.MESSAGE_USAGE_HOME, pE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, GotoCommand.MESSAGE_USAGE_TRIP, pE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 78,
      "zsoh97": 3,
      "grrrrnt": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.StartAfterEndException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.exceptions.ContentTooLongException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Weather;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"You seem to have input an invalid index.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Indexes can be found on the bottom right of a trip/activity/entry :)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String MESSAGE_START_AFTER_END \u003d \"Hey, your trip start date: %s, occurs\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \" after your trip end date: %s.\\nRevise the dates and try again!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses a {@code String address} into an {@code Location}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String trimmedAddress \u003d location.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!Location.isValidLocation(trimmedAddress)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Location(trimmedAddress);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses a {@code String dateRange} int a {@code DateRange}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Leading an trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException if the given {@code dateRange} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static DateRange parseDateRange(String dateRange) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(dateRange);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String trimmedDateRange \u003d dateRange.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!DateRange.isValidDateRange(trimmedDateRange)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(DateRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Integer[] dateFields \u003d getDateFields(trimmedDateRange);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate parsedFromDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate parsedToDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            parsedFromDate \u003d LocalDate.of(dateFields[2], dateFields[1], dateFields[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            parsedToDate \u003d LocalDate.of(dateFields[5], dateFields[4], dateFields[3]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            if (parsedFromDate.compareTo(parsedToDate) \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                throw new StartAfterEndException(String.format(MESSAGE_START_AFTER_END,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                        parsedFromDate, parsedToDate));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (StartAfterEndException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new StartAfterEndException(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return new DateRange(parsedFromDate, parsedToDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static Integer[] getDateFields(String dateRange) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String[] strFields \u003d dateRange.strip().split(\"-| to \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Integer[] dateFields \u003d new Integer[6];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        for (int i \u003d 0; i \u003c strFields.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            dateFields[i] \u003d Integer.valueOf(strFields[i]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return dateFields;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Parses {@code String s} into title"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param title String to be parsed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return title of activity."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new Title(title);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses a {@code String feeling} into a {@code Feeling}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param feeling String containing feeling described by user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * @return corresponding Feeling after parsing"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * @throws ParseException if given string does not correspond to an existing feeling"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static Feeling parseFeeling(String feeling) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(feeling);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        String trimmedCappedFeeling \u003d feeling.trim().toUpperCase();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Feeling parsedFeeling;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            parsedFeeling \u003d Feeling.valueOf(trimmedCappedFeeling);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            throw new ParseException(Feeling.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return parsedFeeling;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String[] dateFields \u003d date.strip().split(\"-\", 3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            int day \u003d Integer.parseInt(dateFields[0]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            int month \u003d Integer.parseInt(dateFields[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            int year \u003d Integer.parseInt(dateFields[2]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            parsedDate \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses {@code String time} into a {@code LocalTime}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String[] timeFields \u003d time.strip().split(\":\", 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime parsedTime;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            int hour \u003d Integer.parseInt(timeFields[0]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            int minute \u003d Integer.parseInt(timeFields[1]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            parsedTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return parsedTime;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses {@code String weather} into a {@code Weather}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static Weather parseWeather(String weather) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(weather);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        String trimmedCappedWeather \u003d weather.trim().toUpperCase();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Weather parsedWeather;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            parsedWeather \u003d Weather.valueOf(trimmedCappedWeather);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            throw new ParseException(Weather.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return parsedWeather;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses {@code String text} into a formatted {@code String}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static String parseText(String text) throws ContentTooLongException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        int contentLength \u003d text.trim().length();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        if (contentLength \u003e 280) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            int charactersOverLimit \u003d contentLength - 280;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            throw new ContentTooLongException(charactersOverLimit);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return text.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Parses {@code String sortType} into a {@code SortType}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static SortType parseSortType(String sortType) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            String formattedSortType \u003d sortType.trim().toLowerCase().substring(0, 1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            switch (formattedSortType) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            case \"o\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return SortType.OLD;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            case \"n\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return SortType.NEW;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            case \"l\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return SortType.LOCATION;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            case \"f\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return SortType.FEELING;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                throw new ParseException(SortType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            throw new ParseException(SortType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 26,
      "zsoh97": 52,
      "mikhailfaiz": 96,
      "grrrrnt": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Logger LOGGER \u003d LogsCenter.getLogger(Model.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Page getPage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns the user prefs\u0027 volant file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Path getVolantFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Sets the user prefs\u0027 volant file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void setVolantFilePath(Path volantFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 47,
      "zsoh97": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Path getVolantFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Path volantFilePath \u003d Paths.get(\"data\" , \"volant.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setVolantFilePath(newUserPrefs.getVolantFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return volantFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setVolantFilePath(Path volantFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(volantFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.volantFilePath \u003d volantFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 volantFilePath.equals(o.volantFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Objects.hash(guiSettings, volantFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + volantFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/JsonVolantStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.storage.JsonSerializableTripList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.storage.JsonSerializableActivityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.ReadOnlyEntryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.storage.JsonSerializableEntryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A class to access TripList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonVolantStorage implements VolantStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonVolantStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonVolantStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setVolantFilePath(Path newPath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.filePath \u003d newPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Optional\u003cReadOnlyTripList\u003e readTripList() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return readTripList(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Similar to {@link #readTripList()} ()}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Optional\u003cReadOnlyTripList\u003e readTripList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Optional\u003cJsonSerializableTripList\u003e jsonTripList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                filePath, JsonSerializableTripList.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (jsonTripList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Optional.of(jsonTripList.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void saveTripList(ReadOnlyTripList tripList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        saveTripList(tripList, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Similar to {@link #saveTripList(ReadOnlyTripList)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void saveTripList(ReadOnlyTripList tripList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(tripList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTripList(tripList), filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyEntryList\u003e readEntryList() throws DataConversionException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return readEntryList(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyEntryList\u003e readEntryList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Optional\u003cJsonSerializableEntryList\u003e jsonEntryList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                filePath, JsonSerializableEntryList.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (jsonEntryList.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return Optional.of(jsonEntryList.get().toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveEntryList(ReadOnlyEntryList entryList) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        saveEntryList(entryList, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveEntryList(ReadOnlyEntryList entryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(entryList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEntryList(entryList), filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyActivityList\u003e readActivityList() throws DataConversionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return readActivityList(filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyActivityList\u003e readActivityList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Optional\u003cJsonSerializableActivityList\u003e jsonActivityList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                filePath, JsonSerializableActivityList.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (jsonActivityList.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return Optional.of(jsonActivityList.get().toModelType());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveActivityList(ReadOnlyActivityList activityList) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        saveActivityList(activityList, filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveActivityList(ReadOnlyActivityList activityList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(activityList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableActivityList(activityList), filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 80,
      "zsoh97": 85
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface Storage extends VolantStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Path getVolantFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Optional\u003cReadOnlyTripList\u003e readTripList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void saveTripList(ReadOnlyTripList addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 32,
      "zsoh97": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.ReadOnlyEntryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Manages storage of TripList data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private VolantStorage volantStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public StorageManager(VolantStorage volantStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.volantStorage \u003d volantStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TripList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return volantStorage.getVolantFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setVolantFilePath(Path newPath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        volantStorage.setVolantFilePath(newPath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Optional\u003cReadOnlyTripList\u003e readTripList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return readTripList(volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Optional\u003cReadOnlyTripList\u003e readTripList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return volantStorage.readTripList(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void saveTripList(ReadOnlyTripList tripList) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        saveTripList(tripList, volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void saveTripList(ReadOnlyTripList tripList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        volantStorage.saveTripList(tripList, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveActivityList(ReadOnlyActivityList activityList) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        saveActivityList(activityList, volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveActivityList(ReadOnlyActivityList activityList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        volantStorage.saveActivityList(activityList, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyEntryList\u003e readEntryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return readEntryList(volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyEntryList\u003e readEntryList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return volantStorage.readEntryList(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveEntryList(ReadOnlyEntryList entryList) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        saveEntryList(entryList, volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void saveEntryList(ReadOnlyEntryList entryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        volantStorage.saveEntryList(entryList, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyActivityList\u003e readActivityList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return readActivityList(volantStorage.getVolantFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Optional\u003cReadOnlyActivityList\u003e readActivityList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return volantStorage.readActivityList(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 78,
      "zsoh97": 51
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/storage/VolantStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.ReadOnlyEntryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a storage for {@link TripList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface VolantStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Path getVolantFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void setVolantFilePath(Path newPath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns TripList data as a {@link ReadOnlyTripList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Optional\u003cReadOnlyTripList\u003e readTripList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @see #getVolantFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    Optional\u003cReadOnlyTripList\u003e readTripList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Saves the given {@link ReadOnlyTripList} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param tripList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void saveTripList(ReadOnlyTripList tripList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @see #saveTripList(ReadOnlyTripList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    void saveTripList(ReadOnlyTripList tripList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns AcitivityList data as a {@link ReadOnlyActivityList}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    Optional\u003cReadOnlyActivityList\u003e readActivityList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @see #getVolantFilePath()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    Optional\u003cReadOnlyActivityList\u003e readActivityList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * saves given {@link ReadOnlyActivityList} to the storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activityList cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void saveActivityList(ReadOnlyActivityList activityList) throws IOException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @see #saveActivityList(ReadOnlyActivityList)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void saveActivityList(ReadOnlyActivityList activityList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns EntryList data as a {@link ReadOnlyEntryList}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    Optional\u003cReadOnlyEntryList\u003e readEntryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @see #getVolantFilePath()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    Optional\u003cReadOnlyEntryList\u003e readEntryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * saves given {@link ReadOnlyEntryList} to the storage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param entryList cannot be null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void saveEntryList(ReadOnlyEntryList entryList) throws IOException;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @see #saveActivityList(ReadOnlyActivityList)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void saveEntryList(ReadOnlyEntryList entryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 46,
      "zsoh97": 52
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Contains utility methods for populating {@code TripList} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Trip[] getSampleTrips() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Trip[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            new Trip(new Name(\"Graduation Trip\"), new Location(\"Bali, Indonesia\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        new DateRange(LocalDate.parse(\"2020-06-05\"), LocalDate.parse(\"2020-06-10\"))),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            new Trip(new Name(\"Chinese New Year\"), new Location(\"Hokkaido, Japan\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        new DateRange(LocalDate.parse(\"2020-01-25\"), LocalDate.parse(\"2020-01-30\"))),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            new Trip(new Name(\"Reading Week\"), new Location(\"KL, Malaysia\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        new DateRange(LocalDate.parse(\"2020-04-01\"), LocalDate.parse(\"2020-05-04\"))),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static ReadOnlyTripList getSampleTripList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList sampleAb \u003d new TripList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Trip sampleTrip : getSampleTrips()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            sampleAb.addTrip(sampleTrip);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 35
    }
  },
  {
    "path": "src/main/java/seedu/volant/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Formats the date into the format dd MMM yyyy"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * e.g. 05 Mar 1999."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param date to be formatted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return formatted date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Formats the time into the format h:m a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * e.g. 12:53 AM"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param time to be formatted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return formatted time"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String formatTime(LocalTime time) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 25,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/HomeLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.parser.HomeInputParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * The logic manager for the HOME page."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomeLogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final HomeModelManager model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final HomeInputParser inputParser \u003d new HomeInputParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomeLogicManager(HomeModelManager model, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomeModelManager getModel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList getTripList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getTripList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyTripList getReadOnlyTripList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getTripList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getFilteredTripList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.info(\"----------------[USER COMMAND IN HOME][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Command command \u003d inputParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            storage.saveTripList(model.getTripList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getVolantFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 43,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.exceptions.TimeClashException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Adds a trip to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a trip to the trip list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_DATERANGE + \"DATE_RANGE\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_NAME + \"Bali 2020 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_LOCATION + \"Bali \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + PREFIX_DATERANGE + \"02-01-2020 to 02-05-2020 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New trip added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"This trip already exists in the trip list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Trip toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Trip}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public AddCommand(Trip trip) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        toAdd \u003d trip;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager homeModel \u003d ((HomeModelManager) model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (homeModel.hasTrip(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (homeModel.hasClash(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new TimeClashException(String.format(\"Sorry, another trip is going on between %s.\\n \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                            + \"You can try editing:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                            + \"     that entry\u0027s date range\\n     your new trip\u0027s date range.\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    toAdd.getDateRange()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        homeModel.addTrip(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 62,
      "zsoh97": 10,
      "mikhailfaiz": 1,
      "grrrrnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Deletes a trip identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Deletes the trip identified by the index number used in the displayed trip list.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\tINDEX (must be a positive integer within range of trip list size)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Trip: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager homeModel \u003d ((HomeModelManager) model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d homeModel.getFilteredTripList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip tripToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        homeModel.deleteTrip(tripToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, tripToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 21,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Edits the details of an existing trip in the location book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the trip identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"by the index number used in the displayed trip list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_DATERANGE + \"DATE_RANGE]\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" 1 \" + PREFIX_NAME + \"Bali Trip 2020\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ INDEX must be a positive integer within range of trip list size.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ At least one of the parameters must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_EDIT_TRIP_SUCCESS \u003d \"Edited Trip: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"This trip already exists in the location book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final EditTripDescriptor editTripDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param index of the trip in the filtered trip list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param editTripDescriptor details to edit the trip with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditCommand(Index index, EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(editTripDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.editTripDescriptor \u003d new EditTripDescriptor(editTripDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager homeModel \u003d ((HomeModelManager) model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d homeModel.getFilteredTripList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip tripToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedTrip \u003d createEditedPerson(tripToEdit, editTripDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!tripToEdit.isSameTrip(editedTrip) \u0026\u0026 homeModel.hasTrip(editedTrip)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (!tripToEdit.getName().equals(editedTrip.getName())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            File oldDir \u003d new File(\"data/\" + tripToEdit.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            File newDir \u003d new File(\"data/\" + editedTrip.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            oldDir.renameTo(newDir);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        homeModel.setTrip(tripToEdit, editedTrip);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        homeModel.updateFilteredTripList(homeModel.getPredicateShowAllTrips());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRIP_SUCCESS, editedTrip));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates and returns a {@code Trip} with the details of {@code tripToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static Trip createEditedPerson(Trip tripToEdit, EditTripDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert tripToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(tripToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Location updatedLocation \u003d editPersonDescriptor.getLocation().orElse(tripToEdit.getLocation());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DateRange updatedDateRange \u003d editPersonDescriptor.getDateRange().orElse(tripToEdit.getDateRange());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Trip(updatedName, updatedLocation, updatedDateRange);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 editTripDescriptor.equals(e.editTripDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Stores the details to edit the trip with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * corresponding field value of the trip."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static class EditTripDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        private DateRange dateRange;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public EditTripDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public EditTripDescriptor(EditTripDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setDateRange(toCopy.dateRange);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, location, dateRange);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setDateRange(DateRange dateRange) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public Optional\u003cDateRange\u003e getDateRange() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Optional.ofNullable(dateRange);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!(other instanceof EditTripDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            EditTripDescriptor e \u003d (EditTripDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u0026\u0026 getDateRange().equals(e.getDateRange());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 188,
      "zsoh97": 11,
      "grrrrnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Finds and lists all trips in trip list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all trips whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\tKEYWORD [MORE_KEYWORDS]...\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\" + COMMAND_WORD + \" bali singapore paris\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager homeModel \u003d ((HomeModelManager) model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ObservableList\u003cTrip\u003e currentList \u003d homeModel.getFilteredTripList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        homeModel.updateFilteredTripList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (homeModel.getFilteredTripList().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            homeModel.updateFilteredTripList(homeModel.getPredicateShowAllTrips());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String.format(\"No trips with this keyword(s): \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + predicate.toString() + \" found!\", currentList.size()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String.format(Messages.MESSAGE_TRIPS_LISTED_OVERVIEW, homeModel.getFilteredTripList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 27,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/commands/GotoTripCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Moves user to the trip page of a specific index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class GotoTripCommand extends GotoCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String FEEDBACK_TO_USER \u003d \"You are now in the trip page for TRIP : %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoTripCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager homeModel \u003d ((HomeModelManager) model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d homeModel.getFilteredTripList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip targetTrip \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(String.format(FEEDBACK_TO_USER, targetTrip.getName().toString()), targetTrip);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 43
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_DATERANGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_DATERANGE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DateRange dateRange \u003d ParserUtil.parseDateRange(argMultimap.getAllValues(PREFIX_DATERANGE).get(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip trip \u003d new Trip(name, location, dateRange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new AddCommand(trip);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 58
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_DATERANGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        EditCommand.EditTripDescriptor editTripDescriptor \u003d new EditCommand.EditTripDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            editTripDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            editTripDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATERANGE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            editTripDescriptor.setDateRange(ParserUtil.parseDateRange(argMultimap.getValue(PREFIX_DATERANGE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!editTripDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new EditCommand(index, editTripDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 21,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/logic/parser/HomeInputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.Parser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.GotoCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses user input when on the HOME page."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomeInputParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case GotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new GotoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 31,
      "mikhailfaiz": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/HomeModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.HOME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the in-memory model of the trip list data on the HOME page."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomeModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Predicate\u003cTrip\u003e predicateShowAllTrips \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final TripList tripList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final FilteredList\u003cTrip\u003e filteredTrips;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Page page \u003d HOME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes a HomeModelManager with the given tripList and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomeModelManager(ReadOnlyTripList tripList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(tripList, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.fine(\"Initializing with trip list: \" + tripList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.tripList \u003d new TripList(tripList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        filteredTrips \u003d new FilteredList\u003c\u003e(this.tripList.getTripList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public HomeModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this(new TripList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TripList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTripList(ReadOnlyTripList tripList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.tripList.resetData(tripList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList getTripList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if trip is within the trip list within model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripList.hasTrip(trip);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if the date range of trip to be added clashes with existing trips within model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean hasClash(Trip trip) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return tripList.hasClash(trip);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Removes specified target {@code Trip} from trip list within model."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void deleteTrip(Trip target) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        deleteFile(new File(\"data/\" + target.getName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripList.removeTrip(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        updateFilteredTripList(predicateShowAllTrips);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Completely removes all data from the trip."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param toDelete File to be deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void deleteFile(File toDelete) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        File[] entries \u003d toDelete.listFiles();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (entries !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            for (File f : entries) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                if (!Files.isSymbolicLink(f.toPath())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    deleteFile(f);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        toDelete.delete();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Adds trip to trip list within model."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void addTrip(Trip trip) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripList.addTrip(trip);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        updateFilteredTripList(predicateShowAllTrips);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces target trip with editedTrip in the trip list within model."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrip(Trip target, Trip editedTrip) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(target, editedTrip);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripList.setTrip(target, editedTrip);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Predicate\u003cTrip\u003e getPredicateShowAllTrips() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return predicateShowAllTrips;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Trip List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Trip} backed by the internal list of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return filteredTrips;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Updates the filtered trip list according to the given predicate."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void updateFilteredTripList(Predicate\u003cTrip\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        filteredTrips.setPredicate(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(obj instanceof HomeModelManager)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager other \u003d (HomeModelManager) obj;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripList.equals(other.tripList)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 filteredTrips.equals(other.filteredTrips);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getVolantFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setVolantFilePath(Path volantFilePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(volantFilePath);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setVolantFilePath(volantFilePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "raniceyue": 168,
      "zsoh97": 27
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/ReadOnlyTripList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Unmodifiable view of the trip list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface ReadOnlyTripList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    ObservableList\u003cTrip\u003e getTripList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/TripList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.UniqueTripList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Wraps all data at the trip level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Duplicates are not allowed (by .isSameTrip comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripList implements ReadOnlyTripList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UniqueTripList trips;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        trips \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates an TripList using the Trips in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList(ReadOnlyTripList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the contents of the trip list with {@code trips}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code trips} must not contain duplicate trips."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrips(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trips.setTrips(trips);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Resets the existing data of this {@code TripList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void resetData(ReadOnlyTripList newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setTrips(newData.getTripList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// trip-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if a trip with the same identity as {@code trip} exists in the trip list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trips.contains(trip);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if a trip with date range coinciding with {@code trip} exists in the trip list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean hasClash(Trip trip) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return trips.clashes(trip);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Adds a trip to the trip list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip must not already exist in the trip list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void addTrip(Trip p) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        trips.add(p);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        File file \u003d new File(\"data/\" + p.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        file.mkdir();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the given trip {@code target} in the list with {@code editedTrip}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code target} must exist in the trip list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip identity of {@code editedTrip} must not be the same as another existing trip in the trip list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrip(Trip target, Trip editedTrip) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(editedTrip);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        trips.setTrip(target, editedTrip);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Removes {@code key} from this {@code TripList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code key} must exist in the trip list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void removeTrip(Trip key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        trips.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return \"\" + trips.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cTrip\u003e getTripList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trips.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof TripList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 trips.equals(((TripList) other).trips));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trips.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 119,
      "zsoh97": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/DateRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents date range of a trip."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DateRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter date range in \\\"DD-MM-YYYY to DD-MM-YYYY\\\" format!!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})( to )([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate from;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate to;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DateRange(LocalDate from, LocalDate to) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        value \u003d String.format(\"%02d\", from.getDayOfMonth()) + \"-\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + String.format(\"%02d\", from.getMonthValue()) + \"-\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                + from.getYear() + \" to \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                + String.format(\"%02d\", to.getDayOfMonth()) + \"-\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + String.format(\"%02d\", to.getMonthValue()) + \"-\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                + to.getYear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static boolean isValidDateRange(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public LocalDate getFrom() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public LocalDate getTo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return formatDate(from) + \" - \" + formatDate(to);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof DateRange)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 other.toString().equals(this.toString()); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 53,
      "zsoh97": 1,
      "mikhailfaiz": 9
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a Trip\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any alphanumeric value,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public final String location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param location A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 location.equals(((Location) other).location)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return location.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 17,
      "zsoh97": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a Trip\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \"Trip names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public final String tripName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 tripName.equals(((Name) other).tripName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Tests that a {@code Trip}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTrip\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean test(Trip trip) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(trip.getName().tripName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 11,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/Trip.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeatureList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a Trip in the location book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Trip {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final DateRange dateRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TripFeatureList tripFeatureList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip(Name name, Location location, DateRange dateRange) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(name, location, dateRange);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeatureList \u003d new TripFeatureList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Trip(Trip trip) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.name \u003d trip.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.location \u003d trip.getLocation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.dateRange \u003d trip.getDateRange();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Journal journal \u003d trip.getTripFeatureList().getJournal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Itinerary itinerary \u003d trip.getTripFeatureList().getItinerary();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.tripFeatureList \u003d new TripFeatureList(itinerary, journal);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DateRange getDateRange() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return dateRange;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripFeatureList getTripFeatureList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripFeatureList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setTripFeatureList(TripFeatureList tripFeatureList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.tripFeatureList \u003d tripFeatureList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripFeatureList.getJournal();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary getItinerary() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripFeatureList.getItinerary();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if both trips have same name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * TODO: Confirm this"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isSameTrip(Trip otherTrip) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (otherTrip \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return otherTrip !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 otherTrip.getName().equals(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if the date range of this conflicts with date range of {@code other}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean isWithinSameDateRange(Trip other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if ((other.getDateRange().getFrom().compareTo(dateRange.from) \u003e\u003d 0)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 other.getDateRange().getTo().compareTo(dateRange.to) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if ((other.getDateRange().getFrom().compareTo(dateRange.from) \u003c 0)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 other.getDateRange().getTo().compareTo(dateRange.from) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return (other.getDateRange().getFrom().compareTo(dateRange.from) \u003e\u003d 0)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    \u0026\u0026 other.getDateRange().getFrom().compareTo(dateRange.to) \u003c 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if both trips have the same identity and data fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * This defines a stronger notion of equality between two trips."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(other instanceof Trip)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip otherTrip \u003d (Trip) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return otherTrip.getName().equals(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 otherTrip.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 otherTrip.getDateRange().equals(getDateRange());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Objects.hash(name, location, dateRange);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        builder.append(\"\\nName: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nLocation: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nDate Range: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(getDateRange());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 111,
      "zsoh97": 33
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/TripDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Compares 2 trips for sorting in chronological order, with the latest date first."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripDateComparator implements Comparator\u003cTrip\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int compare(Trip t1, Trip t2) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // checking if t1 starting date is past t2 starting date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (t1.getDateRange().from.isAfter(t2.getDateRange().from)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 19
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/UniqueTripList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A trip is considered unique by comparing using {@code Trip#isSamePerson(Trip)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * persons uses Trip#isSamePerson(Trip) for equality so as to ensure that the trip being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * unique in terms of identity in the UniqueTripList. However, the removal of a trip uses Trip#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * as to ensure that the trip with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * @see Trip#isSameTrip(Trip)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UniqueTripList implements Iterable\u003cTrip\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cTrip\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cTrip\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if the list contains an equivalent trip as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean contains(Trip toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTrip);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if the list contains a trip whose date range conincides with {@code toCheck}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean clashes(Trip toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isWithinSameDateRange);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Adds a trip to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void add(Trip toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.sort(new TripDateComparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the trip {@code target} in the list with {@code editedTrip}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip identity of {@code editedTrip} must not be the same as another existing trip in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrip(Trip target, Trip editedTrip) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(target, editedTrip);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!target.isSameTrip(editedTrip) \u0026\u0026 contains(editedTrip)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.set(index, editedTrip);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Removes the equivalent trip from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void remove(Trip toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.sort(new TripDateComparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip gotoTrip(int targetIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.get(targetIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the contents of this list with {@code trips}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code trips} must not contain duplicate trips."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrips(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(trips);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!tripsAreUnique(trips)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(trips);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.sort(new TripDateComparator());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setTrips(UniqueTripList replacement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.sort(new TripDateComparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cTrip\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Iterator\u003cTrip\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof UniqueTripList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTripList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if {@code trips} contains only unique trips."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private boolean tripsAreUnique(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (int i \u003d 0; i \u003c trips.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (int j \u003d i + 1; j \u003c trips.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (trips.get(i).isSameTrip(trips.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 146,
      "zsoh97": 9
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/exceptions/DuplicateTripException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DuplicateTripException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DuplicateTripException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/exceptions/StartAfterEndException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.home.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception for when user adds a Trip to the trip list with a date range that conflicts with another trip."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class StartAfterEndException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public StartAfterEndException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "zsoh97": 11
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/model/trip/exceptions/TripNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Signals that the operation is unable to find the specified trip."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/storage/JsonAdaptedTrip.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Jackson-friendly version of {@link Trip}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class JsonAdaptedTrip {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trip\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final String dateRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs a {@code JsonAdaptedTrip} with the given trip details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonAdaptedTrip(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                           @JsonProperty(\"dateRange\") String dateRange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Converts a given {@code Trip} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonAdaptedTrip(Trip source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        name \u003d source.getName().tripName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        location \u003d source.getLocation().location;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dateRange \u003d source.getDateRange().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Converts this Jackson-friendly adapted trip object into the model\u0027s {@code Trip} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted trip."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (dateRange \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    DateRange.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!DateRange.isValidDateRange(dateRange)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new IllegalValueException(DateRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final DateRange dateRangeO \u003d ParserUtil.parseDateRange(dateRange);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Trip(modelName, modelLocation, dateRangeO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 85
    }
  },
  {
    "path": "src/main/java/seedu/volant/home/storage/JsonSerializableTripList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An Immutable TripList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "@JsonRootName(value \u003d \"volant\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonSerializableTripList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"Trip list contains duplicate trip(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final List\u003cJsonAdaptedTrip\u003e trips \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Constructs a {@code JsonSerializableTripList} with the given trips."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonSerializableTripList(@JsonProperty(\"trips\") List\u003cJsonAdaptedTrip\u003e trips) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trips.addAll(trips);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Converts a given {@code ReadOnlyTripList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTripList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonSerializableTripList(ReadOnlyTripList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        trips.addAll(source.getTripList().stream().map(JsonAdaptedTrip::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Converts this trip list into the model\u0027s {@code TripList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (JsonAdaptedTrip jsonAdaptedTrip : trips) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            Trip trip \u003d jsonAdaptedTrip.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (tripList.hasTrip(trip)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripList.addTrip(trip);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 57,
      "grrrrnt": 4
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/exceptions/DuplicateActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Signals that the operation will result in duplicate Activities (Activities are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * have the same date and time)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        super(\"Operation would result in duplicated activities\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/exceptions/TimeClashException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Signals that the timing of the Activity to be added already has an Activity taking place at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * the same date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class TimeClashException extends CommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public TimeClashException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsoh97": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/ItineraryLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.parser.ItineraryInputParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * The logic manager for the ITINERARY page."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryLogicManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ItineraryModelManager model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ItineraryInputParser inputParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ItineraryLogicManager(ItineraryModelManager model, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.inputParser \u003d new ItineraryInputParser(model.getActivityList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ItineraryModelManager getModel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getTrip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.info(\"----------------[USER COMMAND IN ITINERARY][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Command command \u003d inputParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            storage.saveActivityList(model.getActivityList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getVolantFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 34,
      "zsoh97": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.DatePassedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.DateRangeOutOfBoundsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.exceptions.TimeClashException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Adds a activity to activity list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an activity to the itinerary.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_TITLE + \"ACTIVITY_TITLE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TIME + \"TIME \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example:\\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TITLE + \"Visit World Trade Centre \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_LOCATION + \"New York \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_DATE + \"05-03-2020 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + PREFIX_TIME + \"09:00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New activity added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This activity already exists in your itinerary.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_OUT_OF_RANGE_BEFORE \u003d \"Date of activity is before the trip!\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Please enter a date within the duration of the trip: %s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_OUT_OF_RANGE_AFTER \u003d \"Date of activity is after the trip!\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Please enter a date within the duration of the trip: %s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_DATE_PASSED \u003d \"Date of activity has passed. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Please entire a current or future date.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_TIME_CLASH \u003d \"There is already another activity scheduled on %s at %s. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"Try another timing.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Trip}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public AddCommand(Activity activity) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * throws a command exception if the attributes of the new activity violates any exceptions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param itineraryModel Itinerary of trip"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws CommandException If an the activity to be added has any logic flaws."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void checkForExceptions(ItineraryModelManager itineraryModel) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (itineraryModel.hasActivity(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (toAdd.getDate().compareTo(itineraryModel.getTrip().getDateRange().getFrom()) \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DateRangeOutOfBoundsException(String.format(MESSAGE_OUT_OF_RANGE_BEFORE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    itineraryModel.getTrip().getDateRange()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (toAdd.getDate().compareTo(itineraryModel.getTrip().getDateRange().getTo()) \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DateRangeOutOfBoundsException(String.format(MESSAGE_OUT_OF_RANGE_AFTER,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    itineraryModel.getTrip().getDateRange()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (toAdd.getDate().compareTo(LocalDate.now()) \u003c 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DatePassedException(MESSAGE_DATE_PASSED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (itineraryModel.hasTimeClash(toAdd)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new TimeClashException(String.format(MESSAGE_TIME_CLASH,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    toAdd.getDate(), toAdd.getTime()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ItineraryModelManager itineraryModel \u003d ((ItineraryModelManager) model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        checkForExceptions(itineraryModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        itineraryModel.addActivity(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7,
      "zsoh97": 92,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Deletes an activity in the itinerary identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Deletes the activity identified by the index number used in the displayed itinerary.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\tINDEX\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\" + COMMAND_WORD + \" 1\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ INDEX must be a positive integer within range of the itinerary size.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted activity: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager itineraryModel \u003d ((ItineraryModelManager) model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d itineraryModel.getFilteredActivityList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activityToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        itineraryModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 55,
      "raniceyue": 6
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Edits the details of an existing activity in the itinerary."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \": Edits the details of the activity identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"by the index number used in the displayed activity list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"ACTIVITY_TITLE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_TITLE + \" Hang out with the boys.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ INDEX has to be a positive integer within range of the itinerary size.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ At least one of the parameters must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited activity: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the itinerary.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final EditItineraryDescriptor editItineraryDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @param index of the trip in the filtered trip list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @param editItineraryDescriptor details to edit the trip with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditCommand(Index index, EditItineraryDescriptor editItineraryDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(editItineraryDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.editItineraryDescriptor \u003d new EditItineraryDescriptor(editItineraryDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager itineraryModel \u003d ((ItineraryModelManager) model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d itineraryModel.getFilteredActivityList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activityToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editItineraryDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!activityToEdit.equals(editedActivity) \u0026\u0026 itineraryModel.hasActivity(editedActivity)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        itineraryModel.setActivity(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        itineraryModel.updateFilteredActivityList(itineraryModel.getPredicateShowAllActivities());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Creates and returns a {@code Activity}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * edited with {@code editItineraryDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                                 EditItineraryDescriptor editItineraryDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assert activityToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Title updatedTitle \u003d editItineraryDescriptor.getTitle().orElse(activityToEdit.getTitle());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Location updatedLocation \u003d editItineraryDescriptor.getLocation().orElse(activityToEdit.getLocation());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        LocalDate updatedDate \u003d editItineraryDescriptor.getDate().orElse(activityToEdit.getDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        LocalTime updatedTime \u003d editItineraryDescriptor.getTime().orElse(activityToEdit.getTime());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new Activity(updatedTitle, updatedDate, updatedTime, updatedLocation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 editItineraryDescriptor.equals(e.editItineraryDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Stores the details to edit the trip with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * corresponding field value of the trip."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static class EditItineraryDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private LocalTime time;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public EditItineraryDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public EditItineraryDescriptor(EditItineraryDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, date, time, location);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Optional\u003cLocalTime\u003e getTime() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (!(other instanceof EditItineraryDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            EditItineraryDescriptor e \u003d (EditItineraryDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 193,
      "raniceyue": 14,
      "zsoh97": 6
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.util.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.util.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.util.TimeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.util.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Finds and lists all activities in itinerary whose fields contains any of the argument keywords."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \": Finds the activity identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"by the keywords input (case-insensitive) and displays \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"them as a list with index number.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION]\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_TITLE + \"visit \" + PREFIX_LOCATION + \"Brandenburg\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\t\\tAt least one of the parameters must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_EMPTY_FIELD \u003d \"At least one field to find must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final FindItineraryDescriptor findItineraryDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private TitleContainsKeywordsPredicate titlePredicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private LocationContainsKeywordsPredicate locationPredicate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private DateContainsKeywordsPredicate datePredicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private TimeContainsKeywordsPredicate timePredicate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public FindCommand(FindItineraryDescriptor findItineraryDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.findItineraryDescriptor \u003d new FindItineraryDescriptor(findItineraryDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager itineraryModel \u003d ((ItineraryModelManager) model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ObservableList\u003cActivity\u003e currentList \u003d itineraryModel.getFilteredActivityList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (findItineraryDescriptor.getTitle() !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            titlePredicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    Arrays.asList(findItineraryDescriptor.getTitle()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            itineraryModel.updateFilteredActivityList(titlePredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (findItineraryDescriptor.getLocation() !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            locationPredicate \u003d new LocationContainsKeywordsPredicate("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    Arrays.asList(findItineraryDescriptor.getLocation()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            itineraryModel.updateFilteredActivityList(locationPredicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (findItineraryDescriptor.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            datePredicate \u003d new DateContainsKeywordsPredicate("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    findItineraryDescriptor.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            itineraryModel.updateFilteredActivityList(datePredicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (findItineraryDescriptor.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            timePredicate \u003d new TimeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    findItineraryDescriptor.getTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            itineraryModel.updateFilteredActivityList(timePredicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (itineraryModel.getFilteredActivityList().isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            itineraryModel.updateFilteredActivityList(itineraryModel.getPredicateShowAllActivities());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    String.format(\"No activity with these keyword(s) found!\", currentList.size()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    String.format(Messages.MESSAGE_ACTIVITIES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                            itineraryModel.getFilteredActivityList().size()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Stores the details of the parameters to find the activity with."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static class FindItineraryDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private String[] title \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private LocalTime time;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private String[] location \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public FindItineraryDescriptor() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public FindItineraryDescriptor(FindCommand.FindItineraryDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, date, time, location);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setTitle(String[] title) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public String[] getTitle() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return this.title;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setLocation(String[] location) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public String[] getLocation() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return this.location;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public LocalDate getDate() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public LocalTime getTime() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (!(other instanceof FindCommand.FindItineraryDescriptor)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            FindCommand.FindItineraryDescriptor f \u003d (FindCommand.FindItineraryDescriptor) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return getTitle().equals(f.getTitle())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getLocation().equals(f.getLocation())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getDate().equals(f.getDate())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    \u0026\u0026 getTime().equals(f.getTime());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!(other instanceof FindCommand)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        FindCommand f \u003d (FindCommand) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return findItineraryDescriptor.equals(f.findItineraryDescriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 195,
      "raniceyue": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getAllValues(PREFIX_DATE).get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getAllValues(PREFIX_TIME).get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activity \u003d new Activity(title, date, time, location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new AddCommand(activity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "zsoh97": 61
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 30
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditCommand.EditItineraryDescriptor editItineraryDescriptor \u003d new EditCommand.EditItineraryDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            editItineraryDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            editItineraryDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            editItineraryDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            editItineraryDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!editItineraryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new EditCommand(index, editItineraryDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 61
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        FindCommand.FindItineraryDescriptor findItineraryDescriptor \u003d new FindCommand.FindItineraryDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String titleTrimmedArgs \u003d argMultimap.getValue(PREFIX_TITLE).get().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (titleTrimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String[] titleKeywords \u003d titleTrimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            findItineraryDescriptor.setTitle(titleKeywords);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String locationTrimmedArgs \u003d argMultimap.getValue(PREFIX_LOCATION).get().trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            if (locationTrimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String[] locationKeywords \u003d locationTrimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            findItineraryDescriptor.setLocation(locationKeywords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String dateArgs \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            findItineraryDescriptor.setDate(ParserUtil.parseDate(dateArgs));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String timeArgs \u003d argMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            findItineraryDescriptor.setTime(ParserUtil.parseTime(timeArgs));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!findItineraryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new FindCommand(findItineraryDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 75
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/logic/parser/ItineraryInputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND_ITINERARY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.Parser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses user input when user is in the ITINERARY page."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryInputParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs an ItineraryInputParser to parse commands to be executed on activityList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ItineraryInputParser(ActivityList activityList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND_ITINERARY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 13,
      "raniceyue": 68,
      "zsoh97": 5,
      "mikhailfaiz": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Wraps all data at the itinerary level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Duplicates are not allowed (by .isSameActivity comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ActivityList implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates an ActivityList using the activities in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ActivityList(ReadOnlyActivityList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Resets the existing data of this {@code ActivityList} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void resetData(ReadOnlyActivityList newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activities.getSize();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /* TODO: Complete all these methods after full implementation of Itinerary as the methods here are reliant on"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *  UniqueActivityList which can only be fully implemented after full implementation of Itinerary."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if a activity with the same identity as {@code activity} exists in the activity list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activity Activity to be added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if activity list contains activity"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if a activity with the same date and time as {@code activity} exists in"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * the activity list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activity Activity to be added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if activity list contains a activity whose date and time clashes with the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * date and time of the activity to be added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean hasTimeClash(Activity activity) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activities.containsDateTime(activity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Adds a activity to the activity list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The trip must not already exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    //public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Removes {@code key} from this {@code ActivityList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param key index of Activity in activity list to be removed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Replaces the given trip {@code target} in the list with {@code editedTrip}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * {@code target} must exist in the trip list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * The trip identity of {@code editedTrip} must not be the same as another existing trip in the trip list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setActivities(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.asUnmodifiableObservableList().size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            s.append(activities.asUnmodifiableObservableList().get(i)).append(System.lineSeparator());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public UniqueActivityList getUniqueActivityList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof ActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 activities.equals(((ActivityList) other).activities));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 24,
      "raniceyue": 100,
      "zsoh97": 29
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/ItineraryModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.ITINERARY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.util.DateTimeComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles in app memory when user is in an ITINERARY page."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final Predicate\u003cActivity\u003e predicateShowAllActivities \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Trip trip;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Itinerary itinerary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Page page \u003d ITINERARY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivities;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs an ItineraryModelManager that helps to keep track of in application memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param trip keeps track of trip that itinerary list is in from."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public ItineraryModelManager(Trip trip, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireAllNonNull(trip, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.fine(\"You are now in the ITINERARY page of TRIP: \" + trip + \".\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.itinerary \u003d trip.getTripFeatureList().getItinerary();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.activityList \u003d itinerary.getActivityList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.filteredActivities \u003d new FilteredList\u003c\u003e(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ItineraryModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Name tripName \u003d new Name(\"Berlin berlin\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Location tripLocation \u003d new Location(\"Berlin, Germany\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DateRange tripDateRange \u003d new DateRange(LocalDate.parse(\"2022-06-10\"), LocalDate.parse(\"2022-06-21\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip placeholder \u003d new Trip(tripName, tripLocation, tripDateRange);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.trip \u003d placeholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.itinerary \u003d trip.getTripFeatureList().getItinerary();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.activityList \u003d itinerary.getActivityList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.filteredActivities \u003d new FilteredList\u003c\u003e(this.activityList.getActivityList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dActivityList\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Checks if activity list contains activity."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activity Activity to be checked."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if activity list contains activity."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activityList.hasActivity(activity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Checks if activity list has any activity who\u0027s time and date clashes with the activity"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * to be added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activity Activity to be checked."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if the activity to be added has a time and date clash with the current"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * activities in the itinerary."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean hasTimeClash(Activity activity) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activityList.hasTimeClash(activity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Adds target activity to activity list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param target Activity to be added"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void addActivity(Activity target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activityList.addActivity(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        updateFilteredActivityList(predicateShowAllActivities);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Deletes target activity in the activity list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @param target Activity to be deleted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityList.removeActivity(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        updateFilteredActivityList(predicateShowAllActivities);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Replaces target trip with editedTrip in the trip list within model."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setActivity(Activity target, Activity editedTrip) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireAllNonNull(target, editedTrip);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityList.setActivities(target, editedTrip);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireAllNonNull(activityList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Predicate\u003cActivity\u003e getPredicateShowAllActivities() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return predicateShowAllActivities;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripFeature getItinerary() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Trip} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return filteredActivities.sorted(new DateTimeComparator());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Updates the filtered Activity list according to the given predicate."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getVolantFilePath();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setVolantFilePath(Path volantFilePath) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(volantFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setVolantFilePath(volantFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!(obj instanceof ItineraryModelManager)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager other \u003d (ItineraryModelManager) obj;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return trip.equals(other.trip)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 filteredActivities.equals(other.filteredActivities);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 70,
      "raniceyue": 90,
      "zsoh97": 59
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/ReadOnlyActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Unmodifiable view of the activity list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface ReadOnlyActivityList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an unmodifiable view of the entire itinerary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 15
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents an activity in an activity list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Activity(Title title, LocalDate date, LocalTime time, Location location) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        builder.append(\"\\nTitle: \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .append(\"\\nLocation: \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .append(this.getLocation())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .append(\"\\nDate: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(formatDate(getDate()))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .append(\"\\nTime: \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .append(formatTime(this.getTime()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Compares 2 objects to see if they have the same date and time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param other The other object to be compared to."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if the date and time of both objects are the same."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean equalsDateTime(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            result \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if (this.getDate().equals(((Activity) other).getDate())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 (this.getTime().equals(((Activity) other).getTime()))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            result \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Compares 2 activities to see if they are the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param other The other Activity to be compared to."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return True if the 2 activities are the same."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean isSameActivity(Activity other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return this.getTitle().equals(other.getTitle())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 this.getLocation().equals(other.getLocation())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 this.getDate().equals(other.getDate())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 this.getTime().equals(other.getTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            result \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else if (this.getTitle().equals(((Activity) other).getTitle())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 this.getLocation().equals(((Activity) other).getLocation())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 this.getDate().equals(((Activity) other).getDate())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            \u0026\u0026 (this.getTime().equals(((Activity) other).getTime()))) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            result \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return Objects.hash(this.title, this.date, this.time, this.location);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 42,
      "raniceyue": 34,
      "zsoh97": 38
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/DateContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Date} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DateContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final LocalDate keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public DateContainsKeywordsPredicate(LocalDate keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activity.getDate().isEqual(keywords);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((DateContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 33
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/LocationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Location} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class LocationContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getLocation().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof LocationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 36
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/TimeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Time} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TimeContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final LocalTime keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public TimeContainsKeywordsPredicate(LocalTime keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activity.getTime().equals(keywords);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof TimeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TimeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 33
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Represents an Activity\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Title should not be blank :(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Title(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        checkArgument(isValidTitle(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        title \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 53,
      "zsoh97": 4
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getTitle().title, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 36
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/UniqueActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A activity is considered unique by comparing using {@code Activity#isSameActivity}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * activities uses Activity#isSameActivity for equality so as to ensure that the activity being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * unique in terms of identity in the UniqueActivityList. However, the removal of a activity uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Activity#equals(Object) so as to ensure that the activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if the list contains an equivalent activity as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Returns true if the list contains an activity with equivalent date and time as the argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public boolean containsDateTime(Activity toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equalsDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Adds a activity to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /*TODO uncomment out for v1.3"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     /** Replaces the activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    * The activity must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new NotFoundException(\"No such Activity\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /** Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *  {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /* TODO: Implement methods to check for duplicate/clashing activities"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Replaces the activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new NotFoundException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        if (!target.equals(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /** Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param activities list of activities"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @return true if all activities in the list are unique."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                if (activities.get(i).equals(activities.get(j))) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 39,
      "raniceyue": 125,
      "zsoh97": 19
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/exceptions/NotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class NotFoundException extends NullPointerException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public NotFoundException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public NotFoundException() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "zsoh97": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/util/DateContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Date} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DateContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final LocalDate keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public DateContainsKeywordsPredicate(LocalDate keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activity.getDate().isEqual(keywords);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((DateContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 32,
      "raniceyue": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/util/DateTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * Comparator class that compares activities in activity list by date and time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class DateTimeComparator implements Comparator\u003cActivity\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public int compare(Activity a1, Activity a2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        int dateCompareResult \u003d a1.getDate().compareTo(a2.getDate());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (dateCompareResult \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return a1.getTime().compareTo(a2.getTime());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return dateCompareResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "zsoh97": 18
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/util/LocationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Location} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class LocationContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getLocation().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof LocationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 35,
      "raniceyue": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/util/TimeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Time} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TimeContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final LocalTime keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public TimeContainsKeywordsPredicate(LocalTime keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activity.getTime().equals(keywords);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof TimeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TimeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 32,
      "raniceyue": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/model/activity/util/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Tests that a {@code Activity}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getTitle().title, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 35,
      "raniceyue": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/storage/JsonAdaptedActivity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trip\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Constructs a {@code JsonAdaptedTrip} with the given trip details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"title\") String title, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        location \u003d source.getLocation().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        date \u003d formatDate(source.getDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        time \u003d formatTime(source.getTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts this Jackson-friendly adapted trip object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted trip."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateTimeFormatter dateParser \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalDate modelDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            modelDate \u003d LocalDate.parse(date, dateParser);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_ERROR_LOADING_DATE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                    LocalTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DateTimeFormatter timeParser \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final LocalTime modelTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            modelTime \u003d LocalTime.parse(time, timeParser);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_ERROR_LOADING_TIME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new Activity(modelTitle, modelDate, modelTime, modelLocation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 7,
      "raniceyue": 11,
      "zsoh97": 92
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/storage/JsonAdaptedItinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.itinerary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Jackson-friendly version of {@link Itinerary}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonAdaptedItinerary {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Itinerary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs a {@code JsonAdaptedItinerary} with the given title and activity list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JsonAdaptedItinerary(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                                @JsonProperty(\"activityList\") List\u003cJsonAdaptedActivity\u003e activityList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (activityList !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.activityList.addAll(activityList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Converts a given {@code Itinerary} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final List\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (JsonAdaptedActivity activity : activityList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            activities.add(activity.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final String modelTitle \u003d title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        //final Set\u003cActivity\u003e modelActivities \u003d new HashSet\u003c\u003e(activities);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Itinerary(modelTitle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 51,
      "zsoh97": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/itinerary/storage/JsonSerializableActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * An Immutable TripList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "@JsonRootName(value \u003d \"volant\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class JsonSerializableActivityList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Trip list contains duplicate activities.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Constructs a {@code JsonSerializableActivityList} with the given activities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonSerializableActivityList(@JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.activities.addAll(activities);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts a given {@code ReadOnlyActivityList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableActivityList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonSerializableActivityList(ReadOnlyActivityList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activities.addAll(source.getActivityList().stream().map(JsonAdaptedActivity::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TripList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public ActivityList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : activities) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            if (activityList.hasActivity(activity)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            activityList.addActivity(activity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zsoh97": 62
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/exceptions/ContentTooLongException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "package seedu.volant.journal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Represents error when content of a journal entry is greater than 280 characters."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class ContentTooLongException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public ContentTooLongException(int contentOverLimit) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        super(\"I\u0027m sorry, journal entry content has to be 280 characters or less :( \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                + \"You are currently \" + contentOverLimit + \" characters over the limit.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mikhailfaiz": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/JournalLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.parser.JournalInputParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * The logic manager for the JOURNAL page."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalLogicManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final JournalModelManager model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final JournalInputParser inputParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JournalLogicManager(JournalModelManager model, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.inputParser \u003d new JournalInputParser(model.getJournal());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JournalModelManager getModel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getTrip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getJournal();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.info(\"----------------[USER COMMAND IN JOURNAL][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Command command \u003d inputParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        System.out.println(storage.getVolantFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            storage.saveEntryList(model.getEntryList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getVolantFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 40,
      "zsoh97": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_FEELING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Adds an entry to the Journal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an entry to the journal. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_TEXT + \"TEXT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_FEELING + \"FEELING] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_WEATHER + \"WEATHER]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example: \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_DATE + \"05-03-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_TIME + \"14:20 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_TEXT + \"It\u0027s a really good day today! Excited to explore Germany... \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_LOCATION + \"Brandenburg Gate \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_FEELING + \"EXCITED \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_WEATHER + \"COOL \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New journal entry added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the journal.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        JournalModelManager journalModel \u003d ((JournalModelManager) model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (journalModel.hasEntry(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        journalModel.addEntry(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        journalModel.sortEntries(SortType.NEW);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 11,
      "mikhailfaiz": 1,
      "grrrrnt": 62,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Deletes an entry identified using its displayed index from the journal."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \": Deletes the entry identified by the index number used in the journal.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nParameters:\\tINDEX\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nExample:\\t\" + COMMAND_WORD + \" 1\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ INDEX must be a positive integer within range of the number of entries in the journal.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted entry: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        JournalModelManager journalModel \u003d ((JournalModelManager) model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d journalModel.getFilteredEntryList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        journalModel.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7,
      "grrrrnt": 53
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_FEELING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Weather;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Adds an entry to the Journal."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an entry in the journal. \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_TEXT + \"TEXT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_FEELING + \"FEELING] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"[\" + PREFIX_WEATHER + \"WEATHER] \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + PREFIX_TEXT + \"I love watermelon \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + PREFIX_LOCATION + \"Watermelon Centre \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ INDEX must be a positive integer within range of the number of entires in the journal.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"+ At least one of the parameters must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Entry edited: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public EditCommand(Index targetIndex, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.editEntryDescriptor \u003d editEntryDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        JournalModelManager journalModel \u003d ((JournalModelManager) model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d journalModel.getFilteredEntryList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        journalModel.editEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, entryToEdit));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Creates and returns a {@code Trip} with the details of {@code tripToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        String updatedText \u003d editEntryDescriptor.getText().orElse(entryToEdit.getText());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Location updatedLocation \u003d editEntryDescriptor.getLocation().orElse(entryToEdit.getLocation());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate updatedDate \u003d editEntryDescriptor.getDate().orElse(entryToEdit.getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime updatedTime \u003d editEntryDescriptor.getTime().orElse(entryToEdit.getTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Feeling updatedFeeling \u003d editEntryDescriptor.getFeeling().orElse(entryToEdit.getFeeling());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Weather updatedWeather \u003d editEntryDescriptor.getWeather().orElse(entryToEdit.getWeather());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return new Entry(updatedDate, updatedTime, updatedText, updatedFeeling,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                updatedWeather, updatedLocation.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                || (other instanceof EditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Stores the details to edit the trip with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * corresponding field value of the trip."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private String text;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private LocalTime time;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private Feeling feeling;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private Weather weather;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setText(toCopy.text);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setFeeling(toCopy.feeling);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            setWeather(toCopy.weather);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return CollectionUtil.isAnyNonNull(text, date, time, location, feeling, weather);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setText(String text) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cString\u003e getText() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(text);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cLocalTime\u003e getTime() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setFeeling(Feeling feeling) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.feeling \u003d feeling;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cFeeling\u003e getFeeling() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(feeling);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public void setWeather(Weather weather) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            this.weather \u003d weather;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public Optional\u003cWeather\u003e getWeather() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return Optional.ofNullable(weather);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return getText().equals(e.getText())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    \u0026\u0026 getFeeling().equals(e.getTime())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    \u0026\u0026 getWeather().equals(e.getWeather());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10,
      "mikhailfaiz": 138,
      "grrrrnt": 71
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "package seedu.volant.journal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Sorts EntryList based on given SortType."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts current entries based on a chosen order. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Parameters:\\t\" + \"SORT_TYPE \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Example:\\t\" + COMMAND_WORD + \" FEELING\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\nNOTE:\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"Available SORT_TYPE: OLD, NEW, LOCATION, FEELING\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS \u003d \"Entries sorted successfully by \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private final SortType sortType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public SortCommand(SortType sortType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        JournalModelManager journalModel \u003d ((JournalModelManager) model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        journalModel.sortEntries(sortType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return new CommandResult(MESSAGE_SORT_SUCCESS + sortType.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 4,
      "mikhailfaiz": 36,
      "grrrrnt": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_FEELING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.exceptions.ContentTooLongException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Weather;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public AddCommand parse(String args) throws ParseException, ContentTooLongException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                        PREFIX_FEELING, PREFIX_WEATHER, PREFIX_TEXT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TIME, PREFIX_TEXT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Entry entry \u003d new Entry(date, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            entry.setLocation(location);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FEELING).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Feeling feeling \u003d ParserUtil.parseFeeling(argMultimap.getValue(PREFIX_FEELING).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            entry.setFeeling(feeling);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEATHER).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Weather weather \u003d ParserUtil.parseWeather(argMultimap.getValue(PREFIX_WEATHER).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            entry.setWeather(weather);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEXT).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            String text \u003d ParserUtil.parseText(argMultimap.getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            entry.setText(text);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "mikhailfaiz": 2,
      "grrrrnt": 76
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 31
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "package seedu.volant.journal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_FEELING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.exceptions.ContentTooLongException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Weather;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                         PREFIX_FEELING, PREFIX_WEATHER, PREFIX_TEXT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        EditCommand.EditEntryDescriptor editEntryDescriptor \u003d new EditCommand.EditEntryDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            editEntryDescriptor.setDate(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            editEntryDescriptor.setTime(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            editEntryDescriptor.setLocation(location);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FEELING).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Feeling feeling \u003d ParserUtil.parseFeeling(argMultimap.getValue(PREFIX_FEELING).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            editEntryDescriptor.setFeeling(feeling);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEATHER).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Weather weather \u003d ParserUtil.parseWeather(argMultimap.getValue(PREFIX_WEATHER).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            editEntryDescriptor.setWeather(weather);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEXT).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String text \u003d ParserUtil.parseText(argMultimap.getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                editEntryDescriptor.setText(text);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            } catch (ContentTooLongException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                e.getMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "mikhailfaiz": 20,
      "grrrrnt": 58
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/parser/JournalInputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.Parser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses user input when on the JOURNAL page.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalInputParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Journal journal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public JournalInputParser(Journal journal) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.journal \u003d journal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 70,
      "mikhailfaiz": 5,
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "package seedu.volant.journal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import seedu.volant.journal.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public SortCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            SortType sortType \u003d ParserUtil.parseSortType(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return new SortCommand(sortType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "mikhailfaiz": 20
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents an Entry in a journal."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Feeling feeling;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private Weather weather;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs journal entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Date and time are automatically initialised to the date and time at which the user creates the journal entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public Entry(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        // Initialises entry with user-input date and time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.text \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.feeling \u003d Feeling.NULL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.weather \u003d Weather.NULL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.location \u003d new Location(\"null\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Temporary constructor for demonstration purposes, will remove later."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Entry(LocalDate date, LocalTime time, String text, Feeling feeling, Weather weather, String location) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feeling \u003d feeling;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public String getTimeAsString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return formatTime(time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public String getDateAsString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return formatDate(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public String getLocationAsString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return location.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Feeling getFeeling() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return feeling;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public Weather getWeather() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        return weather;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void setFeeling(Feeling feeling) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.feeling \u003d feeling;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void setWeather(Weather weather) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String w;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (feeling.equals(Feeling.NULL)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            f \u003d \"Not Specified\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            f \u003d feeling.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (weather.equals(Weather.NULL)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            w \u003d \"Not Specified\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            w \u003d weather.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        builder.append(\"\\nDate: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(formatDate(getDate()))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nTime: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(formatTime(getTime()))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nFeeling: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(f)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nWeather: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(w)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(\"\\nText: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(getText());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 76,
      "mikhailfaiz": 43,
      "grrrrnt": 9,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/EntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Wraps all data at the Journal level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Duplicates are not allowed (by .isSameEntry comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EntryList implements ReadOnlyEntryList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UniqueEntryList entries;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        entries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EntryList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates an EntryList using the entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EntryList(ReadOnlyEntryList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.entries.setEntries(entries);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Resets the existing data of this {@code EntryList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void resetData(ReadOnlyEntryList newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        setEntries(newData.getEntryList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * TODO: Complete all these methods after full implementation of Itinerary as the methods here are reliant on"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *  UniqueEntryList which can only be fully implemented after full implementation of Itinerary."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// entry-level operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    //TODO implement contain in unique entry list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return false; //entries.contains(entry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Adds a entry to the journal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void addEntry(Entry p) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        entries.add(p);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Edits a entry to the journal."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void setEntry(Entry p, Entry editedEntry) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        entries.setEntry(p, editedEntry);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Removes {@code key} from this {@code EntryList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void removeEntry(Entry key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void sortEntries(SortType sortType) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        entries.sortEntries(sortType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" asscheeks\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public UniqueEntryList getUniqueEntryList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof EntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 entries.equals(((EntryList) other).entries));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 112,
      "zsoh97": 6,
      "mikhailfaiz": 13,
      "grrrrnt": 5
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/Feeling.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Represents a state of Feeling in a journal Entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public enum Feeling {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    ANGRY, CONFUSED, EXCITED, HAPPY, SAD, SCARED, TIRED, WORRIED, NULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"I feel like that FEELING... is invalid \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"Here are the available FEELING parameters: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"TIRED, HAPPY, SAD, EXCITED, ANGRY, WORRIED, SCARED, CONFUSED\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "mikhailfaiz": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/JournalModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.JOURNAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the in-memory model of the journal data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private final Predicate\u003cEntry\u003e predicateShowAllEntries \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Trip trip;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Journal journal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private EntryList entryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Page page \u003d JOURNAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes a JournalModelManager with the given tripList, trip, journal, and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JournalModelManager(Trip trip, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireAllNonNull(trip, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.fine(\"You are now in the JOURNAL page of TRIP: \" + trip + \".\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.journal \u003d trip.getTripFeatureList().getJournal();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.entryList \u003d journal.getEntryList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.filteredEntries \u003d new FilteredList\u003c\u003e(this.entryList.getEntryList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // TODO: Complete implementation of methods once implementation of Journal has been completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EntryList getEntryList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return this.entryList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns true if entry is within the entry list within model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        // requireNonNull(entry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        // return entryList.hasEntry(entry);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Removes specified target {@code Entry} from entry list within model."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entryList.removeEntry(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        updateFilteredEntryList(predicateShowAllEntries);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Adds entry to entry list within model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.entryList.addEntry(entry);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        updateFilteredEntryList(predicateShowAllEntries);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Edits specified target {@code Entry} from entry list to the specified values."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * If the field is set to NULL, it will be ignored."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Only specified fields are edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void editEntry(Entry entry, Entry editedEntry) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        this.entryList.setEntry(entry, editedEntry);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        updateFilteredEntryList(predicateShowAllEntries);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Sorts the EntryList based on given SortType"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void sortEntries(SortType sortType) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        entryList.sortEntries(sortType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        updateFilteredEntryList(predicateShowAllEntries);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Predicate\u003cEntry\u003e getPredicateShowAllEntries() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return predicateShowAllEntries;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Trip List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Updates the filtered entry list according to the given predicate."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(obj instanceof JournalModelManager)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        JournalModelManager other \u003d (JournalModelManager) obj;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return trip.equals(other.trip)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getVolantFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setVolantFilePath(Path volantFilePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(volantFilePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setVolantFilePath(volantFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 109,
      "zsoh97": 8,
      "mikhailfaiz": 10,
      "grrrrnt": 61
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/ReadOnlyEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Unmodifiable view of the activity list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public interface ReadOnlyEntryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an unmodifiable view of the entire itinerary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    ObservableList\u003cEntry\u003e getEntryList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/UniqueEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.journal.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.FeelingComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.LocationComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.NewestDateTimeComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.OldestDateTimeComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.util.SortType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A trip is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding and updating of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * persons uses Entry#isSameEntry(Entry) for equality so as to ensure that the trip being added or updated is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of a trip uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * as to ensure that the trip with exactly the same fields will be removed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if the list contains an equivalent trip as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Adds an entry to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * The entry must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Edits the equivalent entry from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Items in the {@code fields} are edited in the entry."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void edit(Entry entry, HashMap\u003cString, Object\u003e fields) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        for (Map.Entry\u003cString, Object\u003e e: fields.entrySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            switch (e.getKey()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"location\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setLocation((Location) e.getValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"text\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setText((String) e.getValue());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"weather\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setWeather((Weather) e.getValue());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"feeling\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setFeeling((Feeling) e.getValue());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setDate((LocalDate) e.getValue());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                entry.setTime((LocalTime) e.getValue());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e activities) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /* TODO: Implement methods to check for duplicate/clashing activities"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setEntries(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     * Sorts the EntryList based on given SortType"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public void sortEntries(SortType sortType) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case NEW:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            FXCollections.sort(internalList, new NewestDateTimeComparator());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case OLD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            FXCollections.sort(internalList, new OldestDateTimeComparator());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case LOCATION:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            FXCollections.sort(internalList, new LocationComparator());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case FEELING:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            FXCollections.sort(internalList, new FeelingComparator());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            throw new InputMismatchException(SortType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cEntry\u003e activities) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (activities.get(i).isSameEntry(activities.get(j))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 127,
      "mikhailfaiz": 24,
      "grrrrnt": 55
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/Weather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Represents a state of Weather in a journal Entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public enum Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    NULL, SUNNY, RAINY, SNOWY, CLOUDY, COLD, DARK, HOT, COOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Global warming hasn\u0027t gotten THAT bad yet... \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"Here are the available WEATHER parameters: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"SUNNY, RAINY, SNOWY, CLOUDY, COLD, DARK, HOT, COOL\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "mikhailfaiz": 10
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "package seedu.volant.journal.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Signals that the operation is unable to find the specified journal entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mikhailfaiz": 7
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/util/FeelingComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Comparator for sorting by Feeling."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class FeelingComparator implements Comparator\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public int compare(Entry e1, Entry e2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Feeling f1 \u003d e1.getFeeling();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        Feeling f2 \u003d e2.getFeeling();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        if (!f1.equals(f2)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return f1.compareTo(f2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return new OldestDateTimeComparator().compare(e1, e2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 4,
      "mikhailfaiz": 18
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/util/LocationComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Comparator for sorting by Location."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class LocationComparator implements Comparator\u003cEntry\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public int compare(Entry e1, Entry e2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        String l1 \u003d e1.getLocationAsString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        String l2 \u003d e2.getLocationAsString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        if (!l1.equals(l2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return l1.compareTo(l2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return new NewestDateTimeComparator().compare(e1, e2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "mikhailfaiz": 18
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/util/NewestDateTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Comparator for sorting by newest entry first"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class NewestDateTimeComparator implements Comparator\u003cEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public int compare(Entry e1, Entry e2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate date1 \u003d e1.getDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate date2 \u003d e2.getDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime time1 \u003d e1.getTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime time2 \u003d e2.getTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        if (!date1.isEqual(date2)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return -1 * date1.compareTo(date2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return -1 * time1.compareTo(time2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "mikhailfaiz": 22
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/util/OldestDateTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Comparator for sorting by oldest entry first"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public class OldestDateTimeComparator implements Comparator\u003cEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public int compare(Entry e1, Entry e2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate date1 \u003d e1.getDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalDate date2 \u003d e2.getDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime time1 \u003d e1.getTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        LocalTime time2 \u003d e2.getTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        if (!date1.isEqual(date2)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return date1.compareTo(date2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            return time1.compareTo(time2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "mikhailfaiz": 22
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/model/util/SortType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " * Represents SortTypes for SortCommand in Journal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    NEW, OLD, LOCATION, FEELING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"I\u0027m not sure how to sort that way, sorry :( \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"Here are the available sort types: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            + \"OLD, NEW, LOCATION, FEELING\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "mikhailfaiz": 10
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Feeling;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Weather;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String feeling;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String weather;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"text\") String text, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                            @JsonProperty(\"time\") String time, @JsonProperty(\"feeling\") String feeling,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                            @JsonProperty(\"weather\") String weather,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                            @JsonProperty(\"location\") String location) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.feeling \u003d feeling;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        text \u003d source.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        date \u003d source.getDateAsString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        time \u003d source.getTimeAsString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        feeling \u003d source.getFeeling().name();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        weather \u003d source.getWeather().name();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        location \u003d source.getLocationAsString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted entry."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (text \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Text\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        final String modelText \u003d text;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        DateTimeFormatter dateParser \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final LocalDate modelDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            modelDate \u003d LocalDate.parse(date, dateParser);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_ERROR_LOADING_DATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DateTimeFormatter timeParser \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final LocalTime modelTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            modelTime \u003d LocalTime.parse(time, timeParser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_ERROR_LOADING_TIME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (feeling \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Feeling\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        final Feeling modelFeeling \u003d Feeling.valueOf(feeling);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (weather \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Weather\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        final Weather modelWeather \u003d Weather.valueOf(weather);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Location\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Entry entry \u003d new Entry(modelDate, modelTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entry.setLocation(modelLocation);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entry.setFeeling(modelFeeling);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entry.setWeather(modelWeather);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entry.setText(modelText);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12,
      "zsoh97": 33,
      "mikhailfaiz": 3,
      "grrrrnt": 67
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/storage/JsonAdaptedJournal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.journal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Jackson-friendly version of {@link Journal}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonAdaptedJournal {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Journal\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Constructs a {@code JsonAdaptedJournal} with the given title and entry list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param entryList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonAdaptedJournal(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                                @JsonProperty(\"entryList\") List\u003cJsonAdaptedEntry\u003e entryList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (entryList !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            this.entryList.addAll(entryList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts a given {@code Journal} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public Journal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final List\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        for (JsonAdaptedEntry entry : entryList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entries.add(entry.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        final String modelTitle \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        //final Set\u003cEntry\u003e modelEntries \u003d new HashSet\u003c\u003e(entries);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return new Journal(modelTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 11,
      "zsoh97": 43
    }
  },
  {
    "path": "src/main/java/seedu/volant/journal/storage/JsonSerializableEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.journal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.EntryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.ReadOnlyEntryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " * An Immutable EntryList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "@JsonRootName(value \u003d \"volant\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "public class JsonSerializableEntryList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Trip list contains duplicate trip(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Constructs a {@code JsonSerializableEntryList} with the given entries."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonSerializableEntryList(@JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.entries.addAll(entries);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts a given {@code ReadOnlyEntryList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEntryList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JsonSerializableEntryList(ReadOnlyEntryList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        entries.addAll(source.getEntryList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Converts this address book into the model\u0027s {@code EntryList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public EntryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        EntryList entryList \u003d new EntryList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        for (JsonAdaptedEntry jsonAdaptedEntry : entries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            Entry entry \u003d jsonAdaptedEntry.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            if (entryList.hasEntry(entry)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryList.addEntry(entry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return entryList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "zsoh97": 58
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/logic/TripLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.logic.parser.TripInputParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * The logic manager for the TRIP page."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripLogicManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final TripModelManager model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final TripInputParser inputParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripLogicManager(TripModelManager model, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.inputParser \u003d new TripInputParser(model.getTrip());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.info(\"----------------[USER COMMAND IN TRIP][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Command command \u003d inputParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // No save operations as there are no operation to modify data in a trip page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripModelManager getModel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getTrip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getVolantFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 70
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/logic/commands/GotoItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Itinerary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Moves user from TRIP page to ITINERARY page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class GotoItineraryCommand extends GotoCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to the itinerary of a trip. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            + \"Tip:\\t\" + COMMAND_WORD + \" i works as well.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FEEDBACK_TO_USER \u003d \"You are now in the itinerary page for TRIP: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs GotoItineraryCommand with the itinerary to go to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary getItinerary() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripModelManager tripModel \u003d ((TripModelManager) model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip currentTrip \u003d tripModel.getTrip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(String.format(FEEDBACK_TO_USER, currentTrip.getName().toString()), itinerary);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 42,
      "grrrrnt": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/logic/commands/GotoJournalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Moves user from TRIP page to JOURNAL page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class GotoJournalCommand extends GotoCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FEEDBACK_TO_USER \u003d \"You are now in the journal page for TRIP : %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Journal journal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs GotoJournalCommand with specified journal to go to."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GotoJournalCommand(Journal journal) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.journal \u003d journal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripModelManager tripModel \u003d ((TripModelManager) model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip currentTrip \u003d tripModel.getTrip();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new CommandResult(String.format(FEEDBACK_TO_USER, currentTrip.getName().toString()), journal);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 37
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/logic/parser/TripInputParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.Parser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.GotoCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Parses user input when on a trip page."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripInputParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Trip trip;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs parser and initialises parser with trip to operate commands on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripInputParser(Trip trip) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case GotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new GotoCommandParser(trip).parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 69,
      "mikhailfaiz": 1,
      "grrrrnt": 4
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/Feature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Enum to represent features in a trip."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public enum Feature {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    ITINERARY, JOURNAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 8
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/Itinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.trip.model.Feature.ITINERARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents an itinerary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Itinerary extends TripFeature {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Feature FEATURE \u003d ITINERARY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // Ranice: I am not sure if the itinerary should be given a title or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs itinerary with no title."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs itinerary with title {@param title}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // Initialising itinerary with empty activity list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs itinerary with the given {@param activityList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary(ActivityList activityList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Feature getFeature() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return FEATURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int getNumItems() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activityList.getUniqueActivityList().getSize();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                || (other instanceof Itinerary // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 activityList.equals(((Itinerary) other).getActivityList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activityList.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 63,
      "zsoh97": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/Journal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.trip.model.Feature.JOURNAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.EntryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents a journal"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Journal extends TripFeature {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Feature FEATURE \u003d JOURNAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private EntryList entryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs journal with no title."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.entryList \u003d new EntryList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs journal with title {@param title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs journal with the given {@param entryList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal(EntryList entryList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.entryList \u003d entryList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EntryList getEntryList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entryList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Feature getFeature() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return FEATURE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int getNumItems() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entryList.getEntryList().size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                || (other instanceof Journal // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u0026\u0026 entryList.equals(((Journal) other).getEntryList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entryList.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 58,
      "zsoh97": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/TripFeature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Abstract class to represent trip features."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public abstract class TripFeature {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public abstract Feature getFeature();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public abstract int getNumItems();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/TripFeatureList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A list containing the items in a trip."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripFeatureList implements Iterable\u003cTripFeature\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ArrayList\u003cTripFeature\u003e tripFeatureList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Journal journal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripFeatureList(Itinerary itinerary, Journal journal) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.journal \u003d journal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeatureList.add(journal);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeatureList.add(itinerary);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripFeatureList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.journal \u003d new Journal();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.itinerary \u003d new Itinerary();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeatureList.add(getJournal());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeatureList.add(getItinerary());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public List\u003cTripFeature\u003e getTripFeatureList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return tripFeatureList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns read only feature list for display onto GUI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ObservableList\u003cTripFeature\u003e getReadOnlyFeatureList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return FXCollections.observableArrayList(getTripFeatureList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return journal;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary getItinerary() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getTripFeatureList().hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Iterator\u003cTripFeature\u003e iterator() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getTripFeatureList().iterator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 62
    }
  },
  {
    "path": "src/main/java/seedu/volant/trip/model/TripModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.trip.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.TRIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the in-memory model of the trip data on the TRIP page."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Trip trip;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Page page \u003d TRIP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes a TripModelManager with the given trip and userPrefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public TripModelManager(Trip trip, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        requireAllNonNull(trip, userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        LOGGER.fine(\"Initializing with trip: \" + trip + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Trip \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Page getPage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Itinerary getItinerary() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip.getItinerary();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Journal getJournal() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return trip.getJournal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return userPrefs.getVolantFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setVolantFilePath(Path volantFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(volantFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userPrefs.setVolantFilePath(volantFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 88,
      "zsoh97": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private static final List\u003cString\u003e buttonColours \u003d Arrays.asList(\"-fx-background-color: #ff3e3e;\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            \"-fx-background-color: #fe9d2e;\", \"-fx-background-color: #f1f951;\", \"-fx-background-color: #7af951;\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            \"-fx-background-color: #51bef9;\", \"-fx-background-color: #9656fa;\", \"-fx-background-color: #fa64fa;\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private static int buttonColourIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Button enterBtn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Handles keyboard Enter button pressed event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Handles on-screen Enter button pressed event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private void handleCommandButtonPressed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        handleCommandEntered();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String buttonColour \u003d buttonColours.get(buttonColourIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        enterBtn.setStyle(buttonColour);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (buttonColourIndex \u003d\u003d 6) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            buttonColourIndex \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            buttonColourIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6,
      "grrrrnt": 26,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f09-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"For a more detailed explanation, please refer to the user guide\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + USERGUIDE_URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected static final String WELCOME_TEMP \u003d \"Hello! Welcome to the help window for the %s page!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + \"\\n\\nHere are some commands that you can try on this page: \\n\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected static final String COMMON_COMMANDS \u003d RefreshCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            + ExitCommand.MESSAGE_USAGE + \"\\n\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected static String welcome \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected static String commands \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Label helpWindowHeader;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label moreInfo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TextArea textArea;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        root.setResizable(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        root.setMinWidth(1000);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        scene.getStylesheets().add(\"view/VolantTheme.css\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        textArea.setEditable(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        textArea.setWrapText(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        textArea.setText(commands);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        moreInfo.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 36,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.ITINERARY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.JOURNAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.Page.TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.RefreshCommandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.util.SampleDataUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.HomeLogicManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.ItineraryLogicManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.JournalLogicManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.EntryList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.JournalModelManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.journal.model.ReadOnlyEntryList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.logic.TripLogicManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Itinerary;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.trip.model.TripFeatureList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripModelManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomeHelpWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.itinerary.ItineraryHelpWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.itinerary.ItineraryPage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.journal.JournalHelpWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.journal.JournalPage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.trip.TripHelpWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.trip.TripPage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // Initialize current page \u003d HOME when program starts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Page currentPage \u003d HOME;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    // mainPanel is where the context switching happens"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private UiPart\u003cRegion\u003e mainPanel;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private MenuItem refreshMenuItem;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // primaryStage.setMaxHeight(794);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setMinWidth(750);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        primaryStage.setMinHeight(675);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // Initialize with home help window"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        helpWindow \u003d new HomeHelpWindow();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the key bindings for the application."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Note: When user is using key bindings, there will be no result display."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setAccelerator(refreshMenuItem, KeyCombination.valueOf(\"F5\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeLogicManager t \u003d ((HomeLogicManager) logic);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        mainPanel \u003d new HomePage(t.getFilteredTripList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(mainPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getVolantFilePath());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        helpWindow \u003d new HomeHelpWindow();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /** METHODS TO HANDLE CONTEXT SWITCHING **/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setCurrentPage(Page page) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.currentPage \u003d page;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow \u003d new HomeHelpWindow();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d TRIP) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow \u003d new TripHelpWindow();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d ITINERARY) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow \u003d new ItineraryHelpWindow();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d JOURNAL) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow \u003d new JournalHelpWindow();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles the result of the command \u0027back\u0027."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param commandResult Contains list needed to populate the stage."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void handleBack(CommandResult commandResult) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (currentPage \u003d\u003d TRIP) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGoToHome();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setCurrentPage(HOME);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (currentPage \u003d\u003d ITINERARY || currentPage \u003d\u003d JOURNAL) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGotoTrip(commandResult.getTrip());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setCurrentPage(TRIP);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles the result of the \u0027goto\u0027 command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param commandResult Contains list needed to populate the stage."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void handleGoto(CommandResult commandResult) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Going from HOME page to TRIP page"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (currentPage \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGotoTrip(commandResult.getTrip());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            setCurrentPage(TRIP);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Going from TRIP page to TRIP_FEATURE page"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (currentPage \u003d\u003d TRIP) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGoToTripFeature(commandResult.getTripFeature());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (commandResult.getTripFeature() instanceof Itinerary) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setCurrentPage(ITINERARY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (commandResult.getTripFeature() instanceof Journal) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setCurrentPage(JOURNAL);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void updateStatusBar() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getVolantFilePath());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Handles command to go to a TRIP page from the HOME page or TRIP_FEATURE page."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param trip to navigate to."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void handleGotoTrip(Trip trip) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        newUserPrefs.setVolantFilePath(Paths.get(\"data\", trip.getName().toString()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        fetchTripFeatures(trip);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic.getStorage().setVolantFilePath(Paths.get(\"data\", trip.getName().toString()));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic \u003d new TripLogicManager(new TripModelManager(trip, newUserPrefs), logic.getStorage());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switchView(new TripPage(trip));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        updateStatusBar();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        setCurrentPage(TRIP);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Updates trip with data of Journal and Itinerary features"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * @param trip trip to be updated."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void fetchTripFeatures(Trip trip) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityList activityList;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        EntryList entryList;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logic.getStorage().setVolantFilePath(Paths.get(\"data\", trip.getName() + \"/itinerary.json\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            Optional\u003cReadOnlyActivityList\u003e activityListOptional \u003d logic.getStorage().readActivityList();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            activityList \u003d new ActivityList(activityListOptional.get());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logic.getStorage().setVolantFilePath(Paths.get(\"data\", trip.getName() + \"/journal.json\"));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            Optional\u003cReadOnlyEntryList\u003e entryListOptional \u003d logic.getStorage().readEntryList();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryList \u003d new EntryList(entryListOptional.get());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (IOException | DataConversionException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryList \u003d new EntryList();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        trip.setTripFeatureList(new TripFeatureList(new Itinerary(activityList), new Journal(entryList)));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Handles command to go to a TRIP_FEATURE page from TRIP page."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void handleGoToTripFeature(TripFeature tripFeature) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (tripFeature instanceof Itinerary) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGoToItinerary();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        if (tripFeature instanceof Journal) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGoToJournal();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles command to go to Itinerary from a Trip page"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void handleGoToItinerary() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TripLogicManager t \u003d ((TripLogicManager) logic);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        newUserPrefs.setVolantFilePath(Paths.get(\"data\", t.getTrip().getName()"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"/itinerary.json\"));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic.getStorage().setVolantFilePath(Paths.get(\"data\", t.getTrip().getName()"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"/itinerary.json\"));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ItineraryModelManager itineraryModelManager \u003d new ItineraryModelManager(t.getTrip(),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                newUserPrefs);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic \u003d new ItineraryLogicManager(itineraryModelManager, logic.getStorage());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switchView(new ItineraryPage(itineraryModelManager.getFilteredActivityList()));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        updateStatusBar();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setCurrentPage(ITINERARY);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * Handles command to go to Journal page from Trip page."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void handleGoToJournal() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TripLogicManager t \u003d ((TripLogicManager) logic);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        newUserPrefs.setVolantFilePath(Paths.get(\"data\", t.getTrip().getName()"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"/journal.json\"));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic.getStorage().setVolantFilePath(Paths.get(\"data\", t.getTrip().getName()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            + \"/journal.json\"));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JournalModelManager journalModelManager \u003d new JournalModelManager(t.getTrip(),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                newUserPrefs);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic \u003d new JournalLogicManager(journalModelManager, logic.getStorage());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switchView(new JournalPage(journalModelManager.getFilteredEntryList()));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        updateStatusBar();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setCurrentPage(JOURNAL);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private ReadOnlyTripList getTripList() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Optional\u003cReadOnlyTripList\u003e tripListOptional;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ReadOnlyTripList tripList;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            tripListOptional \u003d logic.getStorage().readTripList();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            if (!tripListOptional.isPresent()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample trip list.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            tripList \u003d tripListOptional.orElseGet(SampleDataUtil::getSampleTripList);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty trip list.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            tripList \u003d new TripList();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty trip list.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            tripList \u003d new TripList();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return tripList;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Handles command to go to HOME page from any page."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void handleGoToHome() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        newUserPrefs.setVolantFilePath(Paths.get(\"data\", \"volant.json\"));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic.getStorage().setVolantFilePath(Paths.get(\"data\", \"volant.json\"));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        HomeModelManager homeModelManager \u003d new HomeModelManager(getTripList(), newUserPrefs);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        logic \u003d new HomeLogicManager(homeModelManager, logic.getStorage());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switchView(new HomePage(homeModelManager.getFilteredTripList()));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        updateStatusBar();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setCurrentPage(HOME);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Handles refreshing a page."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void handleRefresh() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            HomeModelManager currentModel \u003d ((HomeLogicManager) logic).getModel();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            currentModel.updateFilteredTripList(currentModel.getPredicateShowAllTrips());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            switchView(new HomePage(currentModel.getFilteredTripList()));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d ITINERARY) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            ItineraryModelManager currentModel \u003d ((ItineraryLogicManager) logic).getModel();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            switchView(new ItineraryPage(currentModel.getActivityList().getActivityList()));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (currentPage \u003d\u003d JOURNAL) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            // Upon refreshing journal page, revert journal page to sorting by NEW"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            executeCommand(\"sort NEW\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Switches view of mainPanel to {@param view}."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void switchView(UiPart\u003cRegion\u003e view) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        mainPanelPlaceholder.getChildren().remove(mainPanel.getRoot());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        mainPanel \u003d view;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(mainPanel.getRoot());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Handles the result of the command to manage the stage."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param commandResult Contains the result to be handled."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void handleResult(CommandResult commandResult) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (commandResult.isGoto()) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            handleGoto(commandResult);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (commandResult.isBack()) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            handleBack(commandResult);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (commandResult.isHome()) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            handleGoToHome();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (commandResult instanceof RefreshCommandResult) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            handleRefresh();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            /*If the command is something that alters the trip list, page will be refreshed after execution*/"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (currentPage \u003d\u003d HOME) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                HomeModelManager currentModel \u003d ((HomeLogicManager) logic).getModel();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                switchView(new HomePage(currentModel.getFilteredTripList()));"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            handleResult(commandResult);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 215,
      "zsoh97": 144,
      "-": 161
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/title_icon.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ReadOnlyUserPrefs readOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/VolantTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param url Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void loadFxmlFile(URL url, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        fxmlLoader.setLocation(url);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/home/HomeHelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.HelpWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Help window for the HOME page."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomeHelpWindow extends HelpWindow {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomeHelpWindow() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.helpWindowHeader.setText(\"Help Window: HOME Page\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.welcome \u003d String.format(WELCOME_TEMP, \"HOME\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.commands \u003d welcome"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + AddCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + DeleteCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + EditCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + FindCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + GotoCommand.MESSAGE_USAGE_HOME + \"\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + COMMON_COMMANDS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 20,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/home/HomePage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomePage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"home/HomePage.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HomePage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ListView\u003cTrip\u003e tripListViewUpcoming;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ListView\u003cTrip\u003e tripListViewPast;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomePage(ObservableList\u003cTrip\u003e tripList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ObservableList\u003cTrip\u003e upcoming \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ObservableList\u003cTrip\u003e past \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Trip e : tripList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (e.getDateRange().getFrom().isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                upcoming.add(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                past.add(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (upcoming.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewUpcoming.setMaxHeight(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewUpcoming.setMinHeight(upcoming.size() * 105);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewUpcoming.setMaxHeight(upcoming.size() * 105);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripListViewUpcoming.setItems(upcoming);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripListViewUpcoming.setCellFactory(listViewUpcoming -\u003e new TripListViewCellUpcoming());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (past.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewPast.setMaxHeight(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewPast.setMinHeight(past.size() * 105);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripListViewPast.setMaxHeight(past.size() * 105);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripListViewPast.setItems(past);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripListViewPast.setCellFactory(listViewPast -\u003e new TripListViewCellPast(upcoming.size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Trip} using a {@code TripCard} for upcoming trips."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    class TripListViewCellUpcoming extends ListCell\u003cTrip\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected void updateItem(Trip trip, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.updateItem(trip, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (empty || trip \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setStyle(\"-fx-background-color: \" + \"#fff\" + \";\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setGraphic(new HomePageTripCard(trip, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Trip} using a {@code TripCard} for past trips."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    class TripListViewCellPast extends ListCell\u003cTrip\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected int upcoming;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public TripListViewCellPast(int upcoming) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.upcoming \u003d upcoming;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected void updateItem(Trip trip, boolean empty) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.updateItem(trip, empty);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (empty || trip \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setStyle(\"-fx-background-color: \" + \"#fff\" + \";\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setGraphic(new HomePageTripCard(trip, getIndex() + 1 + upcoming).getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 98,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/home/HomePageTripCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An UI component that displays information of a {@code Trip}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class HomePageTripCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"home/HomePageTripCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public final Trip trip;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label dateRange;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public HomePageTripCard(Trip trip, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        name.setText(trip.getName().tripName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        place.setText(trip.getLocation().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dateRange.setText(trip.getDateRange().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        cardPane.setMaxHeight(100);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(other instanceof HomePageTripCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomePageTripCard card \u003d (HomePageTripCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u0026\u0026 trip.equals(card.trip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 63,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/itinerary/ItineraryHelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.HelpWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Help window for the ITINERARY page."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryHelpWindow extends HelpWindow {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ItineraryHelpWindow() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.helpWindowHeader.setText(\"Help Window: ITINERARY Page\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.welcome \u003d String.format(WELCOME_TEMP, \"ITINERARY\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.commands \u003d welcome"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + AddCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + DeleteCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + EditCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + FindCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + BackCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + HomeCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + COMMON_COMMANDS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 28
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/itinerary/ItineraryPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Page containing details of a Trip as well as a menu of TripFeatures."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"itinerary/ItineraryPage.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HomePage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label itineraryTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public ItineraryPage(ObservableList\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        itineraryTitle.setText(\"ITINERARY\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activityListView.setItems(activities);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of each {@code TripFeature} using a card depending on the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * type of feature."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                setStyle(\"-fx-background-color: #fff;\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                setGraphic(new ItineraryPageCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 50,
      "zsoh97": 3,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/itinerary/ItineraryPageCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.util.StringUtil.formatTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePageTripCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An UI component that displays information of an {@code Activity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ItineraryPageCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"itinerary/ItineraryPageCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Activity activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HBox activityPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label activityTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label activityTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label activityDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label activityLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label activityIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ItineraryPageCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        activityIndex.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityTitle.setText(activity.getTitle().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityDate.setText(formatDate(activity.getDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityTime.setText(formatTime(activity.getTime()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityLocation.setText(activity.getLocation().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Activity getActivity() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(other instanceof HomePageTripCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ItineraryPageCard card \u003d (ItineraryPageCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return activity.equals(card.activity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 7,
      "raniceyue": 64
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/journal/JournalHelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.HelpWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Help window for the JOURNAL page."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalHelpWindow extends HelpWindow {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public JournalHelpWindow() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.helpWindowHeader.setText(\"Help Window: JOURNAL Page\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.welcome \u003d String.format(WELCOME_TEMP, \"JOURNAL\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.commands \u003d welcome"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + AddCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + DeleteCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + EditCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + SortCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + BackCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + HomeCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + COMMON_COMMANDS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 28
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/journal/JournalPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Page containing details of a Trip as well as a menu of TripFeatures."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"journal/JournalPage.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HomePage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label journalTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public JournalPage(ObservableList\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        journalTitle.setText(\"JOURNAL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        entryListView.setItems(entries);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of each {@code TripFeature} using a card depending on the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * type of feature."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    class EntryListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                setStyle(\"-fx-background-color: #fff;\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                setGraphic(new JournalPageCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 49,
      "zsoh97": 3,
      "grrrrnt": 1,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/journal/JournalPageCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.journal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.journal.model.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePageTripCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An UI component that displays information of an {@code Entry}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JournalPageCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"journal/JournalPageCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Entry entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HBox entryPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label entryTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label entryDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label entryTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label entryLocation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private Label entryFeeling;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "    private Label entryWeather;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ImageView locationIcon;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ImageView weatherIcon;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public JournalPageCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        /* ICONS FOR METADATA */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Image locationImg \u003d new Image(\"/images/locationIcon.png\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        locationIcon.setImage(locationImg);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Image weatherImg \u003d new Image(\"/images/weatherIcon.png\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        weatherIcon.setImage(weatherImg);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        entryTitle.setText(entry.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entryDate.setText(entry.getDateAsString() + \",\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entryTime.setText(entry.getTimeAsString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entryLocation.setGraphic(locationIcon);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (entry.getLocationAsString().equals(\"null\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryLocation.setText(\"Not specified\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryLocation.setText(entry.getLocation().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        entryWeather.setGraphic(weatherIcon);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (entry.getWeather().toString().equals(\"NULL\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryWeather.setText(\"Not specified\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            String weather \u003d entry.getWeather().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryWeather.setText(weather.substring(0, 1) + weather.substring(1).toLowerCase());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryWeather.setGraphic(weatherIcon);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            String feeling \u003d entry.getFeeling().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            setFeeling(feeling);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private void setFeeling(String feeling) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        entryFeeling.setText(feeling);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        switch(feeling) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        case \"CONFUSED\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    Color.rgb(117, 102, 65), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        case \"TIRED\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    Color.rgb(149, 149, 141), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        case \"HAPPY\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    Color.rgb(47, 233, 167), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"SCARED\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                Color.rgb(204, 195, 234), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"SAD\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                Color.rgb(130, 205, 240), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"ANGRY\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                Color.rgb(240, 128, 128), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"EXCITED\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                Color.rgb(240, 216, 21), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "        case \"WORRIED\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            entryFeeling.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "                    Color.rgb(128, 0, 128), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mikhailfaiz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            entryFeeling.setText(\"NULL\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Entry getEntry() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entry;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(other instanceof HomePageTripCard)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        JournalPageCard card \u003d (JournalPageCard) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return entry.equals(card.entry);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 106,
      "zsoh97": 25,
      "mikhailfaiz": 10,
      "grrrrnt": 12
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/trip/TripHelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.HelpWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Help window for the TRIP page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripHelpWindow extends HelpWindow {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripHelpWindow() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.helpWindowHeader.setText(\"Help Window: TRIP Page\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.welcome \u003d String.format(WELCOME_TEMP, \"TRIP\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.commands \u003d super.welcome"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + GotoCommand.MESSAGE_USAGE_TRIP + \"\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + HomeCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + COMMON_COMMANDS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 21
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/trip/TripPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.Journal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.pages.home.HomePage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Page containing details of a Trip as well as a menu of TripFeatures."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"trip/TripPage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HomePage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label tripName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label dateRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ListView\u003cTripFeature\u003e tripFeaturesListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripPage(Trip trip) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripName.setText(trip.getName().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        place.setText(trip.getLocation().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dateRange.setText(trip.getDateRange().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tripFeaturesListView.setPrefHeight(300);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeaturesListView.setItems(trip.getTripFeatureList().getReadOnlyFeatureList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        tripFeaturesListView.setCellFactory(listView -\u003e new TripFeaturesListViewCell());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of each {@code TripFeature} using a card depending on the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * type of feature."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    class TripFeaturesListViewCell extends ListCell\u003cTripFeature\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        protected void updateItem(TripFeature tripFeature, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.updateItem(tripFeature, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (empty || tripFeature \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                setStyle(\"-fx-background-color: #fff;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (tripFeature instanceof Journal) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    setGraphic(new TripPageJournalCard(tripFeature).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    setGraphic(new TripPageItineraryCard(tripFeature).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 67,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/trip/TripPageItineraryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An UI component that displays information of a {@code Itinerary} in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * the form of a card on a trip page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripPageItineraryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"trip/TripPageItineraryCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TripFeature tripFeature;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HBox itineraryPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label itineraryTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label numActivities;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ImageView itineraryCardIcon;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripPageItineraryCard(TripFeature feature) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Image itineraryCardImg \u003d new Image(\"/images/itineraryIcon.png\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        itineraryCardIcon.setImage(itineraryCardImg);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        itineraryTitle.setText(\"Itinerary\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        numActivities.setText(\"You have \" + feature.getNumItems() + \" activities in you itinerary.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 44
    }
  },
  {
    "path": "src/main/java/seedu/volant/ui/pages/trip/TripPageJournalCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui.pages.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.trip.model.TripFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An UI component that displays information of a {@code Journal}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripPageJournalCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String FXML \u003d \"trip/TripPageJournalCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HBox journalPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label journalTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label numEntries;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ImageView journalCardIcon;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripPageJournalCard(TripFeature journal) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Image journalCardImg \u003d new Image(\"/images/journalIcon.png\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        journalCardIcon.setImage(journalCardImg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        journalTitle.setText(\"Journal\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        numEntries.setText(\"You have \" + journal.getNumItems() + \" entries in your journal.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 41
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane-commandBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cHBox prefHeight\u003d\"3.0\" prefWidth\u003d\"70.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "          \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Hello! :D What can I help you with?\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "          \u003cButton fx:id\u003d\"enterBtn\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" styleClass\u003d\"button-enter\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\" text\u003d\"ENTER\" onAction\u003d\"#handleCommandButtonPressed\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "zsoh97": 5,
      "grrrrnt": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cfx:root resizable\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #fff\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cStackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cLabel fx:id\u003d\"helpWindowHeader\" styleClass\u003d\"label-header\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cTextArea fx:id\u003d\"textArea\" styleClass\u003d\"text-field\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cLabel fx:id\u003d\"moreInfo\" styleClass\u003d\"label-bright\" style\u003d\"-fx-padding: 10px;\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cButton fx:id\u003d\"helpButton\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\" alignment\u003d\"BOTTOM_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 33,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Volant\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/title_icon.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cURL value\u003d\"@VolantTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "          \u003c!--  MENU BAR  --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help (F1)\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Refresh (F5)\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"refreshMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRefresh\" text\u003d\"Refresh\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "          \u003c!--  MAIN PANEL: THIS SWITCHES WITH EVERY NAVIGATION COMMAND --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cVBox fx:id\u003d\"mainPanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "              \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"edge-to-edge\" VBox.vgrow\u003d\"ALWAYS\" fitToHeight\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "              \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c!--  RESULT DISPLAY: APP FEEDBACK MESSAGES APPEAR HERE --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"stackPane-ResultBox\" maxHeight\u003d\"100\" minHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c!--  COMMAND BOX: USER INPUT TEXT BOX --\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"stackPane-CommandBox \" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "          \u003c!--  STATUS BAR  --\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 20,
      "zsoh97": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/home/HomePage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c!-- WELCOME MESSAGE --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cStackPane maxHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"stack-welcome\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cLabel styleClass\u003d\"label-welcome\" text\u003d\"Hi! I\u0027m Volant :)\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c!-- PAGE HEADER --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cStackPane maxHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"stack-header\" style\u003d\"-fx-border-width: 1px 0px 2px 0px\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cLabel styleClass\u003d\"label-header\" text\u003d\"TRIP LIST\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c!-- UPCOMING TRIPS HEADER --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cStackPane maxHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"trip-list-header\" style\u003d\"-fx-border-width: 0px 0px 2px 0px\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cLabel styleClass\u003d\"label-header\" text\u003d\"UPCOMING TRIPS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cListView fx:id\u003d\"tripListViewUpcoming\" prefWidth\u003d\"247.0\" style\u003d\"-fx-background-color: #fff; -fx-border-width: 1px 0px 2px 0px;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c!-- PAST TRIPS HEADER --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cStackPane maxHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"trip-list-header\" style\u003d\"-fx-border-width: 0px 0px 2px 0px;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cLabel styleClass\u003d\"label-header\" text\u003d\"PAST TRIPS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   \u003cListView fx:id\u003d\"tripListViewPast\" prefWidth\u003d\"247.0\" style\u003d\"-fx-background-color: #fff;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 28,
      "zsoh97": 6,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/home/HomePageTripCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"vBox-home\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cLabel fx:id\u003d\"place\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$place\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateRange\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateRange\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "zsoh97": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/itinerary/ItineraryPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cStackPane maxHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"stack-header\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cLabel fx:id\u003d\"itineraryTitle\" styleClass\u003d\"label-header\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "zsoh97": 4,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/itinerary/ItineraryPageCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cHBox id\u003d\"activityPane\" fx:id\u003d\"activityPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" styleClass\u003d\"hBox-itinerary\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"90.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                       \u003cLabel fx:id\u003d\"activityDate\" styleClass\u003d\"label-dateTime\" text\u003d\"\\$activityDate\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                       \u003cLabel fx:id\u003d\"activityTime\" styleClass\u003d\"label-dateTime\" text\u003d\"\\$activityTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cStackPane prefHeight\u003d\"90.0\" prefWidth\u003d\"500.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                   \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"90.0\" prefWidth\u003d\"100.0\" styleClass\u003d\"vBox-itineraryTitleLocation\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                          \u003cLabel fx:id\u003d\"activityTitle\" styleClass\u003d\"label-location\" text\u003d\"\\$activityTitle\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                          \u003cLabel fx:id\u003d\"activityLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$activityLocation\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003cStackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003cInsets left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cLabel fx:id\u003d\"activityIndex\" alignment\u003d\"BOTTOM_RIGHT\" styleClass\u003d\"label-journal-id\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 39,
      "zsoh97": 11
    }
  },
  {
    "path": "src/main/resources/view/journal/JournalPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cStackPane maxHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"stack-header\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cLabel fx:id\u003d\"journalTitle\" styleClass\u003d\"label-header\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "zsoh97": 4,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/journal/JournalPageCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cHBox id\u003d\"entryPane\" fx:id\u003d\"entryPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"15\" left\u003d\"15\" right\u003d\"15\" top\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c!-- DATE AND TIME --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40.0\" prefWidth\u003d\"86.0\" styleClass\u003d\"hBox-journal\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003cLabel fx:id\u003d\"entryDate\" styleClass\u003d\"label-entry-metadata\" text\u003d\"\\$entryDate\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003cLabel fx:id\u003d\"entryTime\" styleClass\u003d\"label-entry-metadata\" text\u003d\"\\$entryTime\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003cRegion prefHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"hBox-feeling\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003c!-- If feeling not specified, will show nothing --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cLabel fx:id\u003d\"entryFeeling\" styleClass\u003d\"label-feeling\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c!-- WEATHER AND STUFF --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40.0\" prefWidth\u003d\"100.0\" styleClass\u003d\"hBox-journal-metadata\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cImageView fx:id\u003d\"locationIcon\" fitHeight\u003d\"20\" fitWidth\u003d\"20\" preserveRatio\u003d\"true\" style\u003d\"-fx-padding: 0px 10px 10px 0px\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cLabel fx:id\u003d\"entryLocation\" alignment\u003d\"CENTER_LEFT\"  minWidth\u003d\"100\" styleClass\u003d\"label-entry-metadata\" text\u003d\"\\$entryLocation\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cImageView fx:id\u003d\"weatherIcon\" fitHeight\u003d\"22\" fitWidth\u003d\"22\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cLabel fx:id\u003d\"entryWeather\" alignment\u003d\"CENTER\" styleClass\u003d\"label-entry-metadata\" text\u003d\"\\$entryWeather\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c!-- JOURNAL ENTRY TEXT --\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox styleClass\u003d\"hBox-journal-entry\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                 \u003cLabel fx:id\u003d\"entryTitle\" styleClass\u003d\"label-entry\" text\u003d\"\\$entryText\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c!-- ID of journal entry --\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"10.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"hBox-journal-id\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                   \u003cLabel fx:id\u003d\"id\" alignment\u003d\"BOTTOM_RIGHT\" prefHeight\u003d\"19.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"label-journal-id\" text\u003d\"\\$entryID\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 41,
      "zsoh97": 10,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/trip/TripPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox stylesheets\u003d\"@../VolantTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cStackPane prefHeight\u003d\"15.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"stack-header\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cLabel styleClass\u003d\"label-header\" text\u003d\"TRIP\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003cHBox fx:id\u003d\"tripNameCardPane\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "         \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "               \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"vBox-trip\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                     \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                      \u003cLabel fx:id\u003d\"tripName\" styleClass\u003d\"label-tripName\" text\u003d\"Graduation Trip 2020\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                      \u003cLabel fx:id\u003d\"place\" styleClass\u003d\"label-bright\" text\u003d\"Bali, Indonesia\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                      \u003cLabel fx:id\u003d\"dateRange\" styleClass\u003d\"label-bright\" text\u003d\"15 Mar 2020 to 20 Mar 2020\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "               \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "         \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cListView fx:id\u003d\"tripFeaturesListView\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12,
      "zsoh97": 30,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/trip/TripPageItineraryCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cHBox id\u003d\"itineraryPane\" fx:id\u003d\"itineraryPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"  styleClass\u003d\"tripFeature-vBox\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cImageView fx:id\u003d\"itineraryCardIcon\" fitHeight\u003d\"50\" fitWidth\u003d\"50\" preserveRatio\u003d\"true\" style\u003d\"-fx-padding: 0px 10px 10px 0px\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cVBox style\u003d\"-fx-padding: 0px 0px 0px 15px;\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cLabel fx:id\u003d\"itineraryTitle\" text\u003d\"\\$itineraryTitle\" styleClass\u003d\"label-tripFeature\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cLabel fx:id\u003d\"numActivities\" styleClass\u003d\"label-bright\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 31,
      "zsoh97": 1
    }
  },
  {
    "path": "src/main/resources/view/trip/TripPageJournalCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cHBox id\u003d\"journalPane\" fx:id\u003d\"journalPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"tripFeature-vBox\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cImageView fx:id\u003d\"journalCardIcon\" fitHeight\u003d\"50\" fitWidth\u003d\"50\" preserveRatio\u003d\"true\" style\u003d\"-fx-padding: 0px 10px 10px 0px\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cVBox style\u003d\"-fx-padding: 0px 0px 0px 15px;\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"journalTitle\" text\u003d\"\\$journalTitle\" styleClass\u003d\"label-tripFeature\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cLabel fx:id\u003d\"numEntries\" styleClass\u003d\"label-bright\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 30,
      "zsoh97": 2
    }
  },
  {
    "path": "src/test/java/seedu/volant/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        final Index fifthItemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(fifthItemIndex.equals(fifthItemIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(fifthItemIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(fifthItemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(fifthItemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 7,
      "raniceyue": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/storage/JsonAdaptedTripTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.storage.JsonAdaptedTrip.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.storage.JsonAdaptedTrip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class JsonAdaptedTripTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String INVALID_DATERANGE \u003d \"2020-43-93 to 2020-12-01\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String VALID_NAME \u003d B.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String VALID_LOCATION \u003d B.getLocation().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static final String VALID_DATERANGE \u003d B.getDateRange().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void toModelType_validTripDetails_returnsTrip() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d new JsonAdaptedTrip(B);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(B, trip.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new JsonAdaptedTrip(INVALID_NAME, VALID_LOCATION, VALID_DATERANGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d new JsonAdaptedTrip(null, VALID_LOCATION, VALID_DATERANGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new JsonAdaptedTrip(VALID_NAME, INVALID_LOCATION, VALID_DATERANGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d new JsonAdaptedTrip(VALID_NAME, null, VALID_DATERANGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void toModelType_invalidDateRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new JsonAdaptedTrip(VALID_NAME, VALID_LOCATION, INVALID_DATERANGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d DateRange.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void toModelType_nullDateRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonAdaptedTrip trip \u003d new JsonAdaptedTrip(VALID_NAME, VALID_LOCATION, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateRange.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, trip::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 17,
      "raniceyue": 59
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        userPrefs.setVolantFilePath(Paths.get(\"data\", \"volant.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 5,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/storage/JsonVolantStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class JsonVolantStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonVolantStorageTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void readTripList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTripList(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTripList\u003e readTripList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new JsonVolantStorage(Paths.get(filePath)).readTripList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(readTripList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void saveTripList_nullTripList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTripList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Saves {@code TripList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private void saveTripList(ReadOnlyTripList tripList, String filePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            new JsonVolantStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                    .saveTripList(tripList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void saveTripList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTripList(new TripList(), null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 63
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonVolantStorage jsonVolantStorage \u003d new JsonVolantStorage(getTempFilePath(\"volant\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        storageManager \u003d new StorageManager(jsonVolantStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void jsonVolantReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * {@link JsonVolantStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonVolantStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList original \u003d getTypicalTripList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storageManager.saveTripList(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ReadOnlyTripList retrieved \u003d storageManager.readTripList().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(original, new TripList(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void getVolantFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertNotNull(storageManager.getVolantFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "raniceyue": 13,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/volant/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/HomeLogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.JsonVolantStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class HomeLogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Model model \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HomeLogicManager logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        JsonVolantStorage volantStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new JsonVolantStorage(temporaryFolder.resolve(\"volant.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StorageManager storage \u003d new StorageManager(volantStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        logic \u003d new HomeLogicManager((HomeModelManager) model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String addCommand \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_NAME + \"Bali 2020 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_LOCATION + \"Bali \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_DATERANGE + \"02-01-2020 to 02-05-2020 \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d \"New trip added: \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Name: Bali 2020\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Location: Bali\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Date Range: 02 Jan 2020 - 02 May 2020\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(addCommand, expectedMessage, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTripList().remove(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Model expectedModel \u003d new HomeModelManager(((HomeModelManager) model).getTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 18,
      "raniceyue": 20,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        model \u003d new HomeModelManager(getTypicalTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_newTrip_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip validTrip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        HomeModelManager expectedModel \u003d new HomeModelManager(model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .getTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedModel.addTrip(validTrip);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTrip), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTrip), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_duplicateTrip_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip tripInList \u003d model.getTripList().getTripList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandFailure(new AddCommand(tripInList), model, AddCommand.MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 7,
      "raniceyue": 39
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.ReadOnlyTripList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void constructor_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute_tripAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ModelStubAcceptingTripAdded modelStub \u003d new ModelStubAcceptingTripAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip validTrip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTrip).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTrip), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Arrays.asList(validTrip), modelStub.tripsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute_duplicateTrip_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip validTrip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTrip);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTrip(validTrip);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_TRIP, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip alice \u003d new TripBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip bob \u003d new TripBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // different trip -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private class ModelStub extends HomeModelManager {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Page getPage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setVolantFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void addTrip(Trip trip) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setTripList(ReadOnlyTripList newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public TripList getTripList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void deleteTrip(Trip target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void setTrip(Trip target, Trip editedTrip) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public ObservableList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void updateFilteredTripList(Predicate\u003cTrip\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * A Model stub that contains a single trip."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private class ModelStubWithTrip extends ModelStub {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        private final Trip trip;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ModelStubWithTrip(Trip trip) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.trip \u003d trip;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.trip.isSameTrip(trip);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * A Model stub that always accept the trip being added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private class ModelStubAcceptingTripAdded extends ModelStub {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final ArrayList\u003cTrip\u003e tripsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return tripsAdded.stream().anyMatch(trip::isSameTrip);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public void addTrip(Trip trip) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            tripsAdded.add(trip);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public TripList getTripList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new TripList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 11,
      "raniceyue": 53,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 5,
      "raniceyue": 2,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.EditTripDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_TRIPNAME_GRADTRIP \u003d \"Graduation Trip 2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_TRIPNAME_CNY \u003d \"Chinese New Year Trip\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_TRIPNAME_RECESS \u003d \"Recess Week Solo Trip\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_LOCATION_GRADTRIP \u003d \"Bali Indonesia\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_LOCATION_CNY \u003d \"Beijing China\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_LOCATION_RECESS \u003d \"Bali, Indonesia\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_DATEFROM_GRADTRIP \u003d \"2020-04-25\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_DATETO_GRADTRIP \u003d \"2020-05-12\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_DATEFROM_CNY \u003d \"2020-01-20\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String VALID_DATETO_CNY \u003d \"2020-01-25\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_DATEFROM_RECESS \u003d \"25-02-2024\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_DATETO_RECESS \u003d \"28-02-2024\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String NAME_DESC_RECESS \u003d \" \" + PREFIX_NAME + VALID_TRIPNAME_RECESS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String LOCATION_DESC_RECESS \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_RECESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DATERANGE_DESC_RECESS \u003d \" \" + PREFIX_DATERANGE + VALID_DATEFROM_RECESS + \" to \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            + VALID_DATETO_RECESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final EditTripDescriptorBuilder DESC_GRADTRIP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final EditTripDescriptorBuilder DESC_CNY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DESC_GRADTRIP \u003d new EditTripDescriptorBuilder().withName(VALID_TRIPNAME_GRADTRIP)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .withLocation(VALID_LOCATION_GRADTRIP).withDateRange(VALID_DATEFROM_GRADTRIP, VALID_DATETO_GRADTRIP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        DESC_CNY \u003d new EditTripDescriptorBuilder().withName(VALID_TRIPNAME_CNY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .withLocation(VALID_LOCATION_CNY).withDateRange(VALID_DATEFROM_CNY, VALID_DATETO_CNY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandSuccess(Command command, HomeModelManager actualModel,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            HomeModelManager expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, HomeModelManager, CommandResult, HomeModelManager)}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandSuccess(Command command, HomeModelManager actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            HomeModelManager expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the filtered trip list and selected trip in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandFailure(Command command, HomeModelManager actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList expectedAddressBook \u003d new TripList(actualModel.getTripList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTripList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getTripList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTripList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 23,
      "raniceyue": 82
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model \u003d new HomeModelManager(getTypicalTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip tripToDelete \u003d model.getFilteredTripList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, tripToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        HomeModelManager expectedModel \u003d new HomeModelManager(model.getTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedModel.deleteTrip(tripToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTripList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TRIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(deleteCommand.equals(deleteCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(deleteCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(deleteCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(deleteCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 17,
      "raniceyue": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_DATEFROM_CNY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_DATETO_CNY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_TRIPNAME_CNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.EditTripDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model \u003d new HomeModelManager(getTypicalTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedTrip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        EditCommand.EditTripDescriptor descriptor \u003d new EditTripDescriptorBuilder(editedTrip).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRIP_SUCCESS, editedTrip);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        HomeModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new HomeModelManager(new TripList(model.getTripList()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedModel.setTrip(model.getFilteredTripList().get(0), editedTrip);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredTripList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip lastTrip \u003d model.getFilteredTripList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripBuilder personInList \u003d new TripBuilder(lastTrip);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip editedTrip \u003d personInList.withName(VALID_TRIPNAME_CNY).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .withDateRange(VALID_DATEFROM_CNY, VALID_DATETO_CNY).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditCommand.EditTripDescriptor descriptor \u003d new EditTripDescriptorBuilder().withName(VALID_TRIPNAME_CNY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .withLocation(VALID_LOCATION_CNY).withDateRange(VALID_DATEFROM_CNY, VALID_DATETO_CNY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRIP_SUCCESS, editedTrip);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        HomeModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new HomeModelManager(new TripList(model.getTripList()), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedModel.setTrip(lastTrip, editedTrip);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 13,
      "raniceyue": 23,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/EditTripDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.DESC_CNY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.DESC_GRADTRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_DATEFROM_GRADTRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_DATETO_GRADTRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_GRADTRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_TRIPNAME_GRADTRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.EditTripDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EditTripDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditTripDescriptorBuilder descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new EditTripDescriptorBuilder().withName(VALID_TRIPNAME_GRADTRIP)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .withLocation(VALID_LOCATION_GRADTRIP).withDateRange(VALID_DATEFROM_GRADTRIP, VALID_DATETO_GRADTRIP);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(DESC_GRADTRIP.build().equals(descriptorWithSameValues.build()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(DESC_GRADTRIP.equals(DESC_GRADTRIP));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(DESC_GRADTRIP.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(DESC_GRADTRIP.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(DESC_GRADTRIP.equals(DESC_CNY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 11,
      "raniceyue": 29
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager expectedModel \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "raniceyue": 6,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_TRIPS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model \u003d new HomeModelManager(getTypicalTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager expectedModel \u003d new HomeModelManager(getTypicalTripList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // different trip -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_oneKeywords_oneTripFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRIPS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"America\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedModel.updateFilteredTripList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(Arrays.asList(A), expectedModel.getFilteredTripList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 6,
      "raniceyue": 10,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager model \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private HomeModelManager expectedModel \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 3,
      "raniceyue": 6,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.DATERANGE_DESC_RECESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.LOCATION_DESC_RECESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.NAME_DESC_RECESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip expectedTrip \u003d new TripBuilder(B).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                PREAMBLE_WHITESPACE + NAME_DESC_RECESS + LOCATION_DESC_RECESS + DATERANGE_DESC_RECESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new AddCommand(expectedTrip));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_RECESS + LOCATION_DESC_RECESS + DATERANGE_DESC_RECESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new AddCommand(expectedTrip));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 6,
      "raniceyue": 28
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 4,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 2,
      "raniceyue": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.DESC_CNY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_TRIPNAME_RECESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, VALID_TRIPNAME_RECESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_TRIPNAME_RECESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESC_CNY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 12,
      "raniceyue": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/LocationTripParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.EditTripDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class LocationTripParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final HomeInputParser parser \u003d new HomeInputParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip trip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TripUtil.getAddCommand(trip));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(new AddCommand(trip), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip trip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        EditCommand.EditTripDescriptor descriptor \u003d new EditTripDescriptorBuilder(trip).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + INDEX_FIRST_ITEM.getOneBased() + \" \" + TripUtil.getEditTripDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 6,
      "raniceyue": 22,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 3,
      "raniceyue": 6,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/HomeModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class HomeModelManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private HomeModelManager modelManager \u003d new HomeModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(new TripList(), new TripList(modelManager.getTripList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        userPrefs.setVolantFilePath(Paths.get(\"data/volant.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        userPrefs.setVolantFilePath(Paths.get(\"data/volant.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setVolantFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setVolantFilePath(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setVolantFilePath_validPath_setsVolantFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Path path \u003d Paths.get(\"data/volant.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        modelManager.setVolantFilePath(path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(path, modelManager.getVolantFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void hasTrip_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTrip(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void hasTrip_tripNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(modelManager.hasTrip(A));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void hasTrip_tripInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        modelManager.addTrip(A);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(modelManager.hasTrip(A));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void getFilteredTripList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTripList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 6,
      "raniceyue": 20,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/TripListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getTypicalTripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private final TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(Collections.emptyList(), tripList.getTripList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void resetData_withValidReadOnlyTripList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList newData \u003d getTypicalTripList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        tripList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(newData, tripList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void resetData_withDuplicateTrips_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // Two trips with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedAlice \u003d new TripBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e newTrips \u003d Arrays.asList(A, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripListStub newData \u003d new TripListStub(newTrips);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e tripList.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void hasTrip_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.hasTrip(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void hasTrip_tripNotInTripList_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(tripList.hasTrip(A));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void hasTrip_tripInTripList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        tripList.addTrip(A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(tripList.hasTrip(A));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void hasTrip_tripWithSameIdentityFieldsInTripList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        tripList.addTrip(A);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedAlice \u003d new TripBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(tripList.hasTrip(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void getTripList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tripList.getTripList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * A stub ReadOnlyTripList whose trips list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static class TripListStub implements ReadOnlyTripList {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        private final ObservableList\u003cTrip\u003e trips \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripListStub(Collection\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.trips.setAll(trips);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        public ObservableList\u003cTrip\u003e getTripList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return trips;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 20,
      "raniceyue": 22,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setVolantFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 5,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/DateRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DateRangeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateRange(null, null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 7,
      "raniceyue": 6
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // null Location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // invalid Locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // valid Locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // ^ long Location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 2,
      "raniceyue": 35
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        // different trip -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(predicate.test(new TripBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(predicate.test(new TripBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(predicate.test(new TripBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(predicate.test(new TripBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(predicate.test(new TripBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(predicate.test(new TripBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/TripTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void isSameTrip() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip trip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(trip.isSameTrip(trip));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.isSameTrip(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip trip \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip tripCopy \u003d new TripBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(trip.equals(tripCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(trip.equals(trip));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip editedTrip \u003d new TripBuilder().withName(\"wot\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.equals(editedTrip));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        editedTrip \u003d new TripBuilder().withLocation(\"Singapore\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.equals(editedTrip));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different date range -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        editedTrip \u003d new TripBuilder().withDateRange(\"2010-10-10\", \"2010-10-15\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(trip.equals(editedTrip));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 20,
      "raniceyue": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/volant/home/model/trip/UniqueTripListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.home.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UniqueTripListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private final UniqueTripList uniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void contains_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void contains_tripNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertFalse(uniqueTripList.contains(A));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void contains_tripInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(uniqueTripList.contains(A));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void contains_tripWithSameMetaFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedAlice \u003d new TripBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertTrue(uniqueTripList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void add_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void add_duplicateTrip_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e uniqueTripList.add(A));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_nullTargetTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.setTrip(null, A));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_nullEditedTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.setTrip(A, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_targetTripNotInList_throwsTripNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(TripNotFoundException.class, () -\u003e uniqueTripList.setTrip(A, A));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_editedTripIsSameTrip_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.setTrip(A, A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedUniqueTripList.add(A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_editedTripHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Trip editedAlice \u003d new TripBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.setTrip(A, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedUniqueTripList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_editedTripHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.setTrip(A, B);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedUniqueTripList.add(B);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrip_editedTripHasNonUniqueIdentity_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(B);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e uniqueTripList.setTrip(A, B));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void remove_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void remove_tripDoesNotExist_throwsTripNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(TripNotFoundException.class, () -\u003e uniqueTripList.remove(A));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void remove_existingTrip_removesTrip() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.remove(A);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrips_nullUniqueTripList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.setTrips((UniqueTripList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrips_uniqueTripList_replacesOwnListWithProvidedUniqueTripList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedUniqueTripList.add(B);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.setTrips(expectedUniqueTripList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrips_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTripList.setTrips((List\u003cTrip\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrips_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.add(A);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e tripList \u003d Collections.singletonList(B);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        uniqueTripList.setTrips(tripList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        UniqueTripList expectedUniqueTripList \u003d new UniqueTripList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        expectedUniqueTripList.add(B);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedUniqueTripList, uniqueTripList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setTrips_listWithDuplicateTrips_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cTrip\u003e listWithDuplicateTrips \u003d Arrays.asList(A, A);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e uniqueTripList.setTrips(listWithDuplicateTrips));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            -\u003e uniqueTripList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 20,
      "raniceyue": 148,
      "zsoh97": 1
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/ItineraryLogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.storage.JsonVolantStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ItineraryLogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private Model model \u003d new ItineraryModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ItineraryLogicManager logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonVolantStorage volantStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new JsonVolantStorage(temporaryFolder.resolve(\"volant.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        StorageManager storage \u003d new StorageManager(volantStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        logic \u003d new ItineraryLogicManager((ItineraryModelManager) model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String addCommand \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_TITLE + \"Fly like a butterfly \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_DATE + \"10-06-2022 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_TIME + \"12:00 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + PREFIX_LOCATION + \"LOONA, BlockBerry Creative\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d \"New activity added: \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Title: Fly like a butterfly\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Location: LOONA, BlockBerry Creative\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Date: 10 Jun 2022\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                + \"Time: 12:00 PM\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(addCommand, expectedMessage, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void getFilteredActivityList_modifyActivity_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getModel().getFilteredActivityList().remove(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 76
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.getTypicalActivities;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getGermanyTrip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ItineraryModelManager model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_newActivity_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager expectedModel \u003d new ItineraryModelManager(model.getTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        expectedModel.addActivity(validActivity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(new AddCommand(validActivity), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validActivity), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_duplicateActivity_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activityInList \u003d model.getActivityList().getActivityList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandFailure(new AddCommand(activityInList), model, AddCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 45
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getGermanyTrip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.Page;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.ActivityListBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void constructor_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_tripAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded(getGermanyTrip());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validActivity).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validActivity), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(Arrays.asList(validActivity), modelStub.activitiesAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_duplicateTrip_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Trip germanyTrip \u003d getGermanyTrip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validActivity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithActivity(germanyTrip);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        modelStub.setActivityList(new ActivityListBuilder().withActivity(validActivity).build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity alice \u003d new ActivityBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity bob \u003d new ActivityBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different trip -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private class ModelStub extends ItineraryModelManager {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Page getPage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public Path getVolantFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setVolantFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setActivityList(ActivityList newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void deleteActivity(Activity activity) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * A Model stub that contains a single trip with a single activity."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private class ModelStubWithActivity extends ModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        private final Trip trip;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ModelStubWithActivity(Trip trip) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.trip \u003d trip;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            requireNonNull(activity);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return this.trip.getItinerary().getActivityList().getActivityList().get(0).equals(activity);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void setActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            trip.getItinerary().getActivityList().setActivities(activityList.getActivityList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * A Model stub that always accept the activity being added into the current trip."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private class ModelStubAcceptingActivityAdded extends ModelStub {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        final ArrayList\u003cActivity\u003e activitiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        final Trip trip;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ModelStubAcceptingActivityAdded(Trip trip) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            requireNonNull(trip);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            this.trip \u003d trip;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            requireNonNull(activity);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return activitiesAdded.stream().anyMatch(activity::equals);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            requireNonNull(activity);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            activitiesAdded.add(activity);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        public ActivityList getActivityList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            return new ActivityList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 216
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_TITLE_ZOO \u003d \"Go to the zoo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_TITLE_SING \u003d \"Singing in the rain\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_LOCATION_ZOO \u003d \"Bali Indonesia\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_LOCATION_SING \u003d \"Jinsoul LOONA\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_DATE_ZOO \u003d \"2020-10-14\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_DATE_SING \u003d \"2021-06-02\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String FORMATTED_DATE_ZOO \u003d \"14-10-2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String FORMATTED_DATE_SING \u003d \"02-06-2021\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_TIME_ZOO \u003d \"12:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String VALID_TIME_SING \u003d \"02:00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String TITLE_DESC_ZOO \u003d \" \" + PREFIX_TITLE + VALID_TITLE_ZOO;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String TITLE_DESC_SING \u003d \" \" + PREFIX_TITLE + VALID_TITLE_SING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String LOCATION_DESC_ZOO \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_ZOO;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String LOCATION_DESC_SING \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_SING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String TIME_DESC_ZOO \u003d \" \" + PREFIX_TIME + VALID_TIME_ZOO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String TIME_DESC_SING \u003d \" \" + PREFIX_TIME + VALID_TIME_SING;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DATE_DESC_ZOO \u003d \" \" + PREFIX_DATE + FORMATTED_DATE_ZOO;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DATE_DESC_SING \u003d \" \" + PREFIX_DATE + FORMATTED_DATE_SING;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final EditItineraryDescriptorBuilder DESC_ITINERARY_ZOO;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final EditItineraryDescriptorBuilder DESC_ITINERARY_SING;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DESC_ITINERARY_ZOO \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new EditItineraryDescriptorBuilder().withTitle(VALID_TITLE_ZOO)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        .withLocation(VALID_LOCATION_ZOO).withDate(VALID_DATE_ZOO)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        .withTime(VALID_TIME_ZOO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DESC_ITINERARY_SING \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new EditItineraryDescriptorBuilder().withTitle(VALID_TITLE_SING)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        .withLocation(VALID_LOCATION_SING).withDate(VALID_DATE_SING)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        .withTime(VALID_TIME_SING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItineraryModelManager actualModel,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            ItineraryModelManager expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * (Command, ItineraryModelManager, CommandResult, ItineraryModelManager)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItineraryModelManager actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            ItineraryModelManager expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * - the address book, filtered trip list and selected trip in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void assertCommandFailure(Command command, ItineraryModelManager actualModel,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ActivityList expectedList \u003d new ActivityList(actualModel.getActivityList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        List\u003cActivity\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredActivityList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(expectedList, actualModel.getActivityList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredActivityList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the trip at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static void showActivityAtIndex(ItineraryModelManager model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activity \u003d model.getFilteredActivityList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.updateFilteredActivityList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new TitleContainsKeywordsPredicate(Arrays.asList(activity.getTitle().toString())));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertEquals(1, model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 131
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.getTypicalActivities;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getGermanyTrip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ItineraryModelManager model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager expectedModel \u003d new ItineraryModelManager(model.getTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 40
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.getTypicalActivities;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.getGermanyTrip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.EditCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ItineraryModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String MESSAGE_EDIT_ITINERARY_SUCCESS \u003d \"Edited activity: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ItineraryModelManager model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder(editedActivity).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ITINERARY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ItineraryModelManager expectedModel \u003d new ItineraryModelManager(model.getTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        expectedModel.setActivity(model.getFilteredActivityList().get(0), editedActivity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model \u003d new ItineraryModelManager(getGermanyTrip(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        model.getTrip().getItinerary().getActivityList().setActivities(getTypicalActivities());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 44
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/EditItineraryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.DESC_ITINERARY_SING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.DESC_ITINERARY_ZOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_DATE_ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_LOCATION_ZOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_TIME_ZOO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_TITLE_ZOO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditItineraryDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        EditItineraryDescriptorBuilder descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new EditItineraryDescriptorBuilder().withTitle(VALID_TITLE_ZOO)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                        .withLocation(VALID_LOCATION_ZOO).withDate(VALID_DATE_ZOO)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                .withTime(VALID_TIME_ZOO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(DESC_ITINERARY_ZOO.build().equals(descriptorWithSameValues.build()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertTrue(DESC_ITINERARY_ZOO.equals(DESC_ITINERARY_ZOO));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(DESC_ITINERARY_ZOO.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(DESC_ITINERARY_ZOO.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertFalse(DESC_ITINERARY_ZOO.equals(DESC_ITINERARY_SING));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 40
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/commands/FindItineraryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindItineraryDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.DATE_DESC_SING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.LOCATION_DESC_SING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.TIME_DESC_SING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.TITLE_DESC_SING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.E;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity expectedActivity \u003d new ActivityBuilder(E).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                PREAMBLE_WHITESPACE + TITLE_DESC_SING + DATE_DESC_SING + TIME_DESC_SING + LOCATION_DESC_SING,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new AddCommand(expectedActivity));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_SING + DATE_DESC_SING + TIME_DESC_SING + LOCATION_DESC_SING,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "                new AddCommand(expectedActivity));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 34
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 24
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.DESC_ITINERARY_SING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_DATE_SING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, VALID_DATE_SING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_DATE_SING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESC_ITINERARY_SING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 47
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.home.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import static seedu.volant.itinerary.logic.commands.CommandTestUtil.VALID_DATE_SING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no prefix specified"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, VALID_DATE_SING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, PREFIX_TITLE + \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 29
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ActivityListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(Collections.emptyList(), activityList.getActivityList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.resetData(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void resetData_withValidReadOnlyActivityList_replacesData() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityList newData \u003d getTypicalActivityList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activityList.resetData(newData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(newData, activityList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.hasActivity(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_activityNotInactivityList_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(activityList.hasActivity(A));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_activityInactivityList_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activityList.addActivity(A);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(activityList.hasActivity(A));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_activityWithSameIdentityFieldsInactivityList_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        activityList.addActivity(A);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity editedActivity \u003d new ActivityBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(activityList.hasActivity(editedActivity));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void getActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e activityList.getActivityList().remove(0));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     * A stub ReadOnlyTripList whose trips list can violate interface constraints."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static class ActivityListStub implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityListStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            this.activities.setAll(activities);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 83
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/ItineraryModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalTrips.B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.TripBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ItineraryModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private ItineraryModelManager modelManager \u003d new ItineraryModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(new Trip(new Name(\"Berlin berlin\"), new Location(\"Berlin, Germany\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new DateRange(LocalDate.parse(\"2022-06-10\"), LocalDate.parse(\"2022-06-21\"))),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                        new Trip(modelManager.getTrip()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        userPrefs.setVolantFilePath(Paths.get(\"volant/trip/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        userPrefs.setVolantFilePath(Paths.get(\"new/volant/trip/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setVolantFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setVolantFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setVolantFilePath_validPath_setsVolantFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Path path \u003d Paths.get(\"volant/trip/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager.setVolantFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(path, modelManager.getVolantFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasActivity(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_activityNotInActivityList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(modelManager.hasActivity(C));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void hasActivity_activityInActivityList_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager.addActivity(C);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(modelManager.hasActivity(C));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void getFilteredActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredActivityList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Trip trip \u003d new TripBuilder(A).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Trip differentTrip \u003d new TripBuilder(B).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager \u003d new ItineraryModelManager(trip, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ItineraryModelManager modelManagerCopy \u003d new ItineraryModelManager(trip, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different Trip -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(modelManager.equals(new ItineraryModelManager(differentTrip, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        modelManager.updateFilteredActivityList(modelManager.getPredicateShowAllActivities());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        differentUserPrefs.setVolantFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(modelManager.equals(new ItineraryModelManager(trip, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 130
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/ActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ActivityTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void isSameActivity() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(A.isSameActivity(A));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity editedA \u003d new ActivityBuilder(A).withDate(B.getDate().toString())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .withTime(B.getTime().toString()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withTitle(B.getTitle().toString()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same name, same date, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withLocation(B.getLocation().toString())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .withTime(B.getTime().toString()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same name, same time, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withLocation(B.getLocation().toString())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .withDate(B.getDate().toString()).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same name, same location, same date, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withTime(B.getTime().toString()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity aCopy \u003d new ActivityBuilder(A).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(A.equals(aCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(A, A);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertNotEquals(null, A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertNotEquals(5, A);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different Activity -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertNotEquals(A, B);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity editedA \u003d new ActivityBuilder(A).withTitle(B.getTitle().toString()).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withLocation(\"Beijing\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withDate(B.getDate().toString()).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        editedA \u003d new ActivityBuilder(A).withTime(B.getTime().toString()).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(A.isSameActivity(editedA));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 78
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(Title.isValidTitle(\"skiing*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(Title.isValidTitle(\"sledding\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2nd visit to\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Mountain Climbing\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Gonna go visit the golden gate bridge\")); // long Titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 36
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/UniqueActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.home.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class UniqueActivityListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(uniqueActivityList.contains(A));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(uniqueActivityList.contains(A));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void contains_activityWithSameMetaFieldsInList_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity editedAlice \u003d new ActivityBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(uniqueActivityList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void add_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void add_duplicateActivity_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.add(A));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_nullTargetActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(null, A));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_nullEditedActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(A, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_targetActivityNotInList_throwsNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NotFoundException.class, () -\u003e uniqueActivityList.setActivity(A, A));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_editedActivityIsSameActivity_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.setActivity(A, A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        expectedUniqueActivityList.add(A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_editedActivityHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        Activity editedAlice \u003d new ActivityBuilder(A).withLocation(VALID_LOCATION_CNY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.setActivity(A, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        expectedUniqueActivityList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_editedActivityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.setActivity(A, B);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        expectedUniqueActivityList.add(B);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivity_editedActivityHasNonUniqueIdentity_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(B);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.setActivity(A, B));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void remove_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void remove_activityDoesNotExist_throwsNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NotFoundException.class, () -\u003e uniqueActivityList.remove(A));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void remove_existingActivity_removesActivity() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.remove(A);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivities_nullUniqueActivityList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((UniqueActivityList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivities_uniqueActivityList_replacesOwnListWithProvidedUniqueActivityList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        expectedUniqueActivityList.add(B);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.setActivities(expectedUniqueActivityList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivities_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((List\u003cActivity\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivities_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.add(A);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cActivity\u003e activityList \u003d Collections.singletonList(B);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        uniqueActivityList.setActivities(activityList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        UniqueActivityList expectedUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        expectedUniqueActivityList.add(B);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void setActivities_listWithDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cActivity\u003e listWithDuplicateActivitys \u003d Arrays.asList(A, A);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(DuplicateActivityException.class, ("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            ) -\u003e uniqueActivityList.setActivities(listWithDuplicateActivitys));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            )-\u003e uniqueActivityList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 166
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/util/DateContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DateContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalDate firstPredicateKeyword \u003d LocalDate.parse(\"2022-05-01\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalDate secondPredicateKeyword \u003d LocalDate.parse(\"2022-06-14\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicate \u003d new DateContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateContainsKeywordsPredicate secondPredicate \u003d new DateContainsKeywordsPredicate(secondPredicateKeyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicateCopy \u003d new DateContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different Date -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_dateContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d new DateContainsKeywordsPredicate(LocalDate.parse(\"2022-05-01\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withDate(\"2022-05-01\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_dateDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d new DateContainsKeywordsPredicate(LocalDate.parse(\"2022-06-14\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withDate(\"2022-05-01\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 50
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/util/DateTimeComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class DateTimeComparatorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/util/LocationContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class LocationContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocationContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new LocationContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocationContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new LocationContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocationContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new LocationContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different trip -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_locationContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d new LocationContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \"Frankfurt\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt Berlin\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Frankfurt\", \"Berlin\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt Berlin\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Berlin\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"FrANkfUrt\", \"bERlIn\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt Berlin\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_locationDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocationContainsKeywordsPredicate predicate \u003d new LocationContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Bremen\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withLocation(\"Frankfurt Berlin\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Keywords match title, date and time, but does not match location"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Countdown\", \"12345\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \"25-12-2022\", \"19:00\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withLocation(\"Countdown\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .withLocation(\"New York Time Square\").withDate(\"2022-12-15\").withTime(\"19:00\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 78
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/util/TimeContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TimeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalTime firstPredicateKeyword \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        LocalTime secondPredicateKeyword \u003d LocalTime.parse(\"14:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TimeContainsKeywordsPredicate firstPredicate \u003d new TimeContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TimeContainsKeywordsPredicate secondPredicate \u003d new TimeContainsKeywordsPredicate(secondPredicateKeyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TimeContainsKeywordsPredicate firstPredicateCopy \u003d new TimeContainsKeywordsPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different Time -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_timeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TimeContainsKeywordsPredicate predicate \u003d new TimeContainsKeywordsPredicate(LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withTime(\"12:00\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_timeDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TimeContainsKeywordsPredicate predicate \u003d new TimeContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withTime(\"12:00\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TimeContainsKeywordsPredicate(LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withTime(\"12:00\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 54
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/model/activity/util/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.itinerary.model.activity.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \"Parasailing\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withTitle(\"Parasailing Scubadiving\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Parasailing\", \"Scubadiving\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withTitle(\"Parasailing Scubadiving\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Scubadiving\", \"Skiing\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withTitle(\"Parasailing Skiing\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"PArASaIliNG\", \"SCUbaDiVINg\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withTitle(\"Parasailing Scubadiving\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withTitle(\"Parasailing\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Skiing\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withTitle(\"Parasailing Scubadiving\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        // Keywords match location, date and time, but does not match title"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Trekking\", \"Hebei\", \"25-12-2022\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                \"19:00\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withTitle(\"Parasailing\").withLocation(\"Hebei\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                .withDate(\"2022-12-15\").withTime(\"19:00\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "zsoh97": 76
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/storage/JsonAdaptedActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.itinerary.storage.JsonAdaptedActivity.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.TypicalActivities.B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "class JsonAdaptedActivityTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-32-01\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String INVALID_TIME \u003d \"24:59\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String VALID_TITLE \u003d B.getTitle().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String VALID_LOCATION \u003d B.getLocation().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String VALID_DATE \u003d \"01 May 2020\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final String VALID_TIME \u003d B.getTime().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_validActivityDetails_returnsActivity() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(B);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(B, activity.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new JsonAdaptedActivity(INVALID_TITLE, VALID_LOCATION, VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(null, VALID_LOCATION, VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new JsonAdaptedActivity(VALID_TITLE, INVALID_LOCATION, VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(VALID_TITLE, null, VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                new JsonAdaptedActivity(VALID_TITLE, VALID_LOCATION, INVALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_ERROR_LOADING_DATE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_invalidTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(VALID_TITLE, VALID_LOCATION, VALID_DATE, INVALID_TIME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_ERROR_LOADING_TIME;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, activity::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsoh97": 79
    }
  },
  {
    "path": "src/test/java/seedu/volant/itinerary/storage/JsonSerializableActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "package seedu.volant.itinerary.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "import seedu.volant.testutil.TypicalActivities;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "class JsonSerializableActivityListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "            \"JsonSerializableActivityListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final Path TYPICAL_ACTIVITIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalActivitiesActivityList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final Path INVALID_ACTIVITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidActivityActivityList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private static final Path DUPLICATE_ACTIVITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateActivityActivityList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_typicalActivitiesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonSerializableActivityList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ACTIVITIES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                JsonSerializableActivityList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityList activityListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        ActivityList typicalPersonsActivityList \u003d TypicalActivities.getTypicalActivityList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertEquals(activityListFromFile, typicalPersonsActivityList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_invalidActivityFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonSerializableActivityList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACTIVITY_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                JsonSerializableActivityList.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public void toModelType_duplicateActivity_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        JsonSerializableActivityList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ACTIVITY_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                JsonSerializableActivityList.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "                JsonSerializableActivityList.MESSAGE_DUPLICATE_ACTIVITY, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsoh97": 47
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/ActivityBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class to help with building Activity objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Go to Brandenburg Cafe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Berlin, Germany\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2022-06-10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        date \u003d LocalDate.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        time \u003d LocalTime.parse(DEFAULT_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Initializes the Itinerary with the data of {@code tripToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder(Activity activityToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        title \u003d activityToCopy.getTitle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        location \u003d activityToCopy.getLocation();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        date \u003d activityToCopy.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        time \u003d activityToCopy.getTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Title} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Location} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Time} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityBuilder withTime(String time) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.time \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Build the Activity object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * @return the activity object that has been built"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public Activity build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        Activity activity \u003d new Activity(title, date, time, location);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 81
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/ActivityListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class to help with building ActivityList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ActivityListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityListBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityListBuilder(ActivityList activityList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Adds a new {@code Trip} to the {@code TripList} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityListBuilder withActivity(Activity activity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        activityList.addActivity(activity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public ActivityList build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 32
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/EditItineraryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.logic.commands.EditCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class to help with building EditItineraryDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class EditItineraryDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private EditItineraryDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder(EditItineraryDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        this.descriptor \u003d new EditItineraryDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code trip}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder(Activity activity) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setTitle(activity.getTitle());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setLocation(activity.getLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setDate(activity.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setTime(activity.getTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code Location} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code DateRange} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setDate(LocalDate.parse(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Sets the {@code DateRange} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        descriptor.setTime(LocalTime.parse(time));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public EditItineraryDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 72
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/EditTripDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand.EditTripDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EditTripDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private EditTripDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor \u003d new EditTripDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder(EditTripDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.descriptor \u003d new EditTripDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code trip}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder(Trip trip) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor \u003d new EditTripDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setName(trip.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setLocation(trip.getLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setDateRange(trip.getDateRange());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code Location} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code DateRange} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptorBuilder withDateRange(String dateFrom, String dateTo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.setDateRange(new DateRange(LocalDate.parse(dateFrom), LocalDate.parse(dateTo)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EditTripDescriptor build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 63
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/FindItineraryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class to help with building FindPersonDescriptor objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class FindItineraryDescriptorBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    //to be done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 8
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/ItineraryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class for Itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class ItineraryUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    //to be completed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 8
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.home.model.HomeModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the middle index of the trip in the {@code model}\u0027s trip list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return Index.fromOneBased(((HomeModelManager) model).getFilteredTripList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the last index of the trip in the {@code model}\u0027s trip list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return Index.fromOneBased(((HomeModelManager) model).getFilteredTripList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the trip in the {@code model}\u0027s trip list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Trip getTrip(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return ((HomeModelManager) model).getFilteredTripList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 4,
      "raniceyue": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TripBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.DateRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A utility class to help with building Trip objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Grad Trip 2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Bali, Indonesia\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String DEFAULT_DATEFROM \u003d \"2020-02-01\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String DEFAULT_DATETO \u003d \"2020-02-06\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private DateRange dateRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dateRange \u003d new DateRange(LocalDate.parse(DEFAULT_DATEFROM), LocalDate.parse(DEFAULT_DATETO));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes the TripBuilder with the data of {@code tripToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripBuilder(Trip tripToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        name \u003d tripToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        location \u003d tripToCopy.getLocation();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dateRange \u003d tripToCopy.getDateRange();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code Name} of the {@code Trip} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code Location} of the {@code Trip} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Sets the {@code Phone} of the {@code Trip} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripBuilder withDateRange(String dateFrom, String dateTo) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateRange \u003d new DateRange(LocalDate.parse(dateFrom), LocalDate.parse(dateTo));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Trip build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new Trip(name, location, dateRange);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 68
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TripListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class to help with building TripList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    private TripList tripList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripListBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        tripList \u003d new TripList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public TripListBuilder(TripList tripList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        this.tripList \u003d tripList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Adds a new {@code Trip} to the {@code TripList} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "    public TripListBuilder withTrip(Trip trip) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        tripList.addTrip(trip);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TripList build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsoh97"
        },
        "content": "        return tripList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 24,
      "zsoh97": 7
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TripUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_DATERANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.commons.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A utility class for Trip."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TripUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an add command string for adding the {@code trip}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String getAddCommand(Trip trip) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(trip);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the part of command string for the given {@code trip}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String getPersonDetails(Trip trip) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        sb.append(PREFIX_NAME + trip.getName().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        sb.append(PREFIX_LOCATION + trip.getLocation().location + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        sb.append(PREFIX_DATERANGE + trip.getDateRange().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static String getEditTripDescriptorDetails(EditCommand.EditTripDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(location.location).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        descriptor.getDateRange().ifPresent(dateRange -\u003e sb.append(PREFIX_DATERANGE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                .append(dateRange.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 1,
      "raniceyue": 45
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TypicalActivities.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.ActivityList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "import seedu.volant.itinerary.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " * A utility class containing a list of {@code Activities} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Activity A \u003d new ActivityBuilder().withTitle(\"Visit the War Museum\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Berlin, Germany\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDate(\"2022-06-11\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withTime(\"20:00\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Activity B \u003d new ActivityBuilder().withTitle(\"Eat some McDonald Chicken nuggets\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Berlin, Germany\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDate(\"2022-06-12\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withTime(\"02:00\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Activity C \u003d new ActivityBuilder().withTitle(\"Build a snowman\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Berlin, Germany\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDate(\"2022-06-13\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withTime(\"16:30\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Activity D \u003d new ActivityBuilder().withTitle(\"Visit the Brandenburg Gate\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Berlin, Germany\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDate(\"2022-06-14\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withTime(\"10:30\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Activity E \u003d new ActivityBuilder().withTitle(\"Singing in the rain\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Jinsoul LOONA\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDate(\"2021-06-02\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withTime(\"02:00\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     * Returns an {@code ActivityList} with all the typical activities."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static ActivityList getTypicalActivityList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        ActivityList list \u003d new ActivityList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        for (Activity activity : getTypicalActivities()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            list.addActivity(activity);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, C, D));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 53
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 3,
      "raniceyue": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/volant/testutil/TypicalTrips.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.TripList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.home.model.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A utility class containing a list of {@code Trip} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TypicalTrips {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Trip A \u003d new TripBuilder().withName(\"America 2020\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withLocation(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDateRange(\"2023-01-01\", \"2023-02-05\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Trip B \u003d new TripBuilder().withName(\"Recess Week Solo Trip\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withLocation(\"Bali, Indonesia\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDateRange(\"2024-02-25\", \"2024-02-28\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Trip C \u003d new TripBuilder().withName(\"California Summer 2021\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withLocation(\"California, USA\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withDateRange(\"2021-06-01\", \"2021-06-20\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final Trip D \u003d new TripBuilder().withName(\"India Laa Bois\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withLocation(\"New Delhi, India\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            .withDateRange(\"2018-12-12\", \"2018-12-21\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static final Trip E \u003d new TripBuilder().withName(\"Berlin berlin\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withLocation(\"Berlin, Germany\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "            .withDateRange(\"2022-06-10\", \"2022-06-21\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TypicalTrips() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns an {@code TripList} with all the typical persons."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static TripList getTypicalTripList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TripList ab \u003d new TripList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Trip trip : getTypicalTrips()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            ab.addTrip(trip);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static List\u003cTrip\u003e getTypicalTrips() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(A, B, C, D));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    public static Trip getGermanyTrip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        return E;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 10,
      "raniceyue": 41
    }
  },
  {
    "path": "src/test/java/seedu/volant/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/volant/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package seedu.volant.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static seedu.volant.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import seedu.volant.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "    /*    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vuhieunguyen"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vuhieunguyen": 2,
      "raniceyue": 3,
      "-": 108
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cfx:root type\u003d\"seedu.location.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1,
      "-": 5
    }
  }
]
